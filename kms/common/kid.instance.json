{
  "queries": [
    "kia's sister is hana",
    "kia's name is kia",
    "kia's age is 27",
    "hana's sister is kia",
    "hana's name is hana",
    "hana's age is 21",
    "kia loves chicken strips",
    "kia hates sushi",
    "hana likes chicken strips",
    "hana dislikes sushi",
    "hanna means hana",
    "kia's cat is cleo"
  ],
  "resultss": [
    {
      "hierarchy": [
        [
          "hate",
          "canBeQuestion"
        ],
        [
          "sushi",
          "hierarchyAble"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "food",
          "queryable"
        ],
        [
          "pidgeon",
          "queryable"
        ],
        [
          "human",
          "theAble"
        ],
        [
          "love",
          "canBeQuestion"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "owl",
          "theAble"
        ],
        [
          "dislike",
          "canBeDoQuestion"
        ],
        [
          "self",
          "queryable"
        ],
        [
          "dislike",
          "ifAble"
        ],
        [
          "parrot",
          "object"
        ],
        [
          "bird",
          "theAble"
        ],
        [
          "like",
          "orAble"
        ],
        [
          "dog",
          "object"
        ],
        [
          "canBeDoQuestion",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "mammal",
          "hierarchyAble"
        ],
        [
          "chicken_strip",
          "hierarchyAble"
        ],
        [
          "does_after_canBeDoQuestion_doesAble",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "cat",
          "queryable"
        ],
        [
          "mammal",
          "queryable"
        ],
        [
          "love",
          "canBeDoQuestion"
        ],
        [
          "dog",
          "queryable"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "hate",
          "canBeDoQuestion"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "human",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "feline",
          "queryable"
        ],
        [
          "strip",
          "theAble"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "bat",
          "queryable"
        ],
        [
          "like",
          "canBeQuestion"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "wolf",
          "object"
        ],
        [
          "dislike",
          "canBeQuestion"
        ],
        [
          "like",
          "ifAble"
        ],
        [
          "animal",
          "theAble"
        ],
        [
          "bird",
          "hierarchyAble"
        ],
        [
          "pidgeon",
          "hierarchyAble"
        ],
        [
          "strip",
          "concept"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "animal",
          "object"
        ],
        [
          "canine",
          "hierarchyAble"
        ],
        [
          "strip",
          "hierarchyAble"
        ],
        [
          "mammal",
          "object"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "have",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "questionMark_before_canBeQuestion_have",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "owl",
          "queryable"
        ],
        [
          "bat",
          "theAble"
        ],
        [
          "wolf",
          "hierarchyAble"
        ],
        [
          "food",
          "object"
        ],
        [
          "chicken_strip",
          "strip"
        ],
        [
          "strip",
          "queryable"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "feline",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "sushi",
          "object"
        ],
        [
          "parrot",
          "hierarchyAble"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "human",
          "object"
        ],
        [
          "hate",
          "orAble"
        ],
        [
          "animal",
          "queryable"
        ],
        [
          "canine",
          "theAble"
        ],
        [
          "animal",
          "hierarchyAble"
        ],
        [
          "pidgeon",
          "theAble"
        ],
        [
          "want",
          "ifAble"
        ],
        [
          "concept",
          "concept"
        ],
        [
          "wolf",
          "theAble"
        ],
        [
          "feline",
          "hierarchyAble"
        ],
        [
          "parrot",
          "theAble"
        ],
        [
          "bird",
          "object"
        ],
        [
          "want",
          "canBeQuestion"
        ],
        [
          "doesAble",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "eagle",
          "queryable"
        ],
        [
          "dislike",
          "orAble"
        ],
        [
          "whose",
          "object"
        ],
        [
          "dog",
          "theAble"
        ],
        [
          "parrot",
          "queryable"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "eagle",
          "object"
        ],
        [
          "mammal",
          "theAble"
        ],
        [
          "canBeQuestion",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "cat",
          "theAble"
        ],
        [
          "eagle",
          "hierarchyAble"
        ],
        [
          "cat",
          "object"
        ],
        [
          "feline",
          "object"
        ],
        [
          "food",
          "theAble"
        ],
        [
          "bird",
          "queryable"
        ],
        [
          "sushi",
          "theAble"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "owl",
          "object"
        ],
        [
          "canine",
          "object"
        ],
        [
          "love",
          "ifAble"
        ],
        [
          "bat",
          "hierarchyAble"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "pidgeon",
          "object"
        ],
        [
          "human",
          "hierarchyAble"
        ],
        [
          "food",
          "hierarchyAble"
        ],
        [
          "dog",
          "hierarchyAble"
        ],
        [
          "want",
          "canBeDoQuestion"
        ],
        [
          "want",
          "orAble"
        ],
        [
          "sushi",
          "queryable"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "wolf",
          "queryable"
        ],
        [
          "owl",
          "hierarchyAble"
        ],
        [
          "cat",
          "hierarchyAble"
        ],
        [
          "like",
          "canBeDoQuestion"
        ],
        [
          "love",
          "orAble"
        ],
        [
          "hate",
          "ifAble"
        ],
        [
          "eagle",
          "theAble"
        ],
        [
          "bat",
          "object"
        ],
        [
          "canine",
          "queryable"
        ],
        [
          "property",
          "queryable"
        ]
      ],
      "load_cache_time": 0.004214048385620117,
      "logs": [
        "Undefined word 'kia'",
        "Undefined word 'sister'",
        "Undefined word 'hana'",
        "Op choices were: [(('unknown', 0), [('is', 0), ('possession', 0), ('unknown', 0)]), (('unknown', 0), [('is', 0), ('possession', 0), ('unknown', 0)]), (('unknown', 0), [('is', 0), ('possession', 0), ('unknown', 0)]), (('possession', 0), [('is', 0), ('possession', 0)]), (('possession', 1), [('is', 0), ('possession', 1)]), (('property', 0), [('is', 0), ('property', 0)]), (('is', 0), [('is', 0)]), (('is', 1), [('is', 1)])]",
        "Contexts used for choosing operators (if the wrong choices were made update the priories array. Put the expected choice at the end of the list): \n  Context for choosing the operator unknown/0 was [['is', 0], ['possession', 0], ['unknown', 0]]\n  Context for choosing the operator unknown/0 was [['is', 0], ['possession', 0], ['unknown', 0]]\n  Context for choosing the operator unknown/0 was [['is', 0], ['possession', 0], ['unknown', 0]]\n  Context for choosing the operator possession/0 was [['is', 0], ['possession', 0]]\n  Context for choosing the operator possession/1 was [['is', 0], ['possession', 1]]\n  Context for choosing the operator property/0 was [['is', 0], ['property', 0]]\n  Context for choosing the operator is/0 was [['is', 0]]\n  Context for choosing the operator is/1 was [['is', 1]]",
        "",
        "Semantic            No semantic applied                                                                       \n          TO        {                                                                                         \n                      \"marker\": \"controlStart\",                                                               \n                      \"controlRemove\": true,                                                                  \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n",
        "Semantic            KM 'properties' ordinal: 5  notes: \"set the property of an object\"                        \n          APPLIED   Semantic(({context}) => context.marker == 'property' && context.same && context.object, ({\n                    context, objects, km, api}) => {                                                          \n                            const objectContext = context.object;                                             \n                            const propertyContext = context;                                                  \n                            const objectId = context.object.value                                             \n                            const propertyId = context.value                                                  \n                            try{                                                                              \n                              // greg                                                                         \n                              // api.makeObject({config, context: objectContext, doPluralize: false})         \n                              // api.addWord(propertyContext)                                                 \n                              // api.addWord(objectContext)                                                   \n                              api.setProperty(pluralize.singular(objectId), pluralize.singular(propertyId), co\n                    ntext.same, true)                                                                         \n                              context.sameWasProcessed = true                                                 \n                            } catch (e) {                                                                     \n                              const config = km('properties')                                                 \n                              const fragment = config.fragment(\"the property1 of object1 is value1\")          \n                              const value = api.getProperty(objectId, propertyId)                             \n                              if (value.value == context.same.value) {                                        \n                                context.response = [                                                          \n                                  { marker: 'yesno', value: true, paraphrase: true },                         \n                                ]                                                                             \n                                context.sameWasProcessed = true                                               \n                              } else {                                                                        \n                                const mappings = [                                                            \n                                  {                                                                           \n                                    match: ({context}) => context.value == 'property1',                       \n                                    apply: ({context}) => Object.assign(context, { word: propertyContext.word,\n                     value: propertyContext.value, paraphrase: true }),                                       \n                                  },                                                                          \n                                  {                                                                           \n                                    match: ({context}) => context.value == 'object1',                         \n                                    apply: ({context}) => {                                                   \n                                      Object.assign(context, { word: objectContext.word, value: objectContext.\n                    value, paraphrase: true })                                                                \n                                    },                                                                        \n                                  },                                                                          \n                                  {                                                                           \n                                    match: ({context}) => context.value == 'value1',                          \n                                    apply: ({context}) => Object.assign(context, value),                      \n                                  },                                                                          \n                                ]                                                                             \n                                // run the query 'the property of object' then copy that here and template it \n                                context.response = {                                                          \n                                  verbatim: \"no way hose\"                                                     \n                                }                                                                             \n                                context.response = [                                                          \n                                  { marker: 'yesno', value: false, paraphrase: true },                        \n                                ]                                                                             \n                                context.response = context.response.concat(fragment.instantiate(mappings))    \n                                context.response.forEach( (r) => r.paraphrase = true )                        \n                                context.sameWasProcessed = true                                               \n                              }                                                                               \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"object\": {                                                                             \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"kia\",                                                                        \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"kia\",                                                                       \n                        \"word\": \"kia\"                                                                         \n                      },                                                                                      \n                      \"objects\": [                                                                            \n                        {                                                                                     \n                          \"marker\": \"property\",                                                               \n                          \"text\": \"sister\",                                                                   \n                          \"types\": [                                                                          \n                            \"property\"                                                                        \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"sister\",                                                                  \n                          \"word\": \"sister\"                                                                    \n                        },                                                                                    \n                        {                                                                                     \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"kia\",                                                                      \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"kia\",                                                                     \n                          \"word\": \"kia\"                                                                       \n                        }                                                                                     \n                      ],                                                                                      \n                      \"text\": \"kia 's sister\",                                                                \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"sister\",                                                                      \n                      \"word\": \"sister\",                                                                       \n                      \"same\": {                                                                               \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hana\",                                                                       \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hana\",                                                                      \n                        \"word\": \"hana\",                                                                       \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"response\": null                                                                        \n                    }                                                                                         \n          STACK     Context#2: call2,call3                                                                    \n          RESULT    {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"object\": {                                                                             \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"kia\",                                                                        \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"kia\",                                                                       \n                        \"word\": \"kia\"                                                                         \n                      },                                                                                      \n                      \"objects\": [                                                                            \n                        {                                                                                     \n                          \"marker\": \"property\",                                                               \n                          \"text\": \"sister\",                                                                   \n                          \"types\": [                                                                          \n                            \"property\"                                                                        \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"sister\",                                                                  \n                          \"word\": \"sister\"                                                                    \n                        },                                                                                    \n                        {                                                                                     \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"kia\",                                                                      \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"kia\",                                                                     \n                          \"word\": \"kia\"                                                                       \n                        }                                                                                     \n                      ],                                                                                      \n                      \"text\": \"kia 's sister\",                                                                \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"sister\",                                                                      \n                      \"word\": \"sister\",                                                                       \n                      \"same\": {                                                                               \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hana\",                                                                       \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hana\",                                                                      \n                        \"word\": \"hana\",                                                                       \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"response\": null,                                                                       \n                      \"sameWasProcessed\": true                                                                \n                    }                                                                                         \n",
        "Semantic            KM 'dialogues' ordinal: 4  notes: \"x is y\"                                                \n          APPLIED   Semantic(({context}) => context.marker == 'is' && !context.query && context.one && context\n                    .two, ({context, s, log}) => {                                                            \n                            const one = context.one;                                                          \n                            const two = context.two;                                                          \n                            one.same = two;                                                                   \n                            one.response = null                                                               \n                            two.response = null                                                               \n                            const onePrime = s(one)                                                           \n                            if (!onePrime.sameWasProcessed) {                                                 \n                              warningSameNotEvaluated(log, context, one)                                      \n                            } else {                                                                          \n                              if (onePrime.response) {                                                        \n                                context.response = onePrime.response                                          \n                              }                                                                               \n                            }                                                                                 \n                            one.same = undefined                                                              \n                            let twoPrime;                                                                     \n                            if (!onePrime.sameWasProcessed) {                                                 \n                              two.same = one                                                                  \n                              twoPrime = s(two)                                                               \n                              if (!twoPrime.sameWasProcessed) {                                               \n                                warningSameNotEvaluated(log, context, two)                                    \n                              } else {                                                                        \n                                if (twoPrime.response) {                                                      \n                                  context.response = twoPrime.response                                        \n                                }                                                                             \n                              }                                                                               \n                              two.same = undefined                                                            \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"default\": true,                                                                        \n                      \"marker\": \"is\",                                                                         \n                      \"one\": {                                                                                \n                        \"marker\": \"property\",                                                                 \n                        \"object\": {                                                                           \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"kia\",                                                                      \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"kia\",                                                                     \n                          \"word\": \"kia\"                                                                       \n                        },                                                                                    \n                        \"objects\": [                                                                          \n                          {                                                                                   \n                            \"marker\": \"property\",                                                             \n                            \"text\": \"sister\",                                                                 \n                            \"types\": [                                                                        \n                              \"property\"                                                                      \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"sister\",                                                                \n                            \"word\": \"sister\"                                                                  \n                          },                                                                                  \n                          {                                                                                   \n                            \"marker\": \"unknown\",                                                              \n                            \"text\": \"kia\",                                                                    \n                            \"types\": [                                                                        \n                              \"object\",                                                                       \n                              \"unknown\"                                                                       \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"kia\",                                                                   \n                            \"word\": \"kia\"                                                                     \n                          }                                                                                   \n                        ],                                                                                    \n                        \"text\": \"kia 's sister\",                                                              \n                        \"types\": [                                                                            \n                          \"property\"                                                                          \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"sister\",                                                                    \n                        \"word\": \"sister\",                                                                     \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"text\": \"kia 's sister is hana\",                                                        \n                      \"two\": {                                                                                \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hana\",                                                                       \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hana\",                                                                      \n                        \"word\": \"hana\",                                                                       \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"word\": \"is\",                                                                           \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n          STACK     Context#2: call2                                                                          \n          RESULT    {                                                                                         \n                      \"default\": true,                                                                        \n                      \"marker\": \"is\",                                                                         \n                      \"one\": {                                                                                \n                        \"marker\": \"property\",                                                                 \n                        \"object\": {                                                                           \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"kia\",                                                                      \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"kia\",                                                                     \n                          \"word\": \"kia\"                                                                       \n                        },                                                                                    \n                        \"objects\": [                                                                          \n                          {                                                                                   \n                            \"marker\": \"property\",                                                             \n                            \"text\": \"sister\",                                                                 \n                            \"types\": [                                                                        \n                              \"property\"                                                                      \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"sister\",                                                                \n                            \"word\": \"sister\"                                                                  \n                          },                                                                                  \n                          {                                                                                   \n                            \"marker\": \"unknown\",                                                              \n                            \"text\": \"kia\",                                                                    \n                            \"types\": [                                                                        \n                              \"object\",                                                                       \n                              \"unknown\"                                                                       \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"kia\",                                                                   \n                            \"word\": \"kia\"                                                                     \n                          }                                                                                   \n                        ],                                                                                    \n                        \"text\": \"kia 's sister\",                                                              \n                        \"types\": [                                                                            \n                          \"property\"                                                                          \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"sister\",                                                                    \n                        \"word\": \"sister\",                                                                     \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"text\": \"kia 's sister is hana\",                                                        \n                      \"two\": {                                                                                \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hana\",                                                                       \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hana\",                                                                      \n                        \"word\": \"hana\",                                                                       \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"word\": \"is\",                                                                           \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n",
        "Generator           KM 'dialogues' ordinal: 14                                                                \n          APPLIED   Generator(({context}) => context.marker == 'unknown', ({context}) => {                    \n                            if (typeof context.marker === 'string') {                                         \n                              return context.value                                                            \n                            } else {                                                                          \n                              JSON.stringify(context.value)                                                   \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"kia\",                                                                          \n                      \"types\": [                                                                              \n                        \"object\",                                                                             \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"kia\",                                                                         \n                      \"word\": \"kia\",                                                                          \n                      \"paraphrase\": true,                                                                     \n                      \"possessive\": false,                                                                    \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call5,call6,call7                                                        \n          RESULT    kia                                                                                       \n",
        "Generator           KM 'properties' ordinal: 0  notes: \"add possession ending\"                                \n          APPLIED   Generator(({context}) => context.paraphrase && context.possessive, ({context, g}) => {    \n                            context.possessive = false                                                        \n                            const phrase = g(context)                                                         \n                            context.possessive = true                                                         \n                            if (phrase.endsWith('s')) {                                                       \n                              return `${phrase}'`                                                             \n                            } else {                                                                          \n                              return `${phrase}'s`                                                            \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"kia\",                                                                          \n                      \"types\": [                                                                              \n                        \"object\",                                                                             \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"kia\",                                                                         \n                      \"word\": \"kia\",                                                                          \n                      \"paraphrase\": true,                                                                     \n                      \"possessive\": true,                                                                     \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call5,call6                                                              \n          RESULT    kia's                                                                                     \n",
        "Generator           KM 'dialogues' ordinal: 25                                                                \n          APPLIED   Generator(({context}) => context.paraphrase && context.word, ({context}) => `${context.wor\n                    d}`)                                                                                      \n          TO        {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"text\": \"sister\",                                                                       \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"sister\",                                                                      \n                      \"word\": \"sister\",                                                                       \n                      \"paraphrase\": true,                                                                     \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call5,call8                                                              \n          RESULT    sister                                                                                    \n",
        "Generator           KM 'properties' ordinal: 11  notes: \"object's property\"                                   \n          APPLIED   Generator(({context}) => !context.modifiers && context.object, ({context, g, gs}) => {    \n                                   if (context.objects) {                                                     \n                                     const objects = [ ...context.objects ]                                   \n                                     objects.reverse()                                                        \n                                     let phrase = ''                                                          \n                                     let separator = ''                                                       \n                                     for (let i = 0; i < objects.length-1; ++i) {                             \n                                       phrase = phrase + separator + g({...objects[i], paraphrase: context.par\n                    aphrase, possessive: true})                                                               \n                                       separator = ' '                                                        \n                                     }                                                                        \n                                     phrase = phrase + separator + g({...objects[objects.length-1], paraphrase\n                    : context.paraphrase})                                                                    \n                                     return phrase                                                            \n                                   } else {                                                                   \n                                     const base = { ...context }                                              \n                                     base.object = undefined; // TODO make paraphrase be a default when paraph\n                    rasing?                                                                                   \n                                     if (context.object.marker == 'objectPrefix') {                           \n                                       return `${g(context.object)} ${g(base)}`                               \n                                     } else {                                                                 \n                                       return `${g({...context.object, paraphrase: context.paraphrase})}'s ${g\n                    (base)}`                                                                                  \n                                     }                                                                        \n                                   }                                                                          \n                                 })                                                                           \n          TO        {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"object\": {                                                                             \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"kia\",                                                                        \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"kia\",                                                                       \n                        \"word\": \"kia\"                                                                         \n                      },                                                                                      \n                      \"objects\": [                                                                            \n                        {                                                                                     \n                          \"marker\": \"property\",                                                               \n                          \"text\": \"sister\",                                                                   \n                          \"types\": [                                                                          \n                            \"property\"                                                                        \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"sister\",                                                                  \n                          \"word\": \"sister\"                                                                    \n                        },                                                                                    \n                        {                                                                                     \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"kia\",                                                                      \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"kia\",                                                                     \n                          \"word\": \"kia\"                                                                       \n                        }                                                                                     \n                      ],                                                                                      \n                      \"text\": \"kia 's sister\",                                                                \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"sister\",                                                                      \n                      \"word\": \"sister\",                                                                       \n                      \"response\": null,                                                                       \n                      \"paraphrase\": true,                                                                     \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call5                                                                    \n          RESULT    kia's sister                                                                              \n",
        "Generator           KM 'dialogues' ordinal: 7  notes: \"paraphrase a queryable\"                                \n          APPLIED   Generator(({context, hierarchy}) => hierarchy.isA(context.marker, 'queryable') && !context\n                    .isQuery && !context.paraphrase && context.value, ({context, g}) => {                     \n                            const oldValue = context.value.paraphrase                                         \n                            context.value.paraphrase = true                                                   \n                            const result = g(context.value)                                                   \n                            context.value.paraphrase = oldValue                                               \n                            return result                                                                     \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"hana\",                                                                         \n                      \"types\": [                                                                              \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"hana\",                                                                        \n                      \"word\": \"hana\",                                                                         \n                      \"response\": null,                                                                       \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call9                                                                    \n          RESULT    hana                                                                                      \n",
        "Generator           KM 'dialogues' ordinal: 24  notes: \"x is y (not a response)\"                              \n          APPLIED   Generator(({context, hierarchy}) => hierarchy.isA(context.marker, 'is') && !context.respon\n                    se, ({context, g}) => {                                                                   \n                            // return `${g({ ...context.one, paraphrase: true })} ${isMany(context.one) || isM\n                    any(context.two) || isMany(context) ? \"are\" : \"is\"} ${g(context.two)}`                    \n                            // response or not response -> paraphrase                                         \n                            // the age of greg is the age -> age is 23    -> first only missing paraphrase mar\n                    ker because it is coming from the context                                                 \n                            // your name is greg --response--> your name is greg // should be my name         \n                            // return `${g({...context.one, paraphrase: context.paraphrase})} ${isMany(context\n                    .one) || isMany(context.two) || isMany(context) ? \"are\" : \"is\"} ${g(context.two)}`        \n                            return `${g({...context.one, paraphrase: true})} ${isMany(context.one) || isMany(c\n                    ontext.two) || isMany(context) ? \"are\" : \"is\"} ${g(context.two)}`                         \n                            // return `${g({...context.one})} ${isMany(context.one) || isMany(context.two) || \n                    isMany(context) ? \"are\" : \"is\"} ${g(context.two)}`                                        \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"default\": true,                                                                        \n                      \"marker\": \"is\",                                                                         \n                      \"one\": {                                                                                \n                        \"marker\": \"property\",                                                                 \n                        \"object\": {                                                                           \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"kia\",                                                                      \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"kia\",                                                                     \n                          \"word\": \"kia\"                                                                       \n                        },                                                                                    \n                        \"objects\": [                                                                          \n                          {                                                                                   \n                            \"marker\": \"property\",                                                             \n                            \"text\": \"sister\",                                                                 \n                            \"types\": [                                                                        \n                              \"property\"                                                                      \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"sister\",                                                                \n                            \"word\": \"sister\"                                                                  \n                          },                                                                                  \n                          {                                                                                   \n                            \"marker\": \"unknown\",                                                              \n                            \"text\": \"kia\",                                                                    \n                            \"types\": [                                                                        \n                              \"object\",                                                                       \n                              \"unknown\"                                                                       \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"kia\",                                                                   \n                            \"word\": \"kia\"                                                                     \n                          }                                                                                   \n                        ],                                                                                    \n                        \"text\": \"kia 's sister\",                                                              \n                        \"types\": [                                                                            \n                          \"property\"                                                                          \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"sister\",                                                                    \n                        \"word\": \"sister\",                                                                     \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"text\": \"kia 's sister is hana\",                                                        \n                      \"two\": {                                                                                \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hana\",                                                                       \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hana\",                                                                      \n                        \"word\": \"hana\",                                                                       \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"word\": \"is\",                                                                           \n                      \"topLevel\": true,                                                                       \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4                                                                          \n          RESULT    kia's sister is hana                                                                      \n",
        "Generator           KM 'dialogues' ordinal: 14                                                                \n          APPLIED   Generator(({context}) => context.marker == 'unknown', ({context}) => {                    \n                            if (typeof context.marker === 'string') {                                         \n                              return context.value                                                            \n                            } else {                                                                          \n                              JSON.stringify(context.value)                                                   \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"kia\",                                                                          \n                      \"types\": [                                                                              \n                        \"object\",                                                                             \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"kia\",                                                                         \n                      \"word\": \"kia\",                                                                          \n                      \"paraphrase\": true,                                                                     \n                      \"possessive\": false                                                                     \n                    }                                                                                         \n          STACK     Context#2: call10,call11,call12,call13                                                    \n          RESULT    kia                                                                                       \n",
        "Generator           KM 'properties' ordinal: 0  notes: \"add possession ending\"                                \n          APPLIED   Generator(({context}) => context.paraphrase && context.possessive, ({context, g}) => {    \n                            context.possessive = false                                                        \n                            const phrase = g(context)                                                         \n                            context.possessive = true                                                         \n                            if (phrase.endsWith('s')) {                                                       \n                              return `${phrase}'`                                                             \n                            } else {                                                                          \n                              return `${phrase}'s`                                                            \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"kia\",                                                                          \n                      \"types\": [                                                                              \n                        \"object\",                                                                             \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"kia\",                                                                         \n                      \"word\": \"kia\",                                                                          \n                      \"paraphrase\": true,                                                                     \n                      \"possessive\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call10,call11,call12                                                           \n          RESULT    kia's                                                                                     \n",
        "Generator           KM 'dialogues' ordinal: 25                                                                \n          APPLIED   Generator(({context}) => context.paraphrase && context.word, ({context}) => `${context.wor\n                    d}`)                                                                                      \n          TO        {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"text\": \"sister\",                                                                       \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"sister\",                                                                      \n                      \"word\": \"sister\",                                                                       \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call10,call11,call14                                                           \n          RESULT    sister                                                                                    \n",
        "Generator           KM 'properties' ordinal: 11  notes: \"object's property\"                                   \n          APPLIED   Generator(({context}) => !context.modifiers && context.object, ({context, g, gs}) => {    \n                                   if (context.objects) {                                                     \n                                     const objects = [ ...context.objects ]                                   \n                                     objects.reverse()                                                        \n                                     let phrase = ''                                                          \n                                     let separator = ''                                                       \n                                     for (let i = 0; i < objects.length-1; ++i) {                             \n                                       phrase = phrase + separator + g({...objects[i], paraphrase: context.par\n                    aphrase, possessive: true})                                                               \n                                       separator = ' '                                                        \n                                     }                                                                        \n                                     phrase = phrase + separator + g({...objects[objects.length-1], paraphrase\n                    : context.paraphrase})                                                                    \n                                     return phrase                                                            \n                                   } else {                                                                   \n                                     const base = { ...context }                                              \n                                     base.object = undefined; // TODO make paraphrase be a default when paraph\n                    rasing?                                                                                   \n                                     if (context.object.marker == 'objectPrefix') {                           \n                                       return `${g(context.object)} ${g(base)}`                               \n                                     } else {                                                                 \n                                       return `${g({...context.object, paraphrase: context.paraphrase})}'s ${g\n                    (base)}`                                                                                  \n                                     }                                                                        \n                                   }                                                                          \n                                 })                                                                           \n          TO        {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"object\": {                                                                             \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"kia\",                                                                        \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"kia\",                                                                       \n                        \"word\": \"kia\"                                                                         \n                      },                                                                                      \n                      \"objects\": [                                                                            \n                        {                                                                                     \n                          \"marker\": \"property\",                                                               \n                          \"text\": \"sister\",                                                                   \n                          \"types\": [                                                                          \n                            \"property\"                                                                        \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"sister\",                                                                  \n                          \"word\": \"sister\"                                                                    \n                        },                                                                                    \n                        {                                                                                     \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"kia\",                                                                      \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"kia\",                                                                     \n                          \"word\": \"kia\"                                                                       \n                        }                                                                                     \n                      ],                                                                                      \n                      \"text\": \"kia 's sister\",                                                                \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"sister\",                                                                      \n                      \"word\": \"sister\",                                                                       \n                      \"response\": true,                                                                       \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call10,call11                                                                  \n          RESULT    kia's sister                                                                              \n",
        "Generator           KM 'dialogues' ordinal: 14                                                                \n          APPLIED   Generator(({context}) => context.marker == 'unknown', ({context}) => {                    \n                            if (typeof context.marker === 'string') {                                         \n                              return context.value                                                            \n                            } else {                                                                          \n                              JSON.stringify(context.value)                                                   \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"hana\",                                                                         \n                      \"types\": [                                                                              \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"hana\",                                                                        \n                      \"word\": \"hana\",                                                                         \n                      \"response\": true,                                                                       \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call10,call15                                                                  \n          RESULT    hana                                                                                      \n",
        "Generator           KM 'dialogues' ordinal: 22  notes: \"x is y\"                                               \n          APPLIED   Generator(({context, hierarchy}) => { return hierarchy.isA(context.marker, 'is') && contex\n                    t.paraphrase }, ({context, g}) => {                                                       \n                            context.one.response = true                                                       \n                            context.two.response = true                                                       \n                            return `${g({ ...context.one, paraphrase: true })} ${context.word} ${g(context.two\n                    )}`                                                                                       \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"default\": true,                                                                        \n                      \"marker\": \"is\",                                                                         \n                      \"one\": {                                                                                \n                        \"marker\": \"property\",                                                                 \n                        \"object\": {                                                                           \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"kia\",                                                                      \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"kia\",                                                                     \n                          \"word\": \"kia\"                                                                       \n                        },                                                                                    \n                        \"objects\": [                                                                          \n                          {                                                                                   \n                            \"marker\": \"property\",                                                             \n                            \"text\": \"sister\",                                                                 \n                            \"types\": [                                                                        \n                              \"property\"                                                                      \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"sister\",                                                                \n                            \"word\": \"sister\"                                                                  \n                          },                                                                                  \n                          {                                                                                   \n                            \"marker\": \"unknown\",                                                              \n                            \"text\": \"kia\",                                                                    \n                            \"types\": [                                                                        \n                              \"object\",                                                                       \n                              \"unknown\"                                                                       \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"kia\",                                                                   \n                            \"word\": \"kia\"                                                                     \n                          }                                                                                   \n                        ],                                                                                    \n                        \"text\": \"kia 's sister\",                                                              \n                        \"types\": [                                                                            \n                          \"property\"                                                                          \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"sister\",                                                                    \n                        \"word\": \"sister\",                                                                     \n                        \"response\": true                                                                      \n                      },                                                                                      \n                      \"text\": \"kia 's sister is hana\",                                                        \n                      \"two\": {                                                                                \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hana\",                                                                       \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hana\",                                                                      \n                        \"word\": \"hana\",                                                                       \n                        \"response\": true                                                                      \n                      },                                                                                      \n                      \"word\": \"is\",                                                                           \n                      \"topLevel\": true,                                                                       \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call10                                                                         \n          RESULT    kia's sister is hana                                                                      \n",
        "Semantic            No semantic applied                                                                       \n          TO        {                                                                                         \n                      \"marker\": \"controlEnd\",                                                                 \n                      \"controlRemove\": true,                                                                  \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n"
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "possession",
                0
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "possession",
                0
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "possession",
                0
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "possession",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "possession",
                0
              ]
            ]
          },
          {
            "op": [
              "possession",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "possession",
                1
              ]
            ]
          },
          {
            "op": [
              "property",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "property",
                0
              ]
            ]
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ]
            ]
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ]
          }
        ]
      },
      "times": 1.1924748420715332,
      "trace": "undefined",
      "contexts": [
        {
          "default": true,
          "marker": "is",
          "one": {
            "marker": "property",
            "object": {
              "marker": "unknown",
              "text": "kia",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "kia",
              "word": "kia"
            },
            "objects": [
              {
                "marker": "property",
                "text": "sister",
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": "sister",
                "word": "sister"
              },
              {
                "marker": "unknown",
                "text": "kia",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "kia",
                "word": "kia"
              }
            ],
            "text": "kia 's sister",
            "types": [
              "property"
            ],
            "unknown": true,
            "value": "sister",
            "word": "sister",
            "response": true
          },
          "text": "kia 's sister is hana",
          "two": {
            "marker": "unknown",
            "text": "hana",
            "types": [
              "unknown"
            ],
            "unknown": true,
            "value": "hana",
            "word": "hana",
            "response": true
          },
          "word": "is",
          "topLevel": true
        }
      ],
      "generated": [
        "kia's sister is hana"
      ],
      "paraphrases": [
        "kia's sister is hana"
      ],
      "responses": [
        ""
      ],
      "memory_free_percent": 67.6,
      "version": "6.13.45-beta.10",
      "query": "kia's sister is hana"
    },
    {
      "hierarchy": [
        [
          "hate",
          "canBeQuestion"
        ],
        [
          "sushi",
          "hierarchyAble"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "food",
          "queryable"
        ],
        [
          "pidgeon",
          "queryable"
        ],
        [
          "human",
          "theAble"
        ],
        [
          "love",
          "canBeQuestion"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "owl",
          "theAble"
        ],
        [
          "dislike",
          "canBeDoQuestion"
        ],
        [
          "self",
          "queryable"
        ],
        [
          "dislike",
          "ifAble"
        ],
        [
          "parrot",
          "object"
        ],
        [
          "bird",
          "theAble"
        ],
        [
          "like",
          "orAble"
        ],
        [
          "dog",
          "object"
        ],
        [
          "canBeDoQuestion",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "mammal",
          "hierarchyAble"
        ],
        [
          "chicken_strip",
          "hierarchyAble"
        ],
        [
          "does_after_canBeDoQuestion_doesAble",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "cat",
          "queryable"
        ],
        [
          "mammal",
          "queryable"
        ],
        [
          "love",
          "canBeDoQuestion"
        ],
        [
          "dog",
          "queryable"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "hate",
          "canBeDoQuestion"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "human",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "feline",
          "queryable"
        ],
        [
          "strip",
          "theAble"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "bat",
          "queryable"
        ],
        [
          "like",
          "canBeQuestion"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "wolf",
          "object"
        ],
        [
          "dislike",
          "canBeQuestion"
        ],
        [
          "like",
          "ifAble"
        ],
        [
          "animal",
          "theAble"
        ],
        [
          "bird",
          "hierarchyAble"
        ],
        [
          "pidgeon",
          "hierarchyAble"
        ],
        [
          "strip",
          "concept"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "animal",
          "object"
        ],
        [
          "canine",
          "hierarchyAble"
        ],
        [
          "strip",
          "hierarchyAble"
        ],
        [
          "mammal",
          "object"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "have",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "questionMark_before_canBeQuestion_have",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "owl",
          "queryable"
        ],
        [
          "bat",
          "theAble"
        ],
        [
          "wolf",
          "hierarchyAble"
        ],
        [
          "food",
          "object"
        ],
        [
          "chicken_strip",
          "strip"
        ],
        [
          "strip",
          "queryable"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "feline",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "sushi",
          "object"
        ],
        [
          "parrot",
          "hierarchyAble"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "human",
          "object"
        ],
        [
          "hate",
          "orAble"
        ],
        [
          "animal",
          "queryable"
        ],
        [
          "canine",
          "theAble"
        ],
        [
          "animal",
          "hierarchyAble"
        ],
        [
          "pidgeon",
          "theAble"
        ],
        [
          "want",
          "ifAble"
        ],
        [
          "concept",
          "concept"
        ],
        [
          "wolf",
          "theAble"
        ],
        [
          "feline",
          "hierarchyAble"
        ],
        [
          "parrot",
          "theAble"
        ],
        [
          "bird",
          "object"
        ],
        [
          "want",
          "canBeQuestion"
        ],
        [
          "doesAble",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "eagle",
          "queryable"
        ],
        [
          "dislike",
          "orAble"
        ],
        [
          "whose",
          "object"
        ],
        [
          "dog",
          "theAble"
        ],
        [
          "parrot",
          "queryable"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "eagle",
          "object"
        ],
        [
          "mammal",
          "theAble"
        ],
        [
          "canBeQuestion",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "cat",
          "theAble"
        ],
        [
          "eagle",
          "hierarchyAble"
        ],
        [
          "cat",
          "object"
        ],
        [
          "feline",
          "object"
        ],
        [
          "food",
          "theAble"
        ],
        [
          "bird",
          "queryable"
        ],
        [
          "sushi",
          "theAble"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "owl",
          "object"
        ],
        [
          "canine",
          "object"
        ],
        [
          "love",
          "ifAble"
        ],
        [
          "bat",
          "hierarchyAble"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "pidgeon",
          "object"
        ],
        [
          "human",
          "hierarchyAble"
        ],
        [
          "food",
          "hierarchyAble"
        ],
        [
          "dog",
          "hierarchyAble"
        ],
        [
          "want",
          "canBeDoQuestion"
        ],
        [
          "want",
          "orAble"
        ],
        [
          "sushi",
          "queryable"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "wolf",
          "queryable"
        ],
        [
          "owl",
          "hierarchyAble"
        ],
        [
          "cat",
          "hierarchyAble"
        ],
        [
          "like",
          "canBeDoQuestion"
        ],
        [
          "love",
          "orAble"
        ],
        [
          "hate",
          "ifAble"
        ],
        [
          "eagle",
          "theAble"
        ],
        [
          "bat",
          "object"
        ],
        [
          "canine",
          "queryable"
        ],
        [
          "property",
          "queryable"
        ]
      ],
      "load_cache_time": 0.004239320755004883,
      "logs": [
        "Undefined word 'kia'",
        "Undefined word 'name'",
        "Op choices were: [(('unknown', 0), [('is', 0), ('possession', 0), ('unknown', 0)]), (('unknown', 0), [('is', 0), ('possession', 0), ('unknown', 0)]), (('unknown', 0), [('is', 0), ('possession', 0), ('unknown', 0)]), (('possession', 0), [('is', 0), ('possession', 0)]), (('possession', 1), [('is', 0), ('possession', 1)]), (('property', 0), [('is', 0), ('property', 0)]), (('is', 0), [('is', 0)]), (('is', 1), [('is', 1)])]",
        "Contexts used for choosing operators (if the wrong choices were made update the priories array. Put the expected choice at the end of the list): \n  Context for choosing the operator unknown/0 was [['is', 0], ['possession', 0], ['unknown', 0]]\n  Context for choosing the operator unknown/0 was [['is', 0], ['possession', 0], ['unknown', 0]]\n  Context for choosing the operator unknown/0 was [['is', 0], ['possession', 0], ['unknown', 0]]\n  Context for choosing the operator possession/0 was [['is', 0], ['possession', 0]]\n  Context for choosing the operator possession/1 was [['is', 0], ['possession', 1]]\n  Context for choosing the operator property/0 was [['is', 0], ['property', 0]]\n  Context for choosing the operator is/0 was [['is', 0]]\n  Context for choosing the operator is/1 was [['is', 1]]",
        "",
        "Semantic            No semantic applied                                                                       \n          TO        {                                                                                         \n                      \"marker\": \"controlStart\",                                                               \n                      \"controlRemove\": true,                                                                  \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n",
        "Semantic            KM 'properties' ordinal: 5  notes: \"set the property of an object\"                        \n          APPLIED   Semantic(({context}) => context.marker == 'property' && context.same && context.object, ({\n                    context, objects, km, api}) => {                                                          \n                            const objectContext = context.object;                                             \n                            const propertyContext = context;                                                  \n                            const objectId = context.object.value                                             \n                            const propertyId = context.value                                                  \n                            try{                                                                              \n                              // greg                                                                         \n                              // api.makeObject({config, context: objectContext, doPluralize: false})         \n                              // api.addWord(propertyContext)                                                 \n                              // api.addWord(objectContext)                                                   \n                              api.setProperty(pluralize.singular(objectId), pluralize.singular(propertyId), co\n                    ntext.same, true)                                                                         \n                              context.sameWasProcessed = true                                                 \n                            } catch (e) {                                                                     \n                              const config = km('properties')                                                 \n                              const fragment = config.fragment(\"the property1 of object1 is value1\")          \n                              const value = api.getProperty(objectId, propertyId)                             \n                              if (value.value == context.same.value) {                                        \n                                context.response = [                                                          \n                                  { marker: 'yesno', value: true, paraphrase: true },                         \n                                ]                                                                             \n                                context.sameWasProcessed = true                                               \n                              } else {                                                                        \n                                const mappings = [                                                            \n                                  {                                                                           \n                                    match: ({context}) => context.value == 'property1',                       \n                                    apply: ({context}) => Object.assign(context, { word: propertyContext.word,\n                     value: propertyContext.value, paraphrase: true }),                                       \n                                  },                                                                          \n                                  {                                                                           \n                                    match: ({context}) => context.value == 'object1',                         \n                                    apply: ({context}) => {                                                   \n                                      Object.assign(context, { word: objectContext.word, value: objectContext.\n                    value, paraphrase: true })                                                                \n                                    },                                                                        \n                                  },                                                                          \n                                  {                                                                           \n                                    match: ({context}) => context.value == 'value1',                          \n                                    apply: ({context}) => Object.assign(context, value),                      \n                                  },                                                                          \n                                ]                                                                             \n                                // run the query 'the property of object' then copy that here and template it \n                                context.response = {                                                          \n                                  verbatim: \"no way hose\"                                                     \n                                }                                                                             \n                                context.response = [                                                          \n                                  { marker: 'yesno', value: false, paraphrase: true },                        \n                                ]                                                                             \n                                context.response = context.response.concat(fragment.instantiate(mappings))    \n                                context.response.forEach( (r) => r.paraphrase = true )                        \n                                context.sameWasProcessed = true                                               \n                              }                                                                               \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"object\": {                                                                             \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"kia\",                                                                        \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"kia\",                                                                       \n                        \"word\": \"kia\"                                                                         \n                      },                                                                                      \n                      \"objects\": [                                                                            \n                        {                                                                                     \n                          \"marker\": \"property\",                                                               \n                          \"text\": \"name\",                                                                     \n                          \"types\": [                                                                          \n                            \"property\"                                                                        \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"name\",                                                                    \n                          \"word\": \"name\"                                                                      \n                        },                                                                                    \n                        {                                                                                     \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"kia\",                                                                      \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"kia\",                                                                     \n                          \"word\": \"kia\"                                                                       \n                        }                                                                                     \n                      ],                                                                                      \n                      \"text\": \"kia 's name\",                                                                  \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"name\",                                                                        \n                      \"word\": \"name\",                                                                         \n                      \"same\": {                                                                               \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"kia\",                                                                        \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"kia\",                                                                       \n                        \"word\": \"kia\",                                                                        \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"response\": null                                                                        \n                    }                                                                                         \n          STACK     Context#2: call2,call3                                                                    \n          RESULT    {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"object\": {                                                                             \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"kia\",                                                                        \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"kia\",                                                                       \n                        \"word\": \"kia\"                                                                         \n                      },                                                                                      \n                      \"objects\": [                                                                            \n                        {                                                                                     \n                          \"marker\": \"property\",                                                               \n                          \"text\": \"name\",                                                                     \n                          \"types\": [                                                                          \n                            \"property\"                                                                        \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"name\",                                                                    \n                          \"word\": \"name\"                                                                      \n                        },                                                                                    \n                        {                                                                                     \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"kia\",                                                                      \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"kia\",                                                                     \n                          \"word\": \"kia\"                                                                       \n                        }                                                                                     \n                      ],                                                                                      \n                      \"text\": \"kia 's name\",                                                                  \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"name\",                                                                        \n                      \"word\": \"name\",                                                                         \n                      \"same\": {                                                                               \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"kia\",                                                                        \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"kia\",                                                                       \n                        \"word\": \"kia\",                                                                        \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"response\": null,                                                                       \n                      \"sameWasProcessed\": true                                                                \n                    }                                                                                         \n",
        "Semantic            KM 'dialogues' ordinal: 4  notes: \"x is y\"                                                \n          APPLIED   Semantic(({context}) => context.marker == 'is' && !context.query && context.one && context\n                    .two, ({context, s, log}) => {                                                            \n                            const one = context.one;                                                          \n                            const two = context.two;                                                          \n                            one.same = two;                                                                   \n                            one.response = null                                                               \n                            two.response = null                                                               \n                            const onePrime = s(one)                                                           \n                            if (!onePrime.sameWasProcessed) {                                                 \n                              warningSameNotEvaluated(log, context, one)                                      \n                            } else {                                                                          \n                              if (onePrime.response) {                                                        \n                                context.response = onePrime.response                                          \n                              }                                                                               \n                            }                                                                                 \n                            one.same = undefined                                                              \n                            let twoPrime;                                                                     \n                            if (!onePrime.sameWasProcessed) {                                                 \n                              two.same = one                                                                  \n                              twoPrime = s(two)                                                               \n                              if (!twoPrime.sameWasProcessed) {                                               \n                                warningSameNotEvaluated(log, context, two)                                    \n                              } else {                                                                        \n                                if (twoPrime.response) {                                                      \n                                  context.response = twoPrime.response                                        \n                                }                                                                             \n                              }                                                                               \n                              two.same = undefined                                                            \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"default\": true,                                                                        \n                      \"marker\": \"is\",                                                                         \n                      \"one\": {                                                                                \n                        \"marker\": \"property\",                                                                 \n                        \"object\": {                                                                           \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"kia\",                                                                      \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"kia\",                                                                     \n                          \"word\": \"kia\"                                                                       \n                        },                                                                                    \n                        \"objects\": [                                                                          \n                          {                                                                                   \n                            \"marker\": \"property\",                                                             \n                            \"text\": \"name\",                                                                   \n                            \"types\": [                                                                        \n                              \"property\"                                                                      \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"name\",                                                                  \n                            \"word\": \"name\"                                                                    \n                          },                                                                                  \n                          {                                                                                   \n                            \"marker\": \"unknown\",                                                              \n                            \"text\": \"kia\",                                                                    \n                            \"types\": [                                                                        \n                              \"object\",                                                                       \n                              \"unknown\"                                                                       \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"kia\",                                                                   \n                            \"word\": \"kia\"                                                                     \n                          }                                                                                   \n                        ],                                                                                    \n                        \"text\": \"kia 's name\",                                                                \n                        \"types\": [                                                                            \n                          \"property\"                                                                          \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"name\",                                                                      \n                        \"word\": \"name\",                                                                       \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"text\": \"kia 's name is kia\",                                                           \n                      \"two\": {                                                                                \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"kia\",                                                                        \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"kia\",                                                                       \n                        \"word\": \"kia\",                                                                        \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"word\": \"is\",                                                                           \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n          STACK     Context#2: call2                                                                          \n          RESULT    {                                                                                         \n                      \"default\": true,                                                                        \n                      \"marker\": \"is\",                                                                         \n                      \"one\": {                                                                                \n                        \"marker\": \"property\",                                                                 \n                        \"object\": {                                                                           \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"kia\",                                                                      \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"kia\",                                                                     \n                          \"word\": \"kia\"                                                                       \n                        },                                                                                    \n                        \"objects\": [                                                                          \n                          {                                                                                   \n                            \"marker\": \"property\",                                                             \n                            \"text\": \"name\",                                                                   \n                            \"types\": [                                                                        \n                              \"property\"                                                                      \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"name\",                                                                  \n                            \"word\": \"name\"                                                                    \n                          },                                                                                  \n                          {                                                                                   \n                            \"marker\": \"unknown\",                                                              \n                            \"text\": \"kia\",                                                                    \n                            \"types\": [                                                                        \n                              \"object\",                                                                       \n                              \"unknown\"                                                                       \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"kia\",                                                                   \n                            \"word\": \"kia\"                                                                     \n                          }                                                                                   \n                        ],                                                                                    \n                        \"text\": \"kia 's name\",                                                                \n                        \"types\": [                                                                            \n                          \"property\"                                                                          \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"name\",                                                                      \n                        \"word\": \"name\",                                                                       \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"text\": \"kia 's name is kia\",                                                           \n                      \"two\": {                                                                                \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"kia\",                                                                        \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"kia\",                                                                       \n                        \"word\": \"kia\",                                                                        \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"word\": \"is\",                                                                           \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n",
        "Generator           KM 'dialogues' ordinal: 14                                                                \n          APPLIED   Generator(({context}) => context.marker == 'unknown', ({context}) => {                    \n                            if (typeof context.marker === 'string') {                                         \n                              return context.value                                                            \n                            } else {                                                                          \n                              JSON.stringify(context.value)                                                   \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"kia\",                                                                          \n                      \"types\": [                                                                              \n                        \"object\",                                                                             \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"kia\",                                                                         \n                      \"word\": \"kia\",                                                                          \n                      \"paraphrase\": true,                                                                     \n                      \"possessive\": false,                                                                    \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call5,call6,call7                                                        \n          RESULT    kia                                                                                       \n",
        "Generator           KM 'properties' ordinal: 0  notes: \"add possession ending\"                                \n          APPLIED   Generator(({context}) => context.paraphrase && context.possessive, ({context, g}) => {    \n                            context.possessive = false                                                        \n                            const phrase = g(context)                                                         \n                            context.possessive = true                                                         \n                            if (phrase.endsWith('s')) {                                                       \n                              return `${phrase}'`                                                             \n                            } else {                                                                          \n                              return `${phrase}'s`                                                            \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"kia\",                                                                          \n                      \"types\": [                                                                              \n                        \"object\",                                                                             \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"kia\",                                                                         \n                      \"word\": \"kia\",                                                                          \n                      \"paraphrase\": true,                                                                     \n                      \"possessive\": true,                                                                     \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call5,call6                                                              \n          RESULT    kia's                                                                                     \n",
        "Generator           KM 'dialogues' ordinal: 25                                                                \n          APPLIED   Generator(({context}) => context.paraphrase && context.word, ({context}) => `${context.wor\n                    d}`)                                                                                      \n          TO        {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"text\": \"name\",                                                                         \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"name\",                                                                        \n                      \"word\": \"name\",                                                                         \n                      \"paraphrase\": true,                                                                     \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call5,call8                                                              \n          RESULT    name                                                                                      \n",
        "Generator           KM 'properties' ordinal: 11  notes: \"object's property\"                                   \n          APPLIED   Generator(({context}) => !context.modifiers && context.object, ({context, g, gs}) => {    \n                                   if (context.objects) {                                                     \n                                     const objects = [ ...context.objects ]                                   \n                                     objects.reverse()                                                        \n                                     let phrase = ''                                                          \n                                     let separator = ''                                                       \n                                     for (let i = 0; i < objects.length-1; ++i) {                             \n                                       phrase = phrase + separator + g({...objects[i], paraphrase: context.par\n                    aphrase, possessive: true})                                                               \n                                       separator = ' '                                                        \n                                     }                                                                        \n                                     phrase = phrase + separator + g({...objects[objects.length-1], paraphrase\n                    : context.paraphrase})                                                                    \n                                     return phrase                                                            \n                                   } else {                                                                   \n                                     const base = { ...context }                                              \n                                     base.object = undefined; // TODO make paraphrase be a default when paraph\n                    rasing?                                                                                   \n                                     if (context.object.marker == 'objectPrefix') {                           \n                                       return `${g(context.object)} ${g(base)}`                               \n                                     } else {                                                                 \n                                       return `${g({...context.object, paraphrase: context.paraphrase})}'s ${g\n                    (base)}`                                                                                  \n                                     }                                                                        \n                                   }                                                                          \n                                 })                                                                           \n          TO        {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"object\": {                                                                             \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"kia\",                                                                        \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"kia\",                                                                       \n                        \"word\": \"kia\"                                                                         \n                      },                                                                                      \n                      \"objects\": [                                                                            \n                        {                                                                                     \n                          \"marker\": \"property\",                                                               \n                          \"text\": \"name\",                                                                     \n                          \"types\": [                                                                          \n                            \"property\"                                                                        \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"name\",                                                                    \n                          \"word\": \"name\"                                                                      \n                        },                                                                                    \n                        {                                                                                     \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"kia\",                                                                      \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"kia\",                                                                     \n                          \"word\": \"kia\"                                                                       \n                        }                                                                                     \n                      ],                                                                                      \n                      \"text\": \"kia 's name\",                                                                  \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"name\",                                                                        \n                      \"word\": \"name\",                                                                         \n                      \"response\": null,                                                                       \n                      \"paraphrase\": true,                                                                     \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call5                                                                    \n          RESULT    kia's name                                                                                \n",
        "Generator           KM 'dialogues' ordinal: 7  notes: \"paraphrase a queryable\"                                \n          APPLIED   Generator(({context, hierarchy}) => hierarchy.isA(context.marker, 'queryable') && !context\n                    .isQuery && !context.paraphrase && context.value, ({context, g}) => {                     \n                            const oldValue = context.value.paraphrase                                         \n                            context.value.paraphrase = true                                                   \n                            const result = g(context.value)                                                   \n                            context.value.paraphrase = oldValue                                               \n                            return result                                                                     \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"kia\",                                                                          \n                      \"types\": [                                                                              \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"kia\",                                                                         \n                      \"word\": \"kia\",                                                                          \n                      \"response\": null,                                                                       \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call9                                                                    \n          RESULT    kia                                                                                       \n",
        "Generator           KM 'dialogues' ordinal: 24  notes: \"x is y (not a response)\"                              \n          APPLIED   Generator(({context, hierarchy}) => hierarchy.isA(context.marker, 'is') && !context.respon\n                    se, ({context, g}) => {                                                                   \n                            // return `${g({ ...context.one, paraphrase: true })} ${isMany(context.one) || isM\n                    any(context.two) || isMany(context) ? \"are\" : \"is\"} ${g(context.two)}`                    \n                            // response or not response -> paraphrase                                         \n                            // the age of greg is the age -> age is 23    -> first only missing paraphrase mar\n                    ker because it is coming from the context                                                 \n                            // your name is greg --response--> your name is greg // should be my name         \n                            // return `${g({...context.one, paraphrase: context.paraphrase})} ${isMany(context\n                    .one) || isMany(context.two) || isMany(context) ? \"are\" : \"is\"} ${g(context.two)}`        \n                            return `${g({...context.one, paraphrase: true})} ${isMany(context.one) || isMany(c\n                    ontext.two) || isMany(context) ? \"are\" : \"is\"} ${g(context.two)}`                         \n                            // return `${g({...context.one})} ${isMany(context.one) || isMany(context.two) || \n                    isMany(context) ? \"are\" : \"is\"} ${g(context.two)}`                                        \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"default\": true,                                                                        \n                      \"marker\": \"is\",                                                                         \n                      \"one\": {                                                                                \n                        \"marker\": \"property\",                                                                 \n                        \"object\": {                                                                           \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"kia\",                                                                      \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"kia\",                                                                     \n                          \"word\": \"kia\"                                                                       \n                        },                                                                                    \n                        \"objects\": [                                                                          \n                          {                                                                                   \n                            \"marker\": \"property\",                                                             \n                            \"text\": \"name\",                                                                   \n                            \"types\": [                                                                        \n                              \"property\"                                                                      \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"name\",                                                                  \n                            \"word\": \"name\"                                                                    \n                          },                                                                                  \n                          {                                                                                   \n                            \"marker\": \"unknown\",                                                              \n                            \"text\": \"kia\",                                                                    \n                            \"types\": [                                                                        \n                              \"object\",                                                                       \n                              \"unknown\"                                                                       \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"kia\",                                                                   \n                            \"word\": \"kia\"                                                                     \n                          }                                                                                   \n                        ],                                                                                    \n                        \"text\": \"kia 's name\",                                                                \n                        \"types\": [                                                                            \n                          \"property\"                                                                          \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"name\",                                                                      \n                        \"word\": \"name\",                                                                       \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"text\": \"kia 's name is kia\",                                                           \n                      \"two\": {                                                                                \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"kia\",                                                                        \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"kia\",                                                                       \n                        \"word\": \"kia\",                                                                        \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"word\": \"is\",                                                                           \n                      \"topLevel\": true,                                                                       \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4                                                                          \n          RESULT    kia's name is kia                                                                         \n",
        "Generator           KM 'dialogues' ordinal: 14                                                                \n          APPLIED   Generator(({context}) => context.marker == 'unknown', ({context}) => {                    \n                            if (typeof context.marker === 'string') {                                         \n                              return context.value                                                            \n                            } else {                                                                          \n                              JSON.stringify(context.value)                                                   \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"kia\",                                                                          \n                      \"types\": [                                                                              \n                        \"object\",                                                                             \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"kia\",                                                                         \n                      \"word\": \"kia\",                                                                          \n                      \"paraphrase\": true,                                                                     \n                      \"possessive\": false                                                                     \n                    }                                                                                         \n          STACK     Context#2: call10,call11,call12,call13                                                    \n          RESULT    kia                                                                                       \n",
        "Generator           KM 'properties' ordinal: 0  notes: \"add possession ending\"                                \n          APPLIED   Generator(({context}) => context.paraphrase && context.possessive, ({context, g}) => {    \n                            context.possessive = false                                                        \n                            const phrase = g(context)                                                         \n                            context.possessive = true                                                         \n                            if (phrase.endsWith('s')) {                                                       \n                              return `${phrase}'`                                                             \n                            } else {                                                                          \n                              return `${phrase}'s`                                                            \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"kia\",                                                                          \n                      \"types\": [                                                                              \n                        \"object\",                                                                             \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"kia\",                                                                         \n                      \"word\": \"kia\",                                                                          \n                      \"paraphrase\": true,                                                                     \n                      \"possessive\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call10,call11,call12                                                           \n          RESULT    kia's                                                                                     \n",
        "Generator           KM 'dialogues' ordinal: 25                                                                \n          APPLIED   Generator(({context}) => context.paraphrase && context.word, ({context}) => `${context.wor\n                    d}`)                                                                                      \n          TO        {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"text\": \"name\",                                                                         \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"name\",                                                                        \n                      \"word\": \"name\",                                                                         \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call10,call11,call14                                                           \n          RESULT    name                                                                                      \n",
        "Generator           KM 'properties' ordinal: 11  notes: \"object's property\"                                   \n          APPLIED   Generator(({context}) => !context.modifiers && context.object, ({context, g, gs}) => {    \n                                   if (context.objects) {                                                     \n                                     const objects = [ ...context.objects ]                                   \n                                     objects.reverse()                                                        \n                                     let phrase = ''                                                          \n                                     let separator = ''                                                       \n                                     for (let i = 0; i < objects.length-1; ++i) {                             \n                                       phrase = phrase + separator + g({...objects[i], paraphrase: context.par\n                    aphrase, possessive: true})                                                               \n                                       separator = ' '                                                        \n                                     }                                                                        \n                                     phrase = phrase + separator + g({...objects[objects.length-1], paraphrase\n                    : context.paraphrase})                                                                    \n                                     return phrase                                                            \n                                   } else {                                                                   \n                                     const base = { ...context }                                              \n                                     base.object = undefined; // TODO make paraphrase be a default when paraph\n                    rasing?                                                                                   \n                                     if (context.object.marker == 'objectPrefix') {                           \n                                       return `${g(context.object)} ${g(base)}`                               \n                                     } else {                                                                 \n                                       return `${g({...context.object, paraphrase: context.paraphrase})}'s ${g\n                    (base)}`                                                                                  \n                                     }                                                                        \n                                   }                                                                          \n                                 })                                                                           \n          TO        {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"object\": {                                                                             \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"kia\",                                                                        \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"kia\",                                                                       \n                        \"word\": \"kia\"                                                                         \n                      },                                                                                      \n                      \"objects\": [                                                                            \n                        {                                                                                     \n                          \"marker\": \"property\",                                                               \n                          \"text\": \"name\",                                                                     \n                          \"types\": [                                                                          \n                            \"property\"                                                                        \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"name\",                                                                    \n                          \"word\": \"name\"                                                                      \n                        },                                                                                    \n                        {                                                                                     \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"kia\",                                                                      \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"kia\",                                                                     \n                          \"word\": \"kia\"                                                                       \n                        }                                                                                     \n                      ],                                                                                      \n                      \"text\": \"kia 's name\",                                                                  \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"name\",                                                                        \n                      \"word\": \"name\",                                                                         \n                      \"response\": true,                                                                       \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call10,call11                                                                  \n          RESULT    kia's name                                                                                \n",
        "Generator           KM 'dialogues' ordinal: 14                                                                \n          APPLIED   Generator(({context}) => context.marker == 'unknown', ({context}) => {                    \n                            if (typeof context.marker === 'string') {                                         \n                              return context.value                                                            \n                            } else {                                                                          \n                              JSON.stringify(context.value)                                                   \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"kia\",                                                                          \n                      \"types\": [                                                                              \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"kia\",                                                                         \n                      \"word\": \"kia\",                                                                          \n                      \"response\": true,                                                                       \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call10,call15                                                                  \n          RESULT    kia                                                                                       \n",
        "Generator           KM 'dialogues' ordinal: 22  notes: \"x is y\"                                               \n          APPLIED   Generator(({context, hierarchy}) => { return hierarchy.isA(context.marker, 'is') && contex\n                    t.paraphrase }, ({context, g}) => {                                                       \n                            context.one.response = true                                                       \n                            context.two.response = true                                                       \n                            return `${g({ ...context.one, paraphrase: true })} ${context.word} ${g(context.two\n                    )}`                                                                                       \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"default\": true,                                                                        \n                      \"marker\": \"is\",                                                                         \n                      \"one\": {                                                                                \n                        \"marker\": \"property\",                                                                 \n                        \"object\": {                                                                           \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"kia\",                                                                      \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"kia\",                                                                     \n                          \"word\": \"kia\"                                                                       \n                        },                                                                                    \n                        \"objects\": [                                                                          \n                          {                                                                                   \n                            \"marker\": \"property\",                                                             \n                            \"text\": \"name\",                                                                   \n                            \"types\": [                                                                        \n                              \"property\"                                                                      \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"name\",                                                                  \n                            \"word\": \"name\"                                                                    \n                          },                                                                                  \n                          {                                                                                   \n                            \"marker\": \"unknown\",                                                              \n                            \"text\": \"kia\",                                                                    \n                            \"types\": [                                                                        \n                              \"object\",                                                                       \n                              \"unknown\"                                                                       \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"kia\",                                                                   \n                            \"word\": \"kia\"                                                                     \n                          }                                                                                   \n                        ],                                                                                    \n                        \"text\": \"kia 's name\",                                                                \n                        \"types\": [                                                                            \n                          \"property\"                                                                          \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"name\",                                                                      \n                        \"word\": \"name\",                                                                       \n                        \"response\": true                                                                      \n                      },                                                                                      \n                      \"text\": \"kia 's name is kia\",                                                           \n                      \"two\": {                                                                                \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"kia\",                                                                        \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"kia\",                                                                       \n                        \"word\": \"kia\",                                                                        \n                        \"response\": true                                                                      \n                      },                                                                                      \n                      \"word\": \"is\",                                                                           \n                      \"topLevel\": true,                                                                       \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call10                                                                         \n          RESULT    kia's name is kia                                                                         \n",
        "Semantic            No semantic applied                                                                       \n          TO        {                                                                                         \n                      \"marker\": \"controlEnd\",                                                                 \n                      \"controlRemove\": true,                                                                  \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n"
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "possession",
                0
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "possession",
                0
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "possession",
                0
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "possession",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "possession",
                0
              ]
            ]
          },
          {
            "op": [
              "possession",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "possession",
                1
              ]
            ]
          },
          {
            "op": [
              "property",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "property",
                0
              ]
            ]
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ]
            ]
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ]
          }
        ]
      },
      "times": 1.598536491394043,
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  - \"kia\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: kia\n                                   text: kia\n                                   value: kia\n    1. possession/0  - \"'s\"\n                                   value: possession\n                                   text: 's\n                                   marker: Operator(possession/0, [Selector(Bridge('{ ...next(operator), object: before[0], objects: before }'), [Type('object')]<==>[])], evaluator(Bridge('{ ...next(operator), object: before[0], objects: before }')), variables({}), inverted)\n                                   word: 's\n    2. unknown/0  - \"name\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: name\n                                   text: name\n                                   value: name\n    3. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n    4. unknown/0  - \"kia\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: kia\n                                   text: kia\n                                   value: kia\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({'marker': Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia'})\n\n>>>>>>>>>>>>> Counter 2\n   *0. unknown/1  - \"kia\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: kia\n                                   text: kia\n                                   value: kia\n                                   unknown: True\n    1. possession/0  - \"'s\"\n                                   value: possession\n                                   text: 's\n                                   marker: Operator(possession/0, [Selector(Bridge('{ ...next(operator), object: before[0], objects: before }'), [Type('object')]<==>[])], evaluator(Bridge('{ ...next(operator), object: before[0], objects: before }')), variables({}), inverted)\n                                   word: 's\n    2. unknown/0  - \"name\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: name\n                                   text: name\n                                   value: name\n    3. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n    4. unknown/0  - \"kia\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: kia\n                                   text: kia\n                                   value: kia\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({'marker': Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({})), 'word': 'name', 'text': 'name', 'value': 'name'})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/1  - \"kia\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: kia\n                                   text: kia\n                                   value: kia\n                                   unknown: True\n    1. possession/0  - \"'s\"\n                                   value: possession\n                                   text: 's\n                                   marker: Operator(possession/0, [Selector(Bridge('{ ...next(operator), object: before[0], objects: before }'), [Type('object')]<==>[])], evaluator(Bridge('{ ...next(operator), object: before[0], objects: before }')), variables({}), inverted)\n                                   word: 's\n   *2. unknown/1  - \"name\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: name\n                                   text: name\n                                   value: name\n                                   unknown: True\n    3. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n    4. unknown/0  - \"kia\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: kia\n                                   text: kia\n                                   value: kia\n<<<<<<<<<<<<<\nNext Op (index=4) is Context({'marker': Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia'})\n\n>>>>>>>>>>>>> Counter 4\n    0. unknown/1  - \"kia\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: kia\n                                   text: kia\n                                   value: kia\n                                   unknown: True\n    1. possession/0  - \"'s\"\n                                   value: possession\n                                   text: 's\n                                   marker: Operator(possession/0, [Selector(Bridge('{ ...next(operator), object: before[0], objects: before }'), [Type('object')]<==>[])], evaluator(Bridge('{ ...next(operator), object: before[0], objects: before }')), variables({}), inverted)\n                                   word: 's\n    2. unknown/1  - \"name\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: name\n                                   text: name\n                                   value: name\n                                   unknown: True\n    3. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n   *4. unknown/1  - \"kia\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: kia\n                                   text: kia\n                                   value: kia\n                                   unknown: True\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({'value': 'possession', 'text': \"'s\", 'marker': Operator(possession/0, [Selector(Bridge('{ ...next(operator), object: before[0], objects: before }'), [Type('object')]<==>[])], evaluator(Bridge('{ ...next(operator), object: before[0], objects: before }')), variables({}), inverted), 'word': \"'s\"})\n\n>>>>>>>>>>>>> Counter 5\n   *0. possession/1  - \"kia 's\"\n                                   value: possession\n                                   text: kia 's\n                                   marker: Operator(possession/1, PASS, [Selector(Bridge('{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }'), []<==>[Type('property')])], evaluator(Bridge('{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: o\n                                   word: 's\n                                   object: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown', 'object']})\n                                   objects: [\n                                     marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                     word: kia\n                                     text: kia\n                                     value: kia\n                                     unknown: True\n                                     types: [\n                                     'unknown'\n,                                      'object'\n                                     ]\n                                   ]\n    1. unknown/1  - \"name\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: name\n                                   text: name\n                                   value: name\n                                   unknown: True\n    2. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n    3. unknown/1  - \"kia\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: kia\n                                   text: kia\n                                   value: kia\n                                   unknown: True\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({'value': 'possession', 'text': \"kia 's\", 'marker': Operator(possession/1, PASS, [Selector(Bridge('{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }'), []<==>[Type('property')])], evaluator(Bridge('{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }')), variables({}), inverted), 'word': \"'s\", 'object': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown', 'object']}), 'objects': [Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown', 'object']})]})\n\n>>>>>>>>>>>>> Counter 6\n   *0. property/0  - \"kia 's name\"\n                                   marker: Operator(property/0, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({}))\n                                   word: name\n                                   text: kia 's name\n                                   value: name\n                                   unknown: True\n                                   types: [\n                                   'property'\n                                   ]\n                                   object: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown', 'object']})\n                                   objects: [\n                                     marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                     word: name\n                                     text: name\n                                     value: name\n                                     unknown: True\n                                     types: [\n                                     'property'\n                                     ]\n\n                                     marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                     word: kia\n                                     text: kia\n                                     value: kia\n                                     unknown: True\n                                     types: [\n                                     'unknown'\n,                                      'object'\n                                     ]\n                                   ]\n    1. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n    2. unknown/1  - \"kia\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: kia\n                                   text: kia\n                                   value: kia\n                                   unknown: True\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({'marker': Operator(property/0, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({})), 'word': 'name', 'text': \"kia 's name\", 'value': 'name', 'unknown': True, 'types': ['property'], 'object': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown', 'object']}), 'objects': [Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'name', 'text': 'name', 'value': 'name', 'unknown': True, 'types': ['property']}), Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown', 'object']})]})\n\n>>>>>>>>>>>>> Counter 7\n   *0. property/1  - \"kia 's name\"\n                                   marker: Operator(property/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: name\n                                   text: kia 's name\n                                   value: name\n                                   unknown: True\n                                   types: [\n                                   'property'\n                                   ]\n                                   object: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown', 'object']})\n                                   objects: [\n                                     marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                     word: name\n                                     text: name\n                                     value: name\n                                     unknown: True\n                                     types: [\n                                     'property'\n                                     ]\n\n                                     marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                     word: kia\n                                     text: kia\n                                     value: kia\n                                     unknown: True\n                                     types: [\n                                     'unknown'\n,                                      'object'\n                                     ]\n                                   ]\n    1. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n    2. unknown/1  - \"kia\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: kia\n                                   text: kia\n                                   value: kia\n                                   unknown: True\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({'marker': Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({})), 'default': True, 'word': 'is', 'text': 'is'})\n\n>>>>>>>>>>>>> Counter 8\n   *0. is/1  - \"kia 's name is kia\"\n                                   marker: Operator(is/1, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: kia 's name is kia\n                                   one: Context({'marker': Operator(property/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'name', 'text': \"kia 's name\", 'value': 'name', 'unknown': True, 'types': ['property', 'property'], 'object': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'k\n                                   two: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown']})\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({'marker': Operator(is/1, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({})), 'default': True, 'word': 'is', 'text': \"kia 's name is kia\", 'one': Context({'marker': Operator(property/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'name', 'text': \"kia 's name\", 'value': 'name', 'unknown': True, 'types': ['property', 'property'], 'object': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown', 'object']}), 'objects': [Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'name', 'text': 'name', 'value': 'name', 'unknown': True, 'types': ['property', 'property']}), Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown', 'object']})]}), 'two': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown']})})\n\n>>>>>>>>>>>>> Counter 9\n   *0. is/2  - \"kia 's name is kia\"\n                                   marker: Operator(is/2, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   default: True\n                                   word: is\n                                   text: kia 's name is kia\n                                   one: Context({'marker': Operator(property/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'name', 'text': \"kia 's name\", 'value': 'name', 'unknown': True, 'types': ['property', 'property'], 'object': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'k\n                                   two: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown']})\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "default": true,
          "marker": "is",
          "one": {
            "marker": "property",
            "object": {
              "marker": "unknown",
              "text": "kia",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "kia",
              "word": "kia"
            },
            "objects": [
              {
                "marker": "property",
                "text": "name",
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": "name",
                "word": "name"
              },
              {
                "marker": "unknown",
                "text": "kia",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "kia",
                "word": "kia"
              }
            ],
            "text": "kia 's name",
            "types": [
              "property"
            ],
            "unknown": true,
            "value": "name",
            "word": "name",
            "response": true
          },
          "text": "kia 's name is kia",
          "two": {
            "marker": "unknown",
            "text": "kia",
            "types": [
              "unknown"
            ],
            "unknown": true,
            "value": "kia",
            "word": "kia",
            "response": true
          },
          "word": "is",
          "topLevel": true
        }
      ],
      "generated": [
        "kia's name is kia"
      ],
      "paraphrases": [
        "kia's name is kia"
      ],
      "responses": [
        ""
      ],
      "memory_free_percent": 68.1,
      "version": "6.13.45-beta.10",
      "query": "kia's name is kia"
    },
    {
      "hierarchy": [
        [
          "hate",
          "canBeQuestion"
        ],
        [
          "sushi",
          "hierarchyAble"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "food",
          "queryable"
        ],
        [
          "pidgeon",
          "queryable"
        ],
        [
          "human",
          "theAble"
        ],
        [
          "love",
          "canBeQuestion"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "owl",
          "theAble"
        ],
        [
          "dislike",
          "canBeDoQuestion"
        ],
        [
          "self",
          "queryable"
        ],
        [
          "dislike",
          "ifAble"
        ],
        [
          "parrot",
          "object"
        ],
        [
          "bird",
          "theAble"
        ],
        [
          "like",
          "orAble"
        ],
        [
          "dog",
          "object"
        ],
        [
          "canBeDoQuestion",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "mammal",
          "hierarchyAble"
        ],
        [
          "chicken_strip",
          "hierarchyAble"
        ],
        [
          "does_after_canBeDoQuestion_doesAble",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "cat",
          "queryable"
        ],
        [
          "mammal",
          "queryable"
        ],
        [
          "love",
          "canBeDoQuestion"
        ],
        [
          "dog",
          "queryable"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "hate",
          "canBeDoQuestion"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "human",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "feline",
          "queryable"
        ],
        [
          "strip",
          "theAble"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "bat",
          "queryable"
        ],
        [
          "like",
          "canBeQuestion"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "wolf",
          "object"
        ],
        [
          "dislike",
          "canBeQuestion"
        ],
        [
          "like",
          "ifAble"
        ],
        [
          "animal",
          "theAble"
        ],
        [
          "bird",
          "hierarchyAble"
        ],
        [
          "pidgeon",
          "hierarchyAble"
        ],
        [
          "strip",
          "concept"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "animal",
          "object"
        ],
        [
          "canine",
          "hierarchyAble"
        ],
        [
          "strip",
          "hierarchyAble"
        ],
        [
          "mammal",
          "object"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "have",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "questionMark_before_canBeQuestion_have",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "owl",
          "queryable"
        ],
        [
          "bat",
          "theAble"
        ],
        [
          "wolf",
          "hierarchyAble"
        ],
        [
          "food",
          "object"
        ],
        [
          "chicken_strip",
          "strip"
        ],
        [
          "strip",
          "queryable"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "feline",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "sushi",
          "object"
        ],
        [
          "parrot",
          "hierarchyAble"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "human",
          "object"
        ],
        [
          "hate",
          "orAble"
        ],
        [
          "animal",
          "queryable"
        ],
        [
          "canine",
          "theAble"
        ],
        [
          "animal",
          "hierarchyAble"
        ],
        [
          "pidgeon",
          "theAble"
        ],
        [
          "want",
          "ifAble"
        ],
        [
          "concept",
          "concept"
        ],
        [
          "wolf",
          "theAble"
        ],
        [
          "feline",
          "hierarchyAble"
        ],
        [
          "parrot",
          "theAble"
        ],
        [
          "bird",
          "object"
        ],
        [
          "want",
          "canBeQuestion"
        ],
        [
          "doesAble",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "eagle",
          "queryable"
        ],
        [
          "dislike",
          "orAble"
        ],
        [
          "whose",
          "object"
        ],
        [
          "dog",
          "theAble"
        ],
        [
          "parrot",
          "queryable"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "eagle",
          "object"
        ],
        [
          "mammal",
          "theAble"
        ],
        [
          "canBeQuestion",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "cat",
          "theAble"
        ],
        [
          "eagle",
          "hierarchyAble"
        ],
        [
          "cat",
          "object"
        ],
        [
          "feline",
          "object"
        ],
        [
          "food",
          "theAble"
        ],
        [
          "bird",
          "queryable"
        ],
        [
          "sushi",
          "theAble"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "owl",
          "object"
        ],
        [
          "canine",
          "object"
        ],
        [
          "love",
          "ifAble"
        ],
        [
          "bat",
          "hierarchyAble"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "pidgeon",
          "object"
        ],
        [
          "human",
          "hierarchyAble"
        ],
        [
          "food",
          "hierarchyAble"
        ],
        [
          "dog",
          "hierarchyAble"
        ],
        [
          "want",
          "canBeDoQuestion"
        ],
        [
          "want",
          "orAble"
        ],
        [
          "sushi",
          "queryable"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "wolf",
          "queryable"
        ],
        [
          "owl",
          "hierarchyAble"
        ],
        [
          "cat",
          "hierarchyAble"
        ],
        [
          "like",
          "canBeDoQuestion"
        ],
        [
          "love",
          "orAble"
        ],
        [
          "hate",
          "ifAble"
        ],
        [
          "eagle",
          "theAble"
        ],
        [
          "bat",
          "object"
        ],
        [
          "canine",
          "queryable"
        ],
        [
          "property",
          "queryable"
        ]
      ],
      "load_cache_time": 0.019376277923583984,
      "logs": [
        "Undefined word 'kia'",
        "Undefined word 'age'",
        "Undefined word '27'",
        "Op choices were: [(('unknown', 0), [('is', 0), ('possession', 0), ('unknown', 0)]), (('unknown', 0), [('is', 0), ('possession', 0), ('unknown', 0)]), (('unknown', 0), [('is', 0), ('possession', 0), ('unknown', 0)]), (('possession', 0), [('is', 0), ('possession', 0)]), (('possession', 1), [('is', 0), ('possession', 1)]), (('property', 0), [('is', 0), ('property', 0)]), (('is', 0), [('is', 0)]), (('is', 1), [('is', 1)])]",
        "Contexts used for choosing operators (if the wrong choices were made update the priories array. Put the expected choice at the end of the list): \n  Context for choosing the operator unknown/0 was [['is', 0], ['possession', 0], ['unknown', 0]]\n  Context for choosing the operator unknown/0 was [['is', 0], ['possession', 0], ['unknown', 0]]\n  Context for choosing the operator unknown/0 was [['is', 0], ['possession', 0], ['unknown', 0]]\n  Context for choosing the operator possession/0 was [['is', 0], ['possession', 0]]\n  Context for choosing the operator possession/1 was [['is', 0], ['possession', 1]]\n  Context for choosing the operator property/0 was [['is', 0], ['property', 0]]\n  Context for choosing the operator is/0 was [['is', 0]]\n  Context for choosing the operator is/1 was [['is', 1]]",
        "",
        "Semantic            No semantic applied                                                                       \n          TO        {                                                                                         \n                      \"marker\": \"controlStart\",                                                               \n                      \"controlRemove\": true,                                                                  \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n",
        "Semantic            KM 'properties' ordinal: 5  notes: \"set the property of an object\"                        \n          APPLIED   Semantic(({context}) => context.marker == 'property' && context.same && context.object, ({\n                    context, objects, km, api}) => {                                                          \n                            const objectContext = context.object;                                             \n                            const propertyContext = context;                                                  \n                            const objectId = context.object.value                                             \n                            const propertyId = context.value                                                  \n                            try{                                                                              \n                              // greg                                                                         \n                              // api.makeObject({config, context: objectContext, doPluralize: false})         \n                              // api.addWord(propertyContext)                                                 \n                              // api.addWord(objectContext)                                                   \n                              api.setProperty(pluralize.singular(objectId), pluralize.singular(propertyId), co\n                    ntext.same, true)                                                                         \n                              context.sameWasProcessed = true                                                 \n                            } catch (e) {                                                                     \n                              const config = km('properties')                                                 \n                              const fragment = config.fragment(\"the property1 of object1 is value1\")          \n                              const value = api.getProperty(objectId, propertyId)                             \n                              if (value.value == context.same.value) {                                        \n                                context.response = [                                                          \n                                  { marker: 'yesno', value: true, paraphrase: true },                         \n                                ]                                                                             \n                                context.sameWasProcessed = true                                               \n                              } else {                                                                        \n                                const mappings = [                                                            \n                                  {                                                                           \n                                    match: ({context}) => context.value == 'property1',                       \n                                    apply: ({context}) => Object.assign(context, { word: propertyContext.word,\n                     value: propertyContext.value, paraphrase: true }),                                       \n                                  },                                                                          \n                                  {                                                                           \n                                    match: ({context}) => context.value == 'object1',                         \n                                    apply: ({context}) => {                                                   \n                                      Object.assign(context, { word: objectContext.word, value: objectContext.\n                    value, paraphrase: true })                                                                \n                                    },                                                                        \n                                  },                                                                          \n                                  {                                                                           \n                                    match: ({context}) => context.value == 'value1',                          \n                                    apply: ({context}) => Object.assign(context, value),                      \n                                  },                                                                          \n                                ]                                                                             \n                                // run the query 'the property of object' then copy that here and template it \n                                context.response = {                                                          \n                                  verbatim: \"no way hose\"                                                     \n                                }                                                                             \n                                context.response = [                                                          \n                                  { marker: 'yesno', value: false, paraphrase: true },                        \n                                ]                                                                             \n                                context.response = context.response.concat(fragment.instantiate(mappings))    \n                                context.response.forEach( (r) => r.paraphrase = true )                        \n                                context.sameWasProcessed = true                                               \n                              }                                                                               \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"object\": {                                                                             \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"kia\",                                                                        \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"kia\",                                                                       \n                        \"word\": \"kia\"                                                                         \n                      },                                                                                      \n                      \"objects\": [                                                                            \n                        {                                                                                     \n                          \"marker\": \"property\",                                                               \n                          \"text\": \"age\",                                                                      \n                          \"types\": [                                                                          \n                            \"property\"                                                                        \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"age\",                                                                     \n                          \"word\": \"age\"                                                                       \n                        },                                                                                    \n                        {                                                                                     \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"kia\",                                                                      \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"kia\",                                                                     \n                          \"word\": \"kia\"                                                                       \n                        }                                                                                     \n                      ],                                                                                      \n                      \"text\": \"kia 's age\",                                                                   \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"age\",                                                                         \n                      \"word\": \"age\",                                                                          \n                      \"same\": {                                                                               \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"27\",                                                                         \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"27\",                                                                        \n                        \"word\": \"27\",                                                                         \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"response\": null                                                                        \n                    }                                                                                         \n          STACK     Context#2: call2,call3                                                                    \n          RESULT    {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"object\": {                                                                             \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"kia\",                                                                        \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"kia\",                                                                       \n                        \"word\": \"kia\"                                                                         \n                      },                                                                                      \n                      \"objects\": [                                                                            \n                        {                                                                                     \n                          \"marker\": \"property\",                                                               \n                          \"text\": \"age\",                                                                      \n                          \"types\": [                                                                          \n                            \"property\"                                                                        \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"age\",                                                                     \n                          \"word\": \"age\"                                                                       \n                        },                                                                                    \n                        {                                                                                     \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"kia\",                                                                      \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"kia\",                                                                     \n                          \"word\": \"kia\"                                                                       \n                        }                                                                                     \n                      ],                                                                                      \n                      \"text\": \"kia 's age\",                                                                   \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"age\",                                                                         \n                      \"word\": \"age\",                                                                          \n                      \"same\": {                                                                               \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"27\",                                                                         \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"27\",                                                                        \n                        \"word\": \"27\",                                                                         \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"response\": null,                                                                       \n                      \"sameWasProcessed\": true                                                                \n                    }                                                                                         \n",
        "Semantic            KM 'dialogues' ordinal: 4  notes: \"x is y\"                                                \n          APPLIED   Semantic(({context}) => context.marker == 'is' && !context.query && context.one && context\n                    .two, ({context, s, log}) => {                                                            \n                            const one = context.one;                                                          \n                            const two = context.two;                                                          \n                            one.same = two;                                                                   \n                            one.response = null                                                               \n                            two.response = null                                                               \n                            const onePrime = s(one)                                                           \n                            if (!onePrime.sameWasProcessed) {                                                 \n                              warningSameNotEvaluated(log, context, one)                                      \n                            } else {                                                                          \n                              if (onePrime.response) {                                                        \n                                context.response = onePrime.response                                          \n                              }                                                                               \n                            }                                                                                 \n                            one.same = undefined                                                              \n                            let twoPrime;                                                                     \n                            if (!onePrime.sameWasProcessed) {                                                 \n                              two.same = one                                                                  \n                              twoPrime = s(two)                                                               \n                              if (!twoPrime.sameWasProcessed) {                                               \n                                warningSameNotEvaluated(log, context, two)                                    \n                              } else {                                                                        \n                                if (twoPrime.response) {                                                      \n                                  context.response = twoPrime.response                                        \n                                }                                                                             \n                              }                                                                               \n                              two.same = undefined                                                            \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"default\": true,                                                                        \n                      \"marker\": \"is\",                                                                         \n                      \"one\": {                                                                                \n                        \"marker\": \"property\",                                                                 \n                        \"object\": {                                                                           \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"kia\",                                                                      \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"kia\",                                                                     \n                          \"word\": \"kia\"                                                                       \n                        },                                                                                    \n                        \"objects\": [                                                                          \n                          {                                                                                   \n                            \"marker\": \"property\",                                                             \n                            \"text\": \"age\",                                                                    \n                            \"types\": [                                                                        \n                              \"property\"                                                                      \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"age\",                                                                   \n                            \"word\": \"age\"                                                                     \n                          },                                                                                  \n                          {                                                                                   \n                            \"marker\": \"unknown\",                                                              \n                            \"text\": \"kia\",                                                                    \n                            \"types\": [                                                                        \n                              \"object\",                                                                       \n                              \"unknown\"                                                                       \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"kia\",                                                                   \n                            \"word\": \"kia\"                                                                     \n                          }                                                                                   \n                        ],                                                                                    \n                        \"text\": \"kia 's age\",                                                                 \n                        \"types\": [                                                                            \n                          \"property\"                                                                          \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"age\",                                                                       \n                        \"word\": \"age\",                                                                        \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"text\": \"kia 's age is 27\",                                                             \n                      \"two\": {                                                                                \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"27\",                                                                         \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"27\",                                                                        \n                        \"word\": \"27\",                                                                         \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"word\": \"is\",                                                                           \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n          STACK     Context#2: call2                                                                          \n          RESULT    {                                                                                         \n                      \"default\": true,                                                                        \n                      \"marker\": \"is\",                                                                         \n                      \"one\": {                                                                                \n                        \"marker\": \"property\",                                                                 \n                        \"object\": {                                                                           \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"kia\",                                                                      \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"kia\",                                                                     \n                          \"word\": \"kia\"                                                                       \n                        },                                                                                    \n                        \"objects\": [                                                                          \n                          {                                                                                   \n                            \"marker\": \"property\",                                                             \n                            \"text\": \"age\",                                                                    \n                            \"types\": [                                                                        \n                              \"property\"                                                                      \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"age\",                                                                   \n                            \"word\": \"age\"                                                                     \n                          },                                                                                  \n                          {                                                                                   \n                            \"marker\": \"unknown\",                                                              \n                            \"text\": \"kia\",                                                                    \n                            \"types\": [                                                                        \n                              \"object\",                                                                       \n                              \"unknown\"                                                                       \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"kia\",                                                                   \n                            \"word\": \"kia\"                                                                     \n                          }                                                                                   \n                        ],                                                                                    \n                        \"text\": \"kia 's age\",                                                                 \n                        \"types\": [                                                                            \n                          \"property\"                                                                          \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"age\",                                                                       \n                        \"word\": \"age\",                                                                        \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"text\": \"kia 's age is 27\",                                                             \n                      \"two\": {                                                                                \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"27\",                                                                         \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"27\",                                                                        \n                        \"word\": \"27\",                                                                         \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"word\": \"is\",                                                                           \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n",
        "Generator           KM 'dialogues' ordinal: 14                                                                \n          APPLIED   Generator(({context}) => context.marker == 'unknown', ({context}) => {                    \n                            if (typeof context.marker === 'string') {                                         \n                              return context.value                                                            \n                            } else {                                                                          \n                              JSON.stringify(context.value)                                                   \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"kia\",                                                                          \n                      \"types\": [                                                                              \n                        \"object\",                                                                             \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"kia\",                                                                         \n                      \"word\": \"kia\",                                                                          \n                      \"paraphrase\": true,                                                                     \n                      \"possessive\": false,                                                                    \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call5,call6,call7                                                        \n          RESULT    kia                                                                                       \n",
        "Generator           KM 'properties' ordinal: 0  notes: \"add possession ending\"                                \n          APPLIED   Generator(({context}) => context.paraphrase && context.possessive, ({context, g}) => {    \n                            context.possessive = false                                                        \n                            const phrase = g(context)                                                         \n                            context.possessive = true                                                         \n                            if (phrase.endsWith('s')) {                                                       \n                              return `${phrase}'`                                                             \n                            } else {                                                                          \n                              return `${phrase}'s`                                                            \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"kia\",                                                                          \n                      \"types\": [                                                                              \n                        \"object\",                                                                             \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"kia\",                                                                         \n                      \"word\": \"kia\",                                                                          \n                      \"paraphrase\": true,                                                                     \n                      \"possessive\": true,                                                                     \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call5,call6                                                              \n          RESULT    kia's                                                                                     \n",
        "Generator           KM 'dialogues' ordinal: 25                                                                \n          APPLIED   Generator(({context}) => context.paraphrase && context.word, ({context}) => `${context.wor\n                    d}`)                                                                                      \n          TO        {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"text\": \"age\",                                                                          \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"age\",                                                                         \n                      \"word\": \"age\",                                                                          \n                      \"paraphrase\": true,                                                                     \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call5,call8                                                              \n          RESULT    age                                                                                       \n",
        "Generator           KM 'properties' ordinal: 11  notes: \"object's property\"                                   \n          APPLIED   Generator(({context}) => !context.modifiers && context.object, ({context, g, gs}) => {    \n                                   if (context.objects) {                                                     \n                                     const objects = [ ...context.objects ]                                   \n                                     objects.reverse()                                                        \n                                     let phrase = ''                                                          \n                                     let separator = ''                                                       \n                                     for (let i = 0; i < objects.length-1; ++i) {                             \n                                       phrase = phrase + separator + g({...objects[i], paraphrase: context.par\n                    aphrase, possessive: true})                                                               \n                                       separator = ' '                                                        \n                                     }                                                                        \n                                     phrase = phrase + separator + g({...objects[objects.length-1], paraphrase\n                    : context.paraphrase})                                                                    \n                                     return phrase                                                            \n                                   } else {                                                                   \n                                     const base = { ...context }                                              \n                                     base.object = undefined; // TODO make paraphrase be a default when paraph\n                    rasing?                                                                                   \n                                     if (context.object.marker == 'objectPrefix') {                           \n                                       return `${g(context.object)} ${g(base)}`                               \n                                     } else {                                                                 \n                                       return `${g({...context.object, paraphrase: context.paraphrase})}'s ${g\n                    (base)}`                                                                                  \n                                     }                                                                        \n                                   }                                                                          \n                                 })                                                                           \n          TO        {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"object\": {                                                                             \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"kia\",                                                                        \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"kia\",                                                                       \n                        \"word\": \"kia\"                                                                         \n                      },                                                                                      \n                      \"objects\": [                                                                            \n                        {                                                                                     \n                          \"marker\": \"property\",                                                               \n                          \"text\": \"age\",                                                                      \n                          \"types\": [                                                                          \n                            \"property\"                                                                        \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"age\",                                                                     \n                          \"word\": \"age\"                                                                       \n                        },                                                                                    \n                        {                                                                                     \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"kia\",                                                                      \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"kia\",                                                                     \n                          \"word\": \"kia\"                                                                       \n                        }                                                                                     \n                      ],                                                                                      \n                      \"text\": \"kia 's age\",                                                                   \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"age\",                                                                         \n                      \"word\": \"age\",                                                                          \n                      \"response\": null,                                                                       \n                      \"paraphrase\": true,                                                                     \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call5                                                                    \n          RESULT    kia's age                                                                                 \n",
        "Generator           KM 'dialogues' ordinal: 7  notes: \"paraphrase a queryable\"                                \n          APPLIED   Generator(({context, hierarchy}) => hierarchy.isA(context.marker, 'queryable') && !context\n                    .isQuery && !context.paraphrase && context.value, ({context, g}) => {                     \n                            const oldValue = context.value.paraphrase                                         \n                            context.value.paraphrase = true                                                   \n                            const result = g(context.value)                                                   \n                            context.value.paraphrase = oldValue                                               \n                            return result                                                                     \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"27\",                                                                           \n                      \"types\": [                                                                              \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"27\",                                                                          \n                      \"word\": \"27\",                                                                           \n                      \"response\": null,                                                                       \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call9                                                                    \n          RESULT    27                                                                                        \n",
        "Generator           KM 'dialogues' ordinal: 24  notes: \"x is y (not a response)\"                              \n          APPLIED   Generator(({context, hierarchy}) => hierarchy.isA(context.marker, 'is') && !context.respon\n                    se, ({context, g}) => {                                                                   \n                            // return `${g({ ...context.one, paraphrase: true })} ${isMany(context.one) || isM\n                    any(context.two) || isMany(context) ? \"are\" : \"is\"} ${g(context.two)}`                    \n                            // response or not response -> paraphrase                                         \n                            // the age of greg is the age -> age is 23    -> first only missing paraphrase mar\n                    ker because it is coming from the context                                                 \n                            // your name is greg --response--> your name is greg // should be my name         \n                            // return `${g({...context.one, paraphrase: context.paraphrase})} ${isMany(context\n                    .one) || isMany(context.two) || isMany(context) ? \"are\" : \"is\"} ${g(context.two)}`        \n                            return `${g({...context.one, paraphrase: true})} ${isMany(context.one) || isMany(c\n                    ontext.two) || isMany(context) ? \"are\" : \"is\"} ${g(context.two)}`                         \n                            // return `${g({...context.one})} ${isMany(context.one) || isMany(context.two) || \n                    isMany(context) ? \"are\" : \"is\"} ${g(context.two)}`                                        \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"default\": true,                                                                        \n                      \"marker\": \"is\",                                                                         \n                      \"one\": {                                                                                \n                        \"marker\": \"property\",                                                                 \n                        \"object\": {                                                                           \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"kia\",                                                                      \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"kia\",                                                                     \n                          \"word\": \"kia\"                                                                       \n                        },                                                                                    \n                        \"objects\": [                                                                          \n                          {                                                                                   \n                            \"marker\": \"property\",                                                             \n                            \"text\": \"age\",                                                                    \n                            \"types\": [                                                                        \n                              \"property\"                                                                      \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"age\",                                                                   \n                            \"word\": \"age\"                                                                     \n                          },                                                                                  \n                          {                                                                                   \n                            \"marker\": \"unknown\",                                                              \n                            \"text\": \"kia\",                                                                    \n                            \"types\": [                                                                        \n                              \"object\",                                                                       \n                              \"unknown\"                                                                       \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"kia\",                                                                   \n                            \"word\": \"kia\"                                                                     \n                          }                                                                                   \n                        ],                                                                                    \n                        \"text\": \"kia 's age\",                                                                 \n                        \"types\": [                                                                            \n                          \"property\"                                                                          \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"age\",                                                                       \n                        \"word\": \"age\",                                                                        \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"text\": \"kia 's age is 27\",                                                             \n                      \"two\": {                                                                                \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"27\",                                                                         \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"27\",                                                                        \n                        \"word\": \"27\",                                                                         \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"word\": \"is\",                                                                           \n                      \"topLevel\": true,                                                                       \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4                                                                          \n          RESULT    kia's age is 27                                                                           \n",
        "Generator           KM 'dialogues' ordinal: 14                                                                \n          APPLIED   Generator(({context}) => context.marker == 'unknown', ({context}) => {                    \n                            if (typeof context.marker === 'string') {                                         \n                              return context.value                                                            \n                            } else {                                                                          \n                              JSON.stringify(context.value)                                                   \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"kia\",                                                                          \n                      \"types\": [                                                                              \n                        \"object\",                                                                             \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"kia\",                                                                         \n                      \"word\": \"kia\",                                                                          \n                      \"paraphrase\": true,                                                                     \n                      \"possessive\": false                                                                     \n                    }                                                                                         \n          STACK     Context#2: call10,call11,call12,call13                                                    \n          RESULT    kia                                                                                       \n",
        "Generator           KM 'properties' ordinal: 0  notes: \"add possession ending\"                                \n          APPLIED   Generator(({context}) => context.paraphrase && context.possessive, ({context, g}) => {    \n                            context.possessive = false                                                        \n                            const phrase = g(context)                                                         \n                            context.possessive = true                                                         \n                            if (phrase.endsWith('s')) {                                                       \n                              return `${phrase}'`                                                             \n                            } else {                                                                          \n                              return `${phrase}'s`                                                            \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"kia\",                                                                          \n                      \"types\": [                                                                              \n                        \"object\",                                                                             \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"kia\",                                                                         \n                      \"word\": \"kia\",                                                                          \n                      \"paraphrase\": true,                                                                     \n                      \"possessive\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call10,call11,call12                                                           \n          RESULT    kia's                                                                                     \n",
        "Generator           KM 'dialogues' ordinal: 25                                                                \n          APPLIED   Generator(({context}) => context.paraphrase && context.word, ({context}) => `${context.wor\n                    d}`)                                                                                      \n          TO        {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"text\": \"age\",                                                                          \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"age\",                                                                         \n                      \"word\": \"age\",                                                                          \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call10,call11,call14                                                           \n          RESULT    age                                                                                       \n",
        "Generator           KM 'properties' ordinal: 11  notes: \"object's property\"                                   \n          APPLIED   Generator(({context}) => !context.modifiers && context.object, ({context, g, gs}) => {    \n                                   if (context.objects) {                                                     \n                                     const objects = [ ...context.objects ]                                   \n                                     objects.reverse()                                                        \n                                     let phrase = ''                                                          \n                                     let separator = ''                                                       \n                                     for (let i = 0; i < objects.length-1; ++i) {                             \n                                       phrase = phrase + separator + g({...objects[i], paraphrase: context.par\n                    aphrase, possessive: true})                                                               \n                                       separator = ' '                                                        \n                                     }                                                                        \n                                     phrase = phrase + separator + g({...objects[objects.length-1], paraphrase\n                    : context.paraphrase})                                                                    \n                                     return phrase                                                            \n                                   } else {                                                                   \n                                     const base = { ...context }                                              \n                                     base.object = undefined; // TODO make paraphrase be a default when paraph\n                    rasing?                                                                                   \n                                     if (context.object.marker == 'objectPrefix') {                           \n                                       return `${g(context.object)} ${g(base)}`                               \n                                     } else {                                                                 \n                                       return `${g({...context.object, paraphrase: context.paraphrase})}'s ${g\n                    (base)}`                                                                                  \n                                     }                                                                        \n                                   }                                                                          \n                                 })                                                                           \n          TO        {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"object\": {                                                                             \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"kia\",                                                                        \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"kia\",                                                                       \n                        \"word\": \"kia\"                                                                         \n                      },                                                                                      \n                      \"objects\": [                                                                            \n                        {                                                                                     \n                          \"marker\": \"property\",                                                               \n                          \"text\": \"age\",                                                                      \n                          \"types\": [                                                                          \n                            \"property\"                                                                        \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"age\",                                                                     \n                          \"word\": \"age\"                                                                       \n                        },                                                                                    \n                        {                                                                                     \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"kia\",                                                                      \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"kia\",                                                                     \n                          \"word\": \"kia\"                                                                       \n                        }                                                                                     \n                      ],                                                                                      \n                      \"text\": \"kia 's age\",                                                                   \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"age\",                                                                         \n                      \"word\": \"age\",                                                                          \n                      \"response\": true,                                                                       \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call10,call11                                                                  \n          RESULT    kia's age                                                                                 \n",
        "Generator           KM 'dialogues' ordinal: 14                                                                \n          APPLIED   Generator(({context}) => context.marker == 'unknown', ({context}) => {                    \n                            if (typeof context.marker === 'string') {                                         \n                              return context.value                                                            \n                            } else {                                                                          \n                              JSON.stringify(context.value)                                                   \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"27\",                                                                           \n                      \"types\": [                                                                              \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"27\",                                                                          \n                      \"word\": \"27\",                                                                           \n                      \"response\": true,                                                                       \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call10,call15                                                                  \n          RESULT    27                                                                                        \n",
        "Generator           KM 'dialogues' ordinal: 22  notes: \"x is y\"                                               \n          APPLIED   Generator(({context, hierarchy}) => { return hierarchy.isA(context.marker, 'is') && contex\n                    t.paraphrase }, ({context, g}) => {                                                       \n                            context.one.response = true                                                       \n                            context.two.response = true                                                       \n                            return `${g({ ...context.one, paraphrase: true })} ${context.word} ${g(context.two\n                    )}`                                                                                       \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"default\": true,                                                                        \n                      \"marker\": \"is\",                                                                         \n                      \"one\": {                                                                                \n                        \"marker\": \"property\",                                                                 \n                        \"object\": {                                                                           \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"kia\",                                                                      \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"kia\",                                                                     \n                          \"word\": \"kia\"                                                                       \n                        },                                                                                    \n                        \"objects\": [                                                                          \n                          {                                                                                   \n                            \"marker\": \"property\",                                                             \n                            \"text\": \"age\",                                                                    \n                            \"types\": [                                                                        \n                              \"property\"                                                                      \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"age\",                                                                   \n                            \"word\": \"age\"                                                                     \n                          },                                                                                  \n                          {                                                                                   \n                            \"marker\": \"unknown\",                                                              \n                            \"text\": \"kia\",                                                                    \n                            \"types\": [                                                                        \n                              \"object\",                                                                       \n                              \"unknown\"                                                                       \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"kia\",                                                                   \n                            \"word\": \"kia\"                                                                     \n                          }                                                                                   \n                        ],                                                                                    \n                        \"text\": \"kia 's age\",                                                                 \n                        \"types\": [                                                                            \n                          \"property\"                                                                          \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"age\",                                                                       \n                        \"word\": \"age\",                                                                        \n                        \"response\": true                                                                      \n                      },                                                                                      \n                      \"text\": \"kia 's age is 27\",                                                             \n                      \"two\": {                                                                                \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"27\",                                                                         \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"27\",                                                                        \n                        \"word\": \"27\",                                                                         \n                        \"response\": true                                                                      \n                      },                                                                                      \n                      \"word\": \"is\",                                                                           \n                      \"topLevel\": true,                                                                       \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call10                                                                         \n          RESULT    kia's age is 27                                                                           \n",
        "Semantic            No semantic applied                                                                       \n          TO        {                                                                                         \n                      \"marker\": \"controlEnd\",                                                                 \n                      \"controlRemove\": true,                                                                  \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n"
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "possession",
                0
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "possession",
                0
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "possession",
                0
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "possession",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "possession",
                0
              ]
            ]
          },
          {
            "op": [
              "possession",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "possession",
                1
              ]
            ]
          },
          {
            "op": [
              "property",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "property",
                0
              ]
            ]
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ]
            ]
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ]
          }
        ]
      },
      "times": 1.2284553050994873,
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  - \"kia\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: kia\n                                   text: kia\n                                   value: kia\n    1. possession/0  - \"'s\"\n                                   value: possession\n                                   text: 's\n                                   marker: Operator(possession/0, [Selector(Bridge('{ ...next(operator), object: before[0], objects: before }'), [Type('object')]<==>[])], evaluator(Bridge('{ ...next(operator), object: before[0], objects: before }')), variables({}), inverted)\n                                   word: 's\n    2. unknown/0  - \"age\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: age\n                                   text: age\n                                   value: age\n    3. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n    4. unknown/0  - \"27\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: 27\n                                   text: 27\n                                   value: 27\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({'marker': Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia'})\n\n>>>>>>>>>>>>> Counter 2\n   *0. unknown/1  - \"kia\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: kia\n                                   text: kia\n                                   value: kia\n                                   unknown: True\n    1. possession/0  - \"'s\"\n                                   value: possession\n                                   text: 's\n                                   marker: Operator(possession/0, [Selector(Bridge('{ ...next(operator), object: before[0], objects: before }'), [Type('object')]<==>[])], evaluator(Bridge('{ ...next(operator), object: before[0], objects: before }')), variables({}), inverted)\n                                   word: 's\n    2. unknown/0  - \"age\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: age\n                                   text: age\n                                   value: age\n    3. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n    4. unknown/0  - \"27\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: 27\n                                   text: 27\n                                   value: 27\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({'marker': Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({})), 'word': 'age', 'text': 'age', 'value': 'age'})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/1  - \"kia\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: kia\n                                   text: kia\n                                   value: kia\n                                   unknown: True\n    1. possession/0  - \"'s\"\n                                   value: possession\n                                   text: 's\n                                   marker: Operator(possession/0, [Selector(Bridge('{ ...next(operator), object: before[0], objects: before }'), [Type('object')]<==>[])], evaluator(Bridge('{ ...next(operator), object: before[0], objects: before }')), variables({}), inverted)\n                                   word: 's\n   *2. unknown/1  - \"age\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: age\n                                   text: age\n                                   value: age\n                                   unknown: True\n    3. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n    4. unknown/0  - \"27\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: 27\n                                   text: 27\n                                   value: 27\n<<<<<<<<<<<<<\nNext Op (index=4) is Context({'marker': Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({})), 'word': '27', 'text': '27', 'value': '27'})\n\n>>>>>>>>>>>>> Counter 4\n    0. unknown/1  - \"kia\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: kia\n                                   text: kia\n                                   value: kia\n                                   unknown: True\n    1. possession/0  - \"'s\"\n                                   value: possession\n                                   text: 's\n                                   marker: Operator(possession/0, [Selector(Bridge('{ ...next(operator), object: before[0], objects: before }'), [Type('object')]<==>[])], evaluator(Bridge('{ ...next(operator), object: before[0], objects: before }')), variables({}), inverted)\n                                   word: 's\n    2. unknown/1  - \"age\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: age\n                                   text: age\n                                   value: age\n                                   unknown: True\n    3. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n   *4. unknown/1  - \"27\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: 27\n                                   text: 27\n                                   value: 27\n                                   unknown: True\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({'value': 'possession', 'text': \"'s\", 'marker': Operator(possession/0, [Selector(Bridge('{ ...next(operator), object: before[0], objects: before }'), [Type('object')]<==>[])], evaluator(Bridge('{ ...next(operator), object: before[0], objects: before }')), variables({}), inverted), 'word': \"'s\"})\n\n>>>>>>>>>>>>> Counter 5\n   *0. possession/1  - \"kia 's\"\n                                   value: possession\n                                   text: kia 's\n                                   marker: Operator(possession/1, PASS, [Selector(Bridge('{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }'), []<==>[Type('property')])], evaluator(Bridge('{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: o\n                                   word: 's\n                                   object: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown', 'object']})\n                                   objects: [\n                                     marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                     word: kia\n                                     text: kia\n                                     value: kia\n                                     unknown: True\n                                     types: [\n                                     'unknown'\n,                                      'object'\n                                     ]\n                                   ]\n    1. unknown/1  - \"age\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: age\n                                   text: age\n                                   value: age\n                                   unknown: True\n    2. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n    3. unknown/1  - \"27\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: 27\n                                   text: 27\n                                   value: 27\n                                   unknown: True\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({'value': 'possession', 'text': \"kia 's\", 'marker': Operator(possession/1, PASS, [Selector(Bridge('{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }'), []<==>[Type('property')])], evaluator(Bridge('{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }')), variables({}), inverted), 'word': \"'s\", 'object': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown', 'object']}), 'objects': [Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown', 'object']})]})\n\n>>>>>>>>>>>>> Counter 6\n   *0. property/0  - \"kia 's age\"\n                                   marker: Operator(property/0, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({}))\n                                   word: age\n                                   text: kia 's age\n                                   value: age\n                                   unknown: True\n                                   types: [\n                                   'property'\n                                   ]\n                                   object: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown', 'object']})\n                                   objects: [\n                                     marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                     word: age\n                                     text: age\n                                     value: age\n                                     unknown: True\n                                     types: [\n                                     'property'\n                                     ]\n\n                                     marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                     word: kia\n                                     text: kia\n                                     value: kia\n                                     unknown: True\n                                     types: [\n                                     'unknown'\n,                                      'object'\n                                     ]\n                                   ]\n    1. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n    2. unknown/1  - \"27\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: 27\n                                   text: 27\n                                   value: 27\n                                   unknown: True\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({'marker': Operator(property/0, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({})), 'word': 'age', 'text': \"kia 's age\", 'value': 'age', 'unknown': True, 'types': ['property'], 'object': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown', 'object']}), 'objects': [Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'age', 'text': 'age', 'value': 'age', 'unknown': True, 'types': ['property']}), Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown', 'object']})]})\n\n>>>>>>>>>>>>> Counter 7\n   *0. property/1  - \"kia 's age\"\n                                   marker: Operator(property/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: age\n                                   text: kia 's age\n                                   value: age\n                                   unknown: True\n                                   types: [\n                                   'property'\n                                   ]\n                                   object: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown', 'object']})\n                                   objects: [\n                                     marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                     word: age\n                                     text: age\n                                     value: age\n                                     unknown: True\n                                     types: [\n                                     'property'\n                                     ]\n\n                                     marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                     word: kia\n                                     text: kia\n                                     value: kia\n                                     unknown: True\n                                     types: [\n                                     'unknown'\n,                                      'object'\n                                     ]\n                                   ]\n    1. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n    2. unknown/1  - \"27\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: 27\n                                   text: 27\n                                   value: 27\n                                   unknown: True\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({'marker': Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({})), 'default': True, 'word': 'is', 'text': 'is'})\n\n>>>>>>>>>>>>> Counter 8\n   *0. is/1  - \"kia 's age is 27\"\n                                   marker: Operator(is/1, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: kia 's age is 27\n                                   one: Context({'marker': Operator(property/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'age', 'text': \"kia 's age\", 'value': 'age', 'unknown': True, 'types': ['property', 'property'], 'object': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia'\n                                   two: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': '27', 'text': '27', 'value': '27', 'unknown': True, 'types': ['unknown']})\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({'marker': Operator(is/1, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({})), 'default': True, 'word': 'is', 'text': \"kia 's age is 27\", 'one': Context({'marker': Operator(property/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'age', 'text': \"kia 's age\", 'value': 'age', 'unknown': True, 'types': ['property', 'property'], 'object': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown', 'object']}), 'objects': [Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'age', 'text': 'age', 'value': 'age', 'unknown': True, 'types': ['property', 'property']}), Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown', 'object']})]}), 'two': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': '27', 'text': '27', 'value': '27', 'unknown': True, 'types': ['unknown']})})\n\n>>>>>>>>>>>>> Counter 9\n   *0. is/2  - \"kia 's age is 27\"\n                                   marker: Operator(is/2, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   default: True\n                                   word: is\n                                   text: kia 's age is 27\n                                   one: Context({'marker': Operator(property/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'age', 'text': \"kia 's age\", 'value': 'age', 'unknown': True, 'types': ['property', 'property'], 'object': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia'\n                                   two: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': '27', 'text': '27', 'value': '27', 'unknown': True, 'types': ['unknown']})\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "default": true,
          "marker": "is",
          "one": {
            "marker": "property",
            "object": {
              "marker": "unknown",
              "text": "kia",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "kia",
              "word": "kia"
            },
            "objects": [
              {
                "marker": "property",
                "text": "age",
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": "age",
                "word": "age"
              },
              {
                "marker": "unknown",
                "text": "kia",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "kia",
                "word": "kia"
              }
            ],
            "text": "kia 's age",
            "types": [
              "property"
            ],
            "unknown": true,
            "value": "age",
            "word": "age",
            "response": true
          },
          "text": "kia 's age is 27",
          "two": {
            "marker": "unknown",
            "text": "27",
            "types": [
              "unknown"
            ],
            "unknown": true,
            "value": "27",
            "word": "27",
            "response": true
          },
          "word": "is",
          "topLevel": true
        }
      ],
      "generated": [
        "kia's age is 27"
      ],
      "paraphrases": [
        "kia's age is 27"
      ],
      "responses": [
        ""
      ],
      "memory_free_percent": 68.6,
      "version": "6.13.45-beta.10",
      "query": "kia's age is 27"
    },
    {
      "hierarchy": [
        [
          "hate",
          "canBeQuestion"
        ],
        [
          "sushi",
          "hierarchyAble"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "food",
          "queryable"
        ],
        [
          "pidgeon",
          "queryable"
        ],
        [
          "human",
          "theAble"
        ],
        [
          "love",
          "canBeQuestion"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "owl",
          "theAble"
        ],
        [
          "dislike",
          "canBeDoQuestion"
        ],
        [
          "self",
          "queryable"
        ],
        [
          "dislike",
          "ifAble"
        ],
        [
          "parrot",
          "object"
        ],
        [
          "bird",
          "theAble"
        ],
        [
          "like",
          "orAble"
        ],
        [
          "dog",
          "object"
        ],
        [
          "canBeDoQuestion",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "mammal",
          "hierarchyAble"
        ],
        [
          "chicken_strip",
          "hierarchyAble"
        ],
        [
          "does_after_canBeDoQuestion_doesAble",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "cat",
          "queryable"
        ],
        [
          "mammal",
          "queryable"
        ],
        [
          "love",
          "canBeDoQuestion"
        ],
        [
          "dog",
          "queryable"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "hate",
          "canBeDoQuestion"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "human",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "feline",
          "queryable"
        ],
        [
          "strip",
          "theAble"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "bat",
          "queryable"
        ],
        [
          "like",
          "canBeQuestion"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "wolf",
          "object"
        ],
        [
          "dislike",
          "canBeQuestion"
        ],
        [
          "like",
          "ifAble"
        ],
        [
          "animal",
          "theAble"
        ],
        [
          "bird",
          "hierarchyAble"
        ],
        [
          "pidgeon",
          "hierarchyAble"
        ],
        [
          "strip",
          "concept"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "animal",
          "object"
        ],
        [
          "canine",
          "hierarchyAble"
        ],
        [
          "strip",
          "hierarchyAble"
        ],
        [
          "mammal",
          "object"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "have",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "questionMark_before_canBeQuestion_have",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "owl",
          "queryable"
        ],
        [
          "bat",
          "theAble"
        ],
        [
          "wolf",
          "hierarchyAble"
        ],
        [
          "food",
          "object"
        ],
        [
          "chicken_strip",
          "strip"
        ],
        [
          "strip",
          "queryable"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "feline",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "sushi",
          "object"
        ],
        [
          "parrot",
          "hierarchyAble"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "human",
          "object"
        ],
        [
          "hate",
          "orAble"
        ],
        [
          "animal",
          "queryable"
        ],
        [
          "canine",
          "theAble"
        ],
        [
          "animal",
          "hierarchyAble"
        ],
        [
          "pidgeon",
          "theAble"
        ],
        [
          "want",
          "ifAble"
        ],
        [
          "concept",
          "concept"
        ],
        [
          "wolf",
          "theAble"
        ],
        [
          "feline",
          "hierarchyAble"
        ],
        [
          "parrot",
          "theAble"
        ],
        [
          "bird",
          "object"
        ],
        [
          "want",
          "canBeQuestion"
        ],
        [
          "doesAble",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "eagle",
          "queryable"
        ],
        [
          "dislike",
          "orAble"
        ],
        [
          "whose",
          "object"
        ],
        [
          "dog",
          "theAble"
        ],
        [
          "parrot",
          "queryable"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "eagle",
          "object"
        ],
        [
          "mammal",
          "theAble"
        ],
        [
          "canBeQuestion",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "cat",
          "theAble"
        ],
        [
          "eagle",
          "hierarchyAble"
        ],
        [
          "cat",
          "object"
        ],
        [
          "feline",
          "object"
        ],
        [
          "food",
          "theAble"
        ],
        [
          "bird",
          "queryable"
        ],
        [
          "sushi",
          "theAble"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "owl",
          "object"
        ],
        [
          "canine",
          "object"
        ],
        [
          "love",
          "ifAble"
        ],
        [
          "bat",
          "hierarchyAble"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "pidgeon",
          "object"
        ],
        [
          "human",
          "hierarchyAble"
        ],
        [
          "food",
          "hierarchyAble"
        ],
        [
          "dog",
          "hierarchyAble"
        ],
        [
          "want",
          "canBeDoQuestion"
        ],
        [
          "want",
          "orAble"
        ],
        [
          "sushi",
          "queryable"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "wolf",
          "queryable"
        ],
        [
          "owl",
          "hierarchyAble"
        ],
        [
          "cat",
          "hierarchyAble"
        ],
        [
          "like",
          "canBeDoQuestion"
        ],
        [
          "love",
          "orAble"
        ],
        [
          "hate",
          "ifAble"
        ],
        [
          "eagle",
          "theAble"
        ],
        [
          "bat",
          "object"
        ],
        [
          "canine",
          "queryable"
        ],
        [
          "property",
          "queryable"
        ]
      ],
      "load_cache_time": 0.005635738372802734,
      "logs": [
        "Undefined word 'hana'",
        "Undefined word 'sister'",
        "Undefined word 'kia'",
        "Op choices were: [(('unknown', 0), [('is', 0), ('possession', 0), ('unknown', 0)]), (('unknown', 0), [('is', 0), ('possession', 0), ('unknown', 0)]), (('unknown', 0), [('is', 0), ('possession', 0), ('unknown', 0)]), (('possession', 0), [('is', 0), ('possession', 0)]), (('possession', 1), [('is', 0), ('possession', 1)]), (('property', 0), [('is', 0), ('property', 0)]), (('is', 0), [('is', 0)]), (('is', 1), [('is', 1)])]",
        "Contexts used for choosing operators (if the wrong choices were made update the priories array. Put the expected choice at the end of the list): \n  Context for choosing the operator unknown/0 was [['is', 0], ['possession', 0], ['unknown', 0]]\n  Context for choosing the operator unknown/0 was [['is', 0], ['possession', 0], ['unknown', 0]]\n  Context for choosing the operator unknown/0 was [['is', 0], ['possession', 0], ['unknown', 0]]\n  Context for choosing the operator possession/0 was [['is', 0], ['possession', 0]]\n  Context for choosing the operator possession/1 was [['is', 0], ['possession', 1]]\n  Context for choosing the operator property/0 was [['is', 0], ['property', 0]]\n  Context for choosing the operator is/0 was [['is', 0]]\n  Context for choosing the operator is/1 was [['is', 1]]",
        "",
        "Semantic            No semantic applied                                                                       \n          TO        {                                                                                         \n                      \"marker\": \"controlStart\",                                                               \n                      \"controlRemove\": true,                                                                  \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n",
        "Semantic            KM 'properties' ordinal: 5  notes: \"set the property of an object\"                        \n          APPLIED   Semantic(({context}) => context.marker == 'property' && context.same && context.object, ({\n                    context, objects, km, api}) => {                                                          \n                            const objectContext = context.object;                                             \n                            const propertyContext = context;                                                  \n                            const objectId = context.object.value                                             \n                            const propertyId = context.value                                                  \n                            try{                                                                              \n                              // greg                                                                         \n                              // api.makeObject({config, context: objectContext, doPluralize: false})         \n                              // api.addWord(propertyContext)                                                 \n                              // api.addWord(objectContext)                                                   \n                              api.setProperty(pluralize.singular(objectId), pluralize.singular(propertyId), co\n                    ntext.same, true)                                                                         \n                              context.sameWasProcessed = true                                                 \n                            } catch (e) {                                                                     \n                              const config = km('properties')                                                 \n                              const fragment = config.fragment(\"the property1 of object1 is value1\")          \n                              const value = api.getProperty(objectId, propertyId)                             \n                              if (value.value == context.same.value) {                                        \n                                context.response = [                                                          \n                                  { marker: 'yesno', value: true, paraphrase: true },                         \n                                ]                                                                             \n                                context.sameWasProcessed = true                                               \n                              } else {                                                                        \n                                const mappings = [                                                            \n                                  {                                                                           \n                                    match: ({context}) => context.value == 'property1',                       \n                                    apply: ({context}) => Object.assign(context, { word: propertyContext.word,\n                     value: propertyContext.value, paraphrase: true }),                                       \n                                  },                                                                          \n                                  {                                                                           \n                                    match: ({context}) => context.value == 'object1',                         \n                                    apply: ({context}) => {                                                   \n                                      Object.assign(context, { word: objectContext.word, value: objectContext.\n                    value, paraphrase: true })                                                                \n                                    },                                                                        \n                                  },                                                                          \n                                  {                                                                           \n                                    match: ({context}) => context.value == 'value1',                          \n                                    apply: ({context}) => Object.assign(context, value),                      \n                                  },                                                                          \n                                ]                                                                             \n                                // run the query 'the property of object' then copy that here and template it \n                                context.response = {                                                          \n                                  verbatim: \"no way hose\"                                                     \n                                }                                                                             \n                                context.response = [                                                          \n                                  { marker: 'yesno', value: false, paraphrase: true },                        \n                                ]                                                                             \n                                context.response = context.response.concat(fragment.instantiate(mappings))    \n                                context.response.forEach( (r) => r.paraphrase = true )                        \n                                context.sameWasProcessed = true                                               \n                              }                                                                               \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"object\": {                                                                             \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hana\",                                                                       \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hana\",                                                                      \n                        \"word\": \"hana\"                                                                        \n                      },                                                                                      \n                      \"objects\": [                                                                            \n                        {                                                                                     \n                          \"marker\": \"property\",                                                               \n                          \"text\": \"sister\",                                                                   \n                          \"types\": [                                                                          \n                            \"property\"                                                                        \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"sister\",                                                                  \n                          \"word\": \"sister\"                                                                    \n                        },                                                                                    \n                        {                                                                                     \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"hana\",                                                                     \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"hana\",                                                                    \n                          \"word\": \"hana\"                                                                      \n                        }                                                                                     \n                      ],                                                                                      \n                      \"text\": \"hana 's sister\",                                                               \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"sister\",                                                                      \n                      \"word\": \"sister\",                                                                       \n                      \"same\": {                                                                               \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"kia\",                                                                        \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"kia\",                                                                       \n                        \"word\": \"kia\",                                                                        \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"response\": null                                                                        \n                    }                                                                                         \n          STACK     Context#2: call2,call3                                                                    \n          RESULT    {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"object\": {                                                                             \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hana\",                                                                       \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hana\",                                                                      \n                        \"word\": \"hana\"                                                                        \n                      },                                                                                      \n                      \"objects\": [                                                                            \n                        {                                                                                     \n                          \"marker\": \"property\",                                                               \n                          \"text\": \"sister\",                                                                   \n                          \"types\": [                                                                          \n                            \"property\"                                                                        \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"sister\",                                                                  \n                          \"word\": \"sister\"                                                                    \n                        },                                                                                    \n                        {                                                                                     \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"hana\",                                                                     \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"hana\",                                                                    \n                          \"word\": \"hana\"                                                                      \n                        }                                                                                     \n                      ],                                                                                      \n                      \"text\": \"hana 's sister\",                                                               \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"sister\",                                                                      \n                      \"word\": \"sister\",                                                                       \n                      \"same\": {                                                                               \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"kia\",                                                                        \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"kia\",                                                                       \n                        \"word\": \"kia\",                                                                        \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"response\": null,                                                                       \n                      \"sameWasProcessed\": true                                                                \n                    }                                                                                         \n",
        "Semantic            KM 'dialogues' ordinal: 4  notes: \"x is y\"                                                \n          APPLIED   Semantic(({context}) => context.marker == 'is' && !context.query && context.one && context\n                    .two, ({context, s, log}) => {                                                            \n                            const one = context.one;                                                          \n                            const two = context.two;                                                          \n                            one.same = two;                                                                   \n                            one.response = null                                                               \n                            two.response = null                                                               \n                            const onePrime = s(one)                                                           \n                            if (!onePrime.sameWasProcessed) {                                                 \n                              warningSameNotEvaluated(log, context, one)                                      \n                            } else {                                                                          \n                              if (onePrime.response) {                                                        \n                                context.response = onePrime.response                                          \n                              }                                                                               \n                            }                                                                                 \n                            one.same = undefined                                                              \n                            let twoPrime;                                                                     \n                            if (!onePrime.sameWasProcessed) {                                                 \n                              two.same = one                                                                  \n                              twoPrime = s(two)                                                               \n                              if (!twoPrime.sameWasProcessed) {                                               \n                                warningSameNotEvaluated(log, context, two)                                    \n                              } else {                                                                        \n                                if (twoPrime.response) {                                                      \n                                  context.response = twoPrime.response                                        \n                                }                                                                             \n                              }                                                                               \n                              two.same = undefined                                                            \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"default\": true,                                                                        \n                      \"marker\": \"is\",                                                                         \n                      \"one\": {                                                                                \n                        \"marker\": \"property\",                                                                 \n                        \"object\": {                                                                           \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"hana\",                                                                     \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"hana\",                                                                    \n                          \"word\": \"hana\"                                                                      \n                        },                                                                                    \n                        \"objects\": [                                                                          \n                          {                                                                                   \n                            \"marker\": \"property\",                                                             \n                            \"text\": \"sister\",                                                                 \n                            \"types\": [                                                                        \n                              \"property\"                                                                      \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"sister\",                                                                \n                            \"word\": \"sister\"                                                                  \n                          },                                                                                  \n                          {                                                                                   \n                            \"marker\": \"unknown\",                                                              \n                            \"text\": \"hana\",                                                                   \n                            \"types\": [                                                                        \n                              \"object\",                                                                       \n                              \"unknown\"                                                                       \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"hana\",                                                                  \n                            \"word\": \"hana\"                                                                    \n                          }                                                                                   \n                        ],                                                                                    \n                        \"text\": \"hana 's sister\",                                                             \n                        \"types\": [                                                                            \n                          \"property\"                                                                          \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"sister\",                                                                    \n                        \"word\": \"sister\",                                                                     \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"text\": \"hana 's sister is kia\",                                                        \n                      \"two\": {                                                                                \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"kia\",                                                                        \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"kia\",                                                                       \n                        \"word\": \"kia\",                                                                        \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"word\": \"is\",                                                                           \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n          STACK     Context#2: call2                                                                          \n          RESULT    {                                                                                         \n                      \"default\": true,                                                                        \n                      \"marker\": \"is\",                                                                         \n                      \"one\": {                                                                                \n                        \"marker\": \"property\",                                                                 \n                        \"object\": {                                                                           \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"hana\",                                                                     \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"hana\",                                                                    \n                          \"word\": \"hana\"                                                                      \n                        },                                                                                    \n                        \"objects\": [                                                                          \n                          {                                                                                   \n                            \"marker\": \"property\",                                                             \n                            \"text\": \"sister\",                                                                 \n                            \"types\": [                                                                        \n                              \"property\"                                                                      \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"sister\",                                                                \n                            \"word\": \"sister\"                                                                  \n                          },                                                                                  \n                          {                                                                                   \n                            \"marker\": \"unknown\",                                                              \n                            \"text\": \"hana\",                                                                   \n                            \"types\": [                                                                        \n                              \"object\",                                                                       \n                              \"unknown\"                                                                       \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"hana\",                                                                  \n                            \"word\": \"hana\"                                                                    \n                          }                                                                                   \n                        ],                                                                                    \n                        \"text\": \"hana 's sister\",                                                             \n                        \"types\": [                                                                            \n                          \"property\"                                                                          \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"sister\",                                                                    \n                        \"word\": \"sister\",                                                                     \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"text\": \"hana 's sister is kia\",                                                        \n                      \"two\": {                                                                                \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"kia\",                                                                        \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"kia\",                                                                       \n                        \"word\": \"kia\",                                                                        \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"word\": \"is\",                                                                           \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n",
        "Generator           KM 'dialogues' ordinal: 14                                                                \n          APPLIED   Generator(({context}) => context.marker == 'unknown', ({context}) => {                    \n                            if (typeof context.marker === 'string') {                                         \n                              return context.value                                                            \n                            } else {                                                                          \n                              JSON.stringify(context.value)                                                   \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"hana\",                                                                         \n                      \"types\": [                                                                              \n                        \"object\",                                                                             \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"hana\",                                                                        \n                      \"word\": \"hana\",                                                                         \n                      \"paraphrase\": true,                                                                     \n                      \"possessive\": false,                                                                    \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call5,call6,call7                                                        \n          RESULT    hana                                                                                      \n",
        "Generator           KM 'properties' ordinal: 0  notes: \"add possession ending\"                                \n          APPLIED   Generator(({context}) => context.paraphrase && context.possessive, ({context, g}) => {    \n                            context.possessive = false                                                        \n                            const phrase = g(context)                                                         \n                            context.possessive = true                                                         \n                            if (phrase.endsWith('s')) {                                                       \n                              return `${phrase}'`                                                             \n                            } else {                                                                          \n                              return `${phrase}'s`                                                            \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"hana\",                                                                         \n                      \"types\": [                                                                              \n                        \"object\",                                                                             \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"hana\",                                                                        \n                      \"word\": \"hana\",                                                                         \n                      \"paraphrase\": true,                                                                     \n                      \"possessive\": true,                                                                     \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call5,call6                                                              \n          RESULT    hana's                                                                                    \n",
        "Generator           KM 'dialogues' ordinal: 25                                                                \n          APPLIED   Generator(({context}) => context.paraphrase && context.word, ({context}) => `${context.wor\n                    d}`)                                                                                      \n          TO        {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"text\": \"sister\",                                                                       \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"sister\",                                                                      \n                      \"word\": \"sister\",                                                                       \n                      \"paraphrase\": true,                                                                     \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call5,call8                                                              \n          RESULT    sister                                                                                    \n",
        "Generator           KM 'properties' ordinal: 11  notes: \"object's property\"                                   \n          APPLIED   Generator(({context}) => !context.modifiers && context.object, ({context, g, gs}) => {    \n                                   if (context.objects) {                                                     \n                                     const objects = [ ...context.objects ]                                   \n                                     objects.reverse()                                                        \n                                     let phrase = ''                                                          \n                                     let separator = ''                                                       \n                                     for (let i = 0; i < objects.length-1; ++i) {                             \n                                       phrase = phrase + separator + g({...objects[i], paraphrase: context.par\n                    aphrase, possessive: true})                                                               \n                                       separator = ' '                                                        \n                                     }                                                                        \n                                     phrase = phrase + separator + g({...objects[objects.length-1], paraphrase\n                    : context.paraphrase})                                                                    \n                                     return phrase                                                            \n                                   } else {                                                                   \n                                     const base = { ...context }                                              \n                                     base.object = undefined; // TODO make paraphrase be a default when paraph\n                    rasing?                                                                                   \n                                     if (context.object.marker == 'objectPrefix') {                           \n                                       return `${g(context.object)} ${g(base)}`                               \n                                     } else {                                                                 \n                                       return `${g({...context.object, paraphrase: context.paraphrase})}'s ${g\n                    (base)}`                                                                                  \n                                     }                                                                        \n                                   }                                                                          \n                                 })                                                                           \n          TO        {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"object\": {                                                                             \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hana\",                                                                       \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hana\",                                                                      \n                        \"word\": \"hana\"                                                                        \n                      },                                                                                      \n                      \"objects\": [                                                                            \n                        {                                                                                     \n                          \"marker\": \"property\",                                                               \n                          \"text\": \"sister\",                                                                   \n                          \"types\": [                                                                          \n                            \"property\"                                                                        \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"sister\",                                                                  \n                          \"word\": \"sister\"                                                                    \n                        },                                                                                    \n                        {                                                                                     \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"hana\",                                                                     \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"hana\",                                                                    \n                          \"word\": \"hana\"                                                                      \n                        }                                                                                     \n                      ],                                                                                      \n                      \"text\": \"hana 's sister\",                                                               \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"sister\",                                                                      \n                      \"word\": \"sister\",                                                                       \n                      \"response\": null,                                                                       \n                      \"paraphrase\": true,                                                                     \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call5                                                                    \n          RESULT    hana's sister                                                                             \n",
        "Generator           KM 'dialogues' ordinal: 7  notes: \"paraphrase a queryable\"                                \n          APPLIED   Generator(({context, hierarchy}) => hierarchy.isA(context.marker, 'queryable') && !context\n                    .isQuery && !context.paraphrase && context.value, ({context, g}) => {                     \n                            const oldValue = context.value.paraphrase                                         \n                            context.value.paraphrase = true                                                   \n                            const result = g(context.value)                                                   \n                            context.value.paraphrase = oldValue                                               \n                            return result                                                                     \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"kia\",                                                                          \n                      \"types\": [                                                                              \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"kia\",                                                                         \n                      \"word\": \"kia\",                                                                          \n                      \"response\": null,                                                                       \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call9                                                                    \n          RESULT    kia                                                                                       \n",
        "Generator           KM 'dialogues' ordinal: 24  notes: \"x is y (not a response)\"                              \n          APPLIED   Generator(({context, hierarchy}) => hierarchy.isA(context.marker, 'is') && !context.respon\n                    se, ({context, g}) => {                                                                   \n                            // return `${g({ ...context.one, paraphrase: true })} ${isMany(context.one) || isM\n                    any(context.two) || isMany(context) ? \"are\" : \"is\"} ${g(context.two)}`                    \n                            // response or not response -> paraphrase                                         \n                            // the age of greg is the age -> age is 23    -> first only missing paraphrase mar\n                    ker because it is coming from the context                                                 \n                            // your name is greg --response--> your name is greg // should be my name         \n                            // return `${g({...context.one, paraphrase: context.paraphrase})} ${isMany(context\n                    .one) || isMany(context.two) || isMany(context) ? \"are\" : \"is\"} ${g(context.two)}`        \n                            return `${g({...context.one, paraphrase: true})} ${isMany(context.one) || isMany(c\n                    ontext.two) || isMany(context) ? \"are\" : \"is\"} ${g(context.two)}`                         \n                            // return `${g({...context.one})} ${isMany(context.one) || isMany(context.two) || \n                    isMany(context) ? \"are\" : \"is\"} ${g(context.two)}`                                        \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"default\": true,                                                                        \n                      \"marker\": \"is\",                                                                         \n                      \"one\": {                                                                                \n                        \"marker\": \"property\",                                                                 \n                        \"object\": {                                                                           \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"hana\",                                                                     \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"hana\",                                                                    \n                          \"word\": \"hana\"                                                                      \n                        },                                                                                    \n                        \"objects\": [                                                                          \n                          {                                                                                   \n                            \"marker\": \"property\",                                                             \n                            \"text\": \"sister\",                                                                 \n                            \"types\": [                                                                        \n                              \"property\"                                                                      \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"sister\",                                                                \n                            \"word\": \"sister\"                                                                  \n                          },                                                                                  \n                          {                                                                                   \n                            \"marker\": \"unknown\",                                                              \n                            \"text\": \"hana\",                                                                   \n                            \"types\": [                                                                        \n                              \"object\",                                                                       \n                              \"unknown\"                                                                       \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"hana\",                                                                  \n                            \"word\": \"hana\"                                                                    \n                          }                                                                                   \n                        ],                                                                                    \n                        \"text\": \"hana 's sister\",                                                             \n                        \"types\": [                                                                            \n                          \"property\"                                                                          \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"sister\",                                                                    \n                        \"word\": \"sister\",                                                                     \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"text\": \"hana 's sister is kia\",                                                        \n                      \"two\": {                                                                                \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"kia\",                                                                        \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"kia\",                                                                       \n                        \"word\": \"kia\",                                                                        \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"word\": \"is\",                                                                           \n                      \"topLevel\": true,                                                                       \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4                                                                          \n          RESULT    hana's sister is kia                                                                      \n",
        "Generator           KM 'dialogues' ordinal: 14                                                                \n          APPLIED   Generator(({context}) => context.marker == 'unknown', ({context}) => {                    \n                            if (typeof context.marker === 'string') {                                         \n                              return context.value                                                            \n                            } else {                                                                          \n                              JSON.stringify(context.value)                                                   \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"hana\",                                                                         \n                      \"types\": [                                                                              \n                        \"object\",                                                                             \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"hana\",                                                                        \n                      \"word\": \"hana\",                                                                         \n                      \"paraphrase\": true,                                                                     \n                      \"possessive\": false                                                                     \n                    }                                                                                         \n          STACK     Context#2: call10,call11,call12,call13                                                    \n          RESULT    hana                                                                                      \n",
        "Generator           KM 'properties' ordinal: 0  notes: \"add possession ending\"                                \n          APPLIED   Generator(({context}) => context.paraphrase && context.possessive, ({context, g}) => {    \n                            context.possessive = false                                                        \n                            const phrase = g(context)                                                         \n                            context.possessive = true                                                         \n                            if (phrase.endsWith('s')) {                                                       \n                              return `${phrase}'`                                                             \n                            } else {                                                                          \n                              return `${phrase}'s`                                                            \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"hana\",                                                                         \n                      \"types\": [                                                                              \n                        \"object\",                                                                             \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"hana\",                                                                        \n                      \"word\": \"hana\",                                                                         \n                      \"paraphrase\": true,                                                                     \n                      \"possessive\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call10,call11,call12                                                           \n          RESULT    hana's                                                                                    \n",
        "Generator           KM 'dialogues' ordinal: 25                                                                \n          APPLIED   Generator(({context}) => context.paraphrase && context.word, ({context}) => `${context.wor\n                    d}`)                                                                                      \n          TO        {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"text\": \"sister\",                                                                       \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"sister\",                                                                      \n                      \"word\": \"sister\",                                                                       \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call10,call11,call14                                                           \n          RESULT    sister                                                                                    \n",
        "Generator           KM 'properties' ordinal: 11  notes: \"object's property\"                                   \n          APPLIED   Generator(({context}) => !context.modifiers && context.object, ({context, g, gs}) => {    \n                                   if (context.objects) {                                                     \n                                     const objects = [ ...context.objects ]                                   \n                                     objects.reverse()                                                        \n                                     let phrase = ''                                                          \n                                     let separator = ''                                                       \n                                     for (let i = 0; i < objects.length-1; ++i) {                             \n                                       phrase = phrase + separator + g({...objects[i], paraphrase: context.par\n                    aphrase, possessive: true})                                                               \n                                       separator = ' '                                                        \n                                     }                                                                        \n                                     phrase = phrase + separator + g({...objects[objects.length-1], paraphrase\n                    : context.paraphrase})                                                                    \n                                     return phrase                                                            \n                                   } else {                                                                   \n                                     const base = { ...context }                                              \n                                     base.object = undefined; // TODO make paraphrase be a default when paraph\n                    rasing?                                                                                   \n                                     if (context.object.marker == 'objectPrefix') {                           \n                                       return `${g(context.object)} ${g(base)}`                               \n                                     } else {                                                                 \n                                       return `${g({...context.object, paraphrase: context.paraphrase})}'s ${g\n                    (base)}`                                                                                  \n                                     }                                                                        \n                                   }                                                                          \n                                 })                                                                           \n          TO        {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"object\": {                                                                             \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hana\",                                                                       \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hana\",                                                                      \n                        \"word\": \"hana\"                                                                        \n                      },                                                                                      \n                      \"objects\": [                                                                            \n                        {                                                                                     \n                          \"marker\": \"property\",                                                               \n                          \"text\": \"sister\",                                                                   \n                          \"types\": [                                                                          \n                            \"property\"                                                                        \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"sister\",                                                                  \n                          \"word\": \"sister\"                                                                    \n                        },                                                                                    \n                        {                                                                                     \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"hana\",                                                                     \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"hana\",                                                                    \n                          \"word\": \"hana\"                                                                      \n                        }                                                                                     \n                      ],                                                                                      \n                      \"text\": \"hana 's sister\",                                                               \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"sister\",                                                                      \n                      \"word\": \"sister\",                                                                       \n                      \"response\": true,                                                                       \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call10,call11                                                                  \n          RESULT    hana's sister                                                                             \n",
        "Generator           KM 'dialogues' ordinal: 14                                                                \n          APPLIED   Generator(({context}) => context.marker == 'unknown', ({context}) => {                    \n                            if (typeof context.marker === 'string') {                                         \n                              return context.value                                                            \n                            } else {                                                                          \n                              JSON.stringify(context.value)                                                   \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"kia\",                                                                          \n                      \"types\": [                                                                              \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"kia\",                                                                         \n                      \"word\": \"kia\",                                                                          \n                      \"response\": true,                                                                       \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call10,call15                                                                  \n          RESULT    kia                                                                                       \n",
        "Generator           KM 'dialogues' ordinal: 22  notes: \"x is y\"                                               \n          APPLIED   Generator(({context, hierarchy}) => { return hierarchy.isA(context.marker, 'is') && contex\n                    t.paraphrase }, ({context, g}) => {                                                       \n                            context.one.response = true                                                       \n                            context.two.response = true                                                       \n                            return `${g({ ...context.one, paraphrase: true })} ${context.word} ${g(context.two\n                    )}`                                                                                       \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"default\": true,                                                                        \n                      \"marker\": \"is\",                                                                         \n                      \"one\": {                                                                                \n                        \"marker\": \"property\",                                                                 \n                        \"object\": {                                                                           \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"hana\",                                                                     \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"hana\",                                                                    \n                          \"word\": \"hana\"                                                                      \n                        },                                                                                    \n                        \"objects\": [                                                                          \n                          {                                                                                   \n                            \"marker\": \"property\",                                                             \n                            \"text\": \"sister\",                                                                 \n                            \"types\": [                                                                        \n                              \"property\"                                                                      \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"sister\",                                                                \n                            \"word\": \"sister\"                                                                  \n                          },                                                                                  \n                          {                                                                                   \n                            \"marker\": \"unknown\",                                                              \n                            \"text\": \"hana\",                                                                   \n                            \"types\": [                                                                        \n                              \"object\",                                                                       \n                              \"unknown\"                                                                       \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"hana\",                                                                  \n                            \"word\": \"hana\"                                                                    \n                          }                                                                                   \n                        ],                                                                                    \n                        \"text\": \"hana 's sister\",                                                             \n                        \"types\": [                                                                            \n                          \"property\"                                                                          \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"sister\",                                                                    \n                        \"word\": \"sister\",                                                                     \n                        \"response\": true                                                                      \n                      },                                                                                      \n                      \"text\": \"hana 's sister is kia\",                                                        \n                      \"two\": {                                                                                \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"kia\",                                                                        \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"kia\",                                                                       \n                        \"word\": \"kia\",                                                                        \n                        \"response\": true                                                                      \n                      },                                                                                      \n                      \"word\": \"is\",                                                                           \n                      \"topLevel\": true,                                                                       \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call10                                                                         \n          RESULT    hana's sister is kia                                                                      \n",
        "Semantic            No semantic applied                                                                       \n          TO        {                                                                                         \n                      \"marker\": \"controlEnd\",                                                                 \n                      \"controlRemove\": true,                                                                  \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n"
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "possession",
                0
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "possession",
                0
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "possession",
                0
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "possession",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "possession",
                0
              ]
            ]
          },
          {
            "op": [
              "possession",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "possession",
                1
              ]
            ]
          },
          {
            "op": [
              "property",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "property",
                0
              ]
            ]
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ]
            ]
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ]
          }
        ]
      },
      "times": 1.2004156112670898,
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  - \"hana\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: hana\n                                   text: hana\n                                   value: hana\n    1. possession/0  - \"'s\"\n                                   value: possession\n                                   text: 's\n                                   marker: Operator(possession/0, [Selector(Bridge('{ ...next(operator), object: before[0], objects: before }'), [Type('object')]<==>[])], evaluator(Bridge('{ ...next(operator), object: before[0], objects: before }')), variables({}), inverted)\n                                   word: 's\n    2. unknown/0  - \"sister\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: sister\n                                   text: sister\n                                   value: sister\n    3. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n    4. unknown/0  - \"kia\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: kia\n                                   text: kia\n                                   value: kia\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({'marker': Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana'})\n\n>>>>>>>>>>>>> Counter 2\n   *0. unknown/1  - \"hana\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: hana\n                                   text: hana\n                                   value: hana\n                                   unknown: True\n    1. possession/0  - \"'s\"\n                                   value: possession\n                                   text: 's\n                                   marker: Operator(possession/0, [Selector(Bridge('{ ...next(operator), object: before[0], objects: before }'), [Type('object')]<==>[])], evaluator(Bridge('{ ...next(operator), object: before[0], objects: before }')), variables({}), inverted)\n                                   word: 's\n    2. unknown/0  - \"sister\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: sister\n                                   text: sister\n                                   value: sister\n    3. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n    4. unknown/0  - \"kia\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: kia\n                                   text: kia\n                                   value: kia\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({'marker': Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({})), 'word': 'sister', 'text': 'sister', 'value': 'sister'})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/1  - \"hana\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: hana\n                                   text: hana\n                                   value: hana\n                                   unknown: True\n    1. possession/0  - \"'s\"\n                                   value: possession\n                                   text: 's\n                                   marker: Operator(possession/0, [Selector(Bridge('{ ...next(operator), object: before[0], objects: before }'), [Type('object')]<==>[])], evaluator(Bridge('{ ...next(operator), object: before[0], objects: before }')), variables({}), inverted)\n                                   word: 's\n   *2. unknown/1  - \"sister\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: sister\n                                   text: sister\n                                   value: sister\n                                   unknown: True\n    3. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n    4. unknown/0  - \"kia\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: kia\n                                   text: kia\n                                   value: kia\n<<<<<<<<<<<<<\nNext Op (index=4) is Context({'marker': Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia'})\n\n>>>>>>>>>>>>> Counter 4\n    0. unknown/1  - \"hana\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: hana\n                                   text: hana\n                                   value: hana\n                                   unknown: True\n    1. possession/0  - \"'s\"\n                                   value: possession\n                                   text: 's\n                                   marker: Operator(possession/0, [Selector(Bridge('{ ...next(operator), object: before[0], objects: before }'), [Type('object')]<==>[])], evaluator(Bridge('{ ...next(operator), object: before[0], objects: before }')), variables({}), inverted)\n                                   word: 's\n    2. unknown/1  - \"sister\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: sister\n                                   text: sister\n                                   value: sister\n                                   unknown: True\n    3. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n   *4. unknown/1  - \"kia\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: kia\n                                   text: kia\n                                   value: kia\n                                   unknown: True\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({'value': 'possession', 'text': \"'s\", 'marker': Operator(possession/0, [Selector(Bridge('{ ...next(operator), object: before[0], objects: before }'), [Type('object')]<==>[])], evaluator(Bridge('{ ...next(operator), object: before[0], objects: before }')), variables({}), inverted), 'word': \"'s\"})\n\n>>>>>>>>>>>>> Counter 5\n   *0. possession/1  - \"hana 's\"\n                                   value: possession\n                                   text: hana 's\n                                   marker: Operator(possession/1, PASS, [Selector(Bridge('{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }'), []<==>[Type('property')])], evaluator(Bridge('{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: o\n                                   word: 's\n                                   object: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True, 'types': ['unknown', 'object']})\n                                   objects: [\n                                     marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                     word: hana\n                                     text: hana\n                                     value: hana\n                                     unknown: True\n                                     types: [\n                                     'unknown'\n,                                      'object'\n                                     ]\n                                   ]\n    1. unknown/1  - \"sister\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: sister\n                                   text: sister\n                                   value: sister\n                                   unknown: True\n    2. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n    3. unknown/1  - \"kia\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: kia\n                                   text: kia\n                                   value: kia\n                                   unknown: True\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({'value': 'possession', 'text': \"hana 's\", 'marker': Operator(possession/1, PASS, [Selector(Bridge('{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }'), []<==>[Type('property')])], evaluator(Bridge('{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }')), variables({}), inverted), 'word': \"'s\", 'object': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True, 'types': ['unknown', 'object']}), 'objects': [Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True, 'types': ['unknown', 'object']})]})\n\n>>>>>>>>>>>>> Counter 6\n   *0. property/0  - \"hana 's sister\"\n                                   marker: Operator(property/0, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({}))\n                                   word: sister\n                                   text: hana 's sister\n                                   value: sister\n                                   unknown: True\n                                   types: [\n                                   'property'\n                                   ]\n                                   object: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True, 'types': ['unknown', 'object']})\n                                   objects: [\n                                     marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                     word: sister\n                                     text: sister\n                                     value: sister\n                                     unknown: True\n                                     types: [\n                                     'property'\n                                     ]\n\n                                     marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                     word: hana\n                                     text: hana\n                                     value: hana\n                                     unknown: True\n                                     types: [\n                                     'unknown'\n,                                      'object'\n                                     ]\n                                   ]\n    1. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n    2. unknown/1  - \"kia\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: kia\n                                   text: kia\n                                   value: kia\n                                   unknown: True\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({'marker': Operator(property/0, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({})), 'word': 'sister', 'text': \"hana 's sister\", 'value': 'sister', 'unknown': True, 'types': ['property'], 'object': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True, 'types': ['unknown', 'object']}), 'objects': [Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'sister', 'text': 'sister', 'value': 'sister', 'unknown': True, 'types': ['property']}), Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True, 'types': ['unknown', 'object']})]})\n\n>>>>>>>>>>>>> Counter 7\n   *0. property/1  - \"hana 's sister\"\n                                   marker: Operator(property/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: sister\n                                   text: hana 's sister\n                                   value: sister\n                                   unknown: True\n                                   types: [\n                                   'property'\n                                   ]\n                                   object: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True, 'types': ['unknown', 'object']})\n                                   objects: [\n                                     marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                     word: sister\n                                     text: sister\n                                     value: sister\n                                     unknown: True\n                                     types: [\n                                     'property'\n                                     ]\n\n                                     marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                     word: hana\n                                     text: hana\n                                     value: hana\n                                     unknown: True\n                                     types: [\n                                     'unknown'\n,                                      'object'\n                                     ]\n                                   ]\n    1. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n    2. unknown/1  - \"kia\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: kia\n                                   text: kia\n                                   value: kia\n                                   unknown: True\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({'marker': Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({})), 'default': True, 'word': 'is', 'text': 'is'})\n\n>>>>>>>>>>>>> Counter 8\n   *0. is/1  - \"hana 's sister is kia\"\n                                   marker: Operator(is/1, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: hana 's sister is kia\n                                   one: Context({'marker': Operator(property/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'sister', 'text': \"hana 's sister\", 'value': 'sister', 'unknown': True, 'types': ['property', 'property'], 'object': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'v\n                                   two: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown']})\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({'marker': Operator(is/1, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({})), 'default': True, 'word': 'is', 'text': \"hana 's sister is kia\", 'one': Context({'marker': Operator(property/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'sister', 'text': \"hana 's sister\", 'value': 'sister', 'unknown': True, 'types': ['property', 'property'], 'object': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True, 'types': ['unknown', 'object']}), 'objects': [Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'sister', 'text': 'sister', 'value': 'sister', 'unknown': True, 'types': ['property', 'property']}), Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True, 'types': ['unknown', 'object']})]}), 'two': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown']})})\n\n>>>>>>>>>>>>> Counter 9\n   *0. is/2  - \"hana 's sister is kia\"\n                                   marker: Operator(is/2, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   default: True\n                                   word: is\n                                   text: hana 's sister is kia\n                                   one: Context({'marker': Operator(property/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'sister', 'text': \"hana 's sister\", 'value': 'sister', 'unknown': True, 'types': ['property', 'property'], 'object': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'v\n                                   two: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown']})\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "default": true,
          "marker": "is",
          "one": {
            "marker": "property",
            "object": {
              "marker": "unknown",
              "text": "hana",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "hana",
              "word": "hana"
            },
            "objects": [
              {
                "marker": "property",
                "text": "sister",
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": "sister",
                "word": "sister"
              },
              {
                "marker": "unknown",
                "text": "hana",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "hana",
                "word": "hana"
              }
            ],
            "text": "hana 's sister",
            "types": [
              "property"
            ],
            "unknown": true,
            "value": "sister",
            "word": "sister",
            "response": true
          },
          "text": "hana 's sister is kia",
          "two": {
            "marker": "unknown",
            "text": "kia",
            "types": [
              "unknown"
            ],
            "unknown": true,
            "value": "kia",
            "word": "kia",
            "response": true
          },
          "word": "is",
          "topLevel": true
        }
      ],
      "generated": [
        "hana's sister is kia"
      ],
      "paraphrases": [
        "hana's sister is kia"
      ],
      "responses": [
        ""
      ],
      "memory_free_percent": 69,
      "version": "6.13.45-beta.10",
      "query": "hana's sister is kia"
    },
    {
      "hierarchy": [
        [
          "hate",
          "canBeQuestion"
        ],
        [
          "sushi",
          "hierarchyAble"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "food",
          "queryable"
        ],
        [
          "pidgeon",
          "queryable"
        ],
        [
          "human",
          "theAble"
        ],
        [
          "love",
          "canBeQuestion"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "owl",
          "theAble"
        ],
        [
          "dislike",
          "canBeDoQuestion"
        ],
        [
          "self",
          "queryable"
        ],
        [
          "dislike",
          "ifAble"
        ],
        [
          "parrot",
          "object"
        ],
        [
          "bird",
          "theAble"
        ],
        [
          "like",
          "orAble"
        ],
        [
          "dog",
          "object"
        ],
        [
          "canBeDoQuestion",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "mammal",
          "hierarchyAble"
        ],
        [
          "chicken_strip",
          "hierarchyAble"
        ],
        [
          "does_after_canBeDoQuestion_doesAble",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "cat",
          "queryable"
        ],
        [
          "mammal",
          "queryable"
        ],
        [
          "love",
          "canBeDoQuestion"
        ],
        [
          "dog",
          "queryable"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "hate",
          "canBeDoQuestion"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "human",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "feline",
          "queryable"
        ],
        [
          "strip",
          "theAble"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "bat",
          "queryable"
        ],
        [
          "like",
          "canBeQuestion"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "wolf",
          "object"
        ],
        [
          "dislike",
          "canBeQuestion"
        ],
        [
          "like",
          "ifAble"
        ],
        [
          "animal",
          "theAble"
        ],
        [
          "bird",
          "hierarchyAble"
        ],
        [
          "pidgeon",
          "hierarchyAble"
        ],
        [
          "strip",
          "concept"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "animal",
          "object"
        ],
        [
          "canine",
          "hierarchyAble"
        ],
        [
          "strip",
          "hierarchyAble"
        ],
        [
          "mammal",
          "object"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "have",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "questionMark_before_canBeQuestion_have",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "owl",
          "queryable"
        ],
        [
          "bat",
          "theAble"
        ],
        [
          "wolf",
          "hierarchyAble"
        ],
        [
          "food",
          "object"
        ],
        [
          "chicken_strip",
          "strip"
        ],
        [
          "strip",
          "queryable"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "feline",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "sushi",
          "object"
        ],
        [
          "parrot",
          "hierarchyAble"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "human",
          "object"
        ],
        [
          "hate",
          "orAble"
        ],
        [
          "animal",
          "queryable"
        ],
        [
          "canine",
          "theAble"
        ],
        [
          "animal",
          "hierarchyAble"
        ],
        [
          "pidgeon",
          "theAble"
        ],
        [
          "want",
          "ifAble"
        ],
        [
          "concept",
          "concept"
        ],
        [
          "wolf",
          "theAble"
        ],
        [
          "feline",
          "hierarchyAble"
        ],
        [
          "parrot",
          "theAble"
        ],
        [
          "bird",
          "object"
        ],
        [
          "want",
          "canBeQuestion"
        ],
        [
          "doesAble",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "eagle",
          "queryable"
        ],
        [
          "dislike",
          "orAble"
        ],
        [
          "whose",
          "object"
        ],
        [
          "dog",
          "theAble"
        ],
        [
          "parrot",
          "queryable"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "eagle",
          "object"
        ],
        [
          "mammal",
          "theAble"
        ],
        [
          "canBeQuestion",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "cat",
          "theAble"
        ],
        [
          "eagle",
          "hierarchyAble"
        ],
        [
          "cat",
          "object"
        ],
        [
          "feline",
          "object"
        ],
        [
          "food",
          "theAble"
        ],
        [
          "bird",
          "queryable"
        ],
        [
          "sushi",
          "theAble"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "owl",
          "object"
        ],
        [
          "canine",
          "object"
        ],
        [
          "love",
          "ifAble"
        ],
        [
          "bat",
          "hierarchyAble"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "pidgeon",
          "object"
        ],
        [
          "human",
          "hierarchyAble"
        ],
        [
          "food",
          "hierarchyAble"
        ],
        [
          "dog",
          "hierarchyAble"
        ],
        [
          "want",
          "canBeDoQuestion"
        ],
        [
          "want",
          "orAble"
        ],
        [
          "sushi",
          "queryable"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "wolf",
          "queryable"
        ],
        [
          "owl",
          "hierarchyAble"
        ],
        [
          "cat",
          "hierarchyAble"
        ],
        [
          "like",
          "canBeDoQuestion"
        ],
        [
          "love",
          "orAble"
        ],
        [
          "hate",
          "ifAble"
        ],
        [
          "eagle",
          "theAble"
        ],
        [
          "bat",
          "object"
        ],
        [
          "canine",
          "queryable"
        ],
        [
          "property",
          "queryable"
        ]
      ],
      "load_cache_time": 0.019363880157470703,
      "logs": [
        "Undefined word 'hana'",
        "Undefined word 'name'",
        "Op choices were: [(('unknown', 0), [('is', 0), ('possession', 0), ('unknown', 0)]), (('unknown', 0), [('is', 0), ('possession', 0), ('unknown', 0)]), (('unknown', 0), [('is', 0), ('possession', 0), ('unknown', 0)]), (('possession', 0), [('is', 0), ('possession', 0)]), (('possession', 1), [('is', 0), ('possession', 1)]), (('property', 0), [('is', 0), ('property', 0)]), (('is', 0), [('is', 0)]), (('is', 1), [('is', 1)])]",
        "Contexts used for choosing operators (if the wrong choices were made update the priories array. Put the expected choice at the end of the list): \n  Context for choosing the operator unknown/0 was [['is', 0], ['possession', 0], ['unknown', 0]]\n  Context for choosing the operator unknown/0 was [['is', 0], ['possession', 0], ['unknown', 0]]\n  Context for choosing the operator unknown/0 was [['is', 0], ['possession', 0], ['unknown', 0]]\n  Context for choosing the operator possession/0 was [['is', 0], ['possession', 0]]\n  Context for choosing the operator possession/1 was [['is', 0], ['possession', 1]]\n  Context for choosing the operator property/0 was [['is', 0], ['property', 0]]\n  Context for choosing the operator is/0 was [['is', 0]]\n  Context for choosing the operator is/1 was [['is', 1]]",
        "",
        "Semantic            No semantic applied                                                                       \n          TO        {                                                                                         \n                      \"marker\": \"controlStart\",                                                               \n                      \"controlRemove\": true,                                                                  \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n",
        "Semantic            KM 'properties' ordinal: 5  notes: \"set the property of an object\"                        \n          APPLIED   Semantic(({context}) => context.marker == 'property' && context.same && context.object, ({\n                    context, objects, km, api}) => {                                                          \n                            const objectContext = context.object;                                             \n                            const propertyContext = context;                                                  \n                            const objectId = context.object.value                                             \n                            const propertyId = context.value                                                  \n                            try{                                                                              \n                              // greg                                                                         \n                              // api.makeObject({config, context: objectContext, doPluralize: false})         \n                              // api.addWord(propertyContext)                                                 \n                              // api.addWord(objectContext)                                                   \n                              api.setProperty(pluralize.singular(objectId), pluralize.singular(propertyId), co\n                    ntext.same, true)                                                                         \n                              context.sameWasProcessed = true                                                 \n                            } catch (e) {                                                                     \n                              const config = km('properties')                                                 \n                              const fragment = config.fragment(\"the property1 of object1 is value1\")          \n                              const value = api.getProperty(objectId, propertyId)                             \n                              if (value.value == context.same.value) {                                        \n                                context.response = [                                                          \n                                  { marker: 'yesno', value: true, paraphrase: true },                         \n                                ]                                                                             \n                                context.sameWasProcessed = true                                               \n                              } else {                                                                        \n                                const mappings = [                                                            \n                                  {                                                                           \n                                    match: ({context}) => context.value == 'property1',                       \n                                    apply: ({context}) => Object.assign(context, { word: propertyContext.word,\n                     value: propertyContext.value, paraphrase: true }),                                       \n                                  },                                                                          \n                                  {                                                                           \n                                    match: ({context}) => context.value == 'object1',                         \n                                    apply: ({context}) => {                                                   \n                                      Object.assign(context, { word: objectContext.word, value: objectContext.\n                    value, paraphrase: true })                                                                \n                                    },                                                                        \n                                  },                                                                          \n                                  {                                                                           \n                                    match: ({context}) => context.value == 'value1',                          \n                                    apply: ({context}) => Object.assign(context, value),                      \n                                  },                                                                          \n                                ]                                                                             \n                                // run the query 'the property of object' then copy that here and template it \n                                context.response = {                                                          \n                                  verbatim: \"no way hose\"                                                     \n                                }                                                                             \n                                context.response = [                                                          \n                                  { marker: 'yesno', value: false, paraphrase: true },                        \n                                ]                                                                             \n                                context.response = context.response.concat(fragment.instantiate(mappings))    \n                                context.response.forEach( (r) => r.paraphrase = true )                        \n                                context.sameWasProcessed = true                                               \n                              }                                                                               \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"object\": {                                                                             \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hana\",                                                                       \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hana\",                                                                      \n                        \"word\": \"hana\"                                                                        \n                      },                                                                                      \n                      \"objects\": [                                                                            \n                        {                                                                                     \n                          \"marker\": \"property\",                                                               \n                          \"text\": \"name\",                                                                     \n                          \"types\": [                                                                          \n                            \"property\"                                                                        \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"name\",                                                                    \n                          \"word\": \"name\"                                                                      \n                        },                                                                                    \n                        {                                                                                     \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"hana\",                                                                     \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"hana\",                                                                    \n                          \"word\": \"hana\"                                                                      \n                        }                                                                                     \n                      ],                                                                                      \n                      \"text\": \"hana 's name\",                                                                 \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"name\",                                                                        \n                      \"word\": \"name\",                                                                         \n                      \"same\": {                                                                               \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hana\",                                                                       \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hana\",                                                                      \n                        \"word\": \"hana\",                                                                       \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"response\": null                                                                        \n                    }                                                                                         \n          STACK     Context#2: call2,call3                                                                    \n          RESULT    {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"object\": {                                                                             \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hana\",                                                                       \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hana\",                                                                      \n                        \"word\": \"hana\"                                                                        \n                      },                                                                                      \n                      \"objects\": [                                                                            \n                        {                                                                                     \n                          \"marker\": \"property\",                                                               \n                          \"text\": \"name\",                                                                     \n                          \"types\": [                                                                          \n                            \"property\"                                                                        \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"name\",                                                                    \n                          \"word\": \"name\"                                                                      \n                        },                                                                                    \n                        {                                                                                     \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"hana\",                                                                     \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"hana\",                                                                    \n                          \"word\": \"hana\"                                                                      \n                        }                                                                                     \n                      ],                                                                                      \n                      \"text\": \"hana 's name\",                                                                 \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"name\",                                                                        \n                      \"word\": \"name\",                                                                         \n                      \"same\": {                                                                               \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hana\",                                                                       \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hana\",                                                                      \n                        \"word\": \"hana\",                                                                       \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"response\": null,                                                                       \n                      \"sameWasProcessed\": true                                                                \n                    }                                                                                         \n",
        "Semantic            KM 'dialogues' ordinal: 4  notes: \"x is y\"                                                \n          APPLIED   Semantic(({context}) => context.marker == 'is' && !context.query && context.one && context\n                    .two, ({context, s, log}) => {                                                            \n                            const one = context.one;                                                          \n                            const two = context.two;                                                          \n                            one.same = two;                                                                   \n                            one.response = null                                                               \n                            two.response = null                                                               \n                            const onePrime = s(one)                                                           \n                            if (!onePrime.sameWasProcessed) {                                                 \n                              warningSameNotEvaluated(log, context, one)                                      \n                            } else {                                                                          \n                              if (onePrime.response) {                                                        \n                                context.response = onePrime.response                                          \n                              }                                                                               \n                            }                                                                                 \n                            one.same = undefined                                                              \n                            let twoPrime;                                                                     \n                            if (!onePrime.sameWasProcessed) {                                                 \n                              two.same = one                                                                  \n                              twoPrime = s(two)                                                               \n                              if (!twoPrime.sameWasProcessed) {                                               \n                                warningSameNotEvaluated(log, context, two)                                    \n                              } else {                                                                        \n                                if (twoPrime.response) {                                                      \n                                  context.response = twoPrime.response                                        \n                                }                                                                             \n                              }                                                                               \n                              two.same = undefined                                                            \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"default\": true,                                                                        \n                      \"marker\": \"is\",                                                                         \n                      \"one\": {                                                                                \n                        \"marker\": \"property\",                                                                 \n                        \"object\": {                                                                           \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"hana\",                                                                     \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"hana\",                                                                    \n                          \"word\": \"hana\"                                                                      \n                        },                                                                                    \n                        \"objects\": [                                                                          \n                          {                                                                                   \n                            \"marker\": \"property\",                                                             \n                            \"text\": \"name\",                                                                   \n                            \"types\": [                                                                        \n                              \"property\"                                                                      \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"name\",                                                                  \n                            \"word\": \"name\"                                                                    \n                          },                                                                                  \n                          {                                                                                   \n                            \"marker\": \"unknown\",                                                              \n                            \"text\": \"hana\",                                                                   \n                            \"types\": [                                                                        \n                              \"object\",                                                                       \n                              \"unknown\"                                                                       \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"hana\",                                                                  \n                            \"word\": \"hana\"                                                                    \n                          }                                                                                   \n                        ],                                                                                    \n                        \"text\": \"hana 's name\",                                                               \n                        \"types\": [                                                                            \n                          \"property\"                                                                          \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"name\",                                                                      \n                        \"word\": \"name\",                                                                       \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"text\": \"hana 's name is hana\",                                                         \n                      \"two\": {                                                                                \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hana\",                                                                       \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hana\",                                                                      \n                        \"word\": \"hana\",                                                                       \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"word\": \"is\",                                                                           \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n          STACK     Context#2: call2                                                                          \n          RESULT    {                                                                                         \n                      \"default\": true,                                                                        \n                      \"marker\": \"is\",                                                                         \n                      \"one\": {                                                                                \n                        \"marker\": \"property\",                                                                 \n                        \"object\": {                                                                           \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"hana\",                                                                     \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"hana\",                                                                    \n                          \"word\": \"hana\"                                                                      \n                        },                                                                                    \n                        \"objects\": [                                                                          \n                          {                                                                                   \n                            \"marker\": \"property\",                                                             \n                            \"text\": \"name\",                                                                   \n                            \"types\": [                                                                        \n                              \"property\"                                                                      \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"name\",                                                                  \n                            \"word\": \"name\"                                                                    \n                          },                                                                                  \n                          {                                                                                   \n                            \"marker\": \"unknown\",                                                              \n                            \"text\": \"hana\",                                                                   \n                            \"types\": [                                                                        \n                              \"object\",                                                                       \n                              \"unknown\"                                                                       \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"hana\",                                                                  \n                            \"word\": \"hana\"                                                                    \n                          }                                                                                   \n                        ],                                                                                    \n                        \"text\": \"hana 's name\",                                                               \n                        \"types\": [                                                                            \n                          \"property\"                                                                          \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"name\",                                                                      \n                        \"word\": \"name\",                                                                       \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"text\": \"hana 's name is hana\",                                                         \n                      \"two\": {                                                                                \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hana\",                                                                       \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hana\",                                                                      \n                        \"word\": \"hana\",                                                                       \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"word\": \"is\",                                                                           \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n",
        "Generator           KM 'dialogues' ordinal: 14                                                                \n          APPLIED   Generator(({context}) => context.marker == 'unknown', ({context}) => {                    \n                            if (typeof context.marker === 'string') {                                         \n                              return context.value                                                            \n                            } else {                                                                          \n                              JSON.stringify(context.value)                                                   \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"hana\",                                                                         \n                      \"types\": [                                                                              \n                        \"object\",                                                                             \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"hana\",                                                                        \n                      \"word\": \"hana\",                                                                         \n                      \"paraphrase\": true,                                                                     \n                      \"possessive\": false,                                                                    \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call5,call6,call7                                                        \n          RESULT    hana                                                                                      \n",
        "Generator           KM 'properties' ordinal: 0  notes: \"add possession ending\"                                \n          APPLIED   Generator(({context}) => context.paraphrase && context.possessive, ({context, g}) => {    \n                            context.possessive = false                                                        \n                            const phrase = g(context)                                                         \n                            context.possessive = true                                                         \n                            if (phrase.endsWith('s')) {                                                       \n                              return `${phrase}'`                                                             \n                            } else {                                                                          \n                              return `${phrase}'s`                                                            \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"hana\",                                                                         \n                      \"types\": [                                                                              \n                        \"object\",                                                                             \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"hana\",                                                                        \n                      \"word\": \"hana\",                                                                         \n                      \"paraphrase\": true,                                                                     \n                      \"possessive\": true,                                                                     \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call5,call6                                                              \n          RESULT    hana's                                                                                    \n",
        "Generator           KM 'dialogues' ordinal: 25                                                                \n          APPLIED   Generator(({context}) => context.paraphrase && context.word, ({context}) => `${context.wor\n                    d}`)                                                                                      \n          TO        {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"text\": \"name\",                                                                         \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"name\",                                                                        \n                      \"word\": \"name\",                                                                         \n                      \"paraphrase\": true,                                                                     \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call5,call8                                                              \n          RESULT    name                                                                                      \n",
        "Generator           KM 'properties' ordinal: 11  notes: \"object's property\"                                   \n          APPLIED   Generator(({context}) => !context.modifiers && context.object, ({context, g, gs}) => {    \n                                   if (context.objects) {                                                     \n                                     const objects = [ ...context.objects ]                                   \n                                     objects.reverse()                                                        \n                                     let phrase = ''                                                          \n                                     let separator = ''                                                       \n                                     for (let i = 0; i < objects.length-1; ++i) {                             \n                                       phrase = phrase + separator + g({...objects[i], paraphrase: context.par\n                    aphrase, possessive: true})                                                               \n                                       separator = ' '                                                        \n                                     }                                                                        \n                                     phrase = phrase + separator + g({...objects[objects.length-1], paraphrase\n                    : context.paraphrase})                                                                    \n                                     return phrase                                                            \n                                   } else {                                                                   \n                                     const base = { ...context }                                              \n                                     base.object = undefined; // TODO make paraphrase be a default when paraph\n                    rasing?                                                                                   \n                                     if (context.object.marker == 'objectPrefix') {                           \n                                       return `${g(context.object)} ${g(base)}`                               \n                                     } else {                                                                 \n                                       return `${g({...context.object, paraphrase: context.paraphrase})}'s ${g\n                    (base)}`                                                                                  \n                                     }                                                                        \n                                   }                                                                          \n                                 })                                                                           \n          TO        {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"object\": {                                                                             \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hana\",                                                                       \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hana\",                                                                      \n                        \"word\": \"hana\"                                                                        \n                      },                                                                                      \n                      \"objects\": [                                                                            \n                        {                                                                                     \n                          \"marker\": \"property\",                                                               \n                          \"text\": \"name\",                                                                     \n                          \"types\": [                                                                          \n                            \"property\"                                                                        \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"name\",                                                                    \n                          \"word\": \"name\"                                                                      \n                        },                                                                                    \n                        {                                                                                     \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"hana\",                                                                     \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"hana\",                                                                    \n                          \"word\": \"hana\"                                                                      \n                        }                                                                                     \n                      ],                                                                                      \n                      \"text\": \"hana 's name\",                                                                 \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"name\",                                                                        \n                      \"word\": \"name\",                                                                         \n                      \"response\": null,                                                                       \n                      \"paraphrase\": true,                                                                     \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call5                                                                    \n          RESULT    hana's name                                                                               \n",
        "Generator           KM 'dialogues' ordinal: 7  notes: \"paraphrase a queryable\"                                \n          APPLIED   Generator(({context, hierarchy}) => hierarchy.isA(context.marker, 'queryable') && !context\n                    .isQuery && !context.paraphrase && context.value, ({context, g}) => {                     \n                            const oldValue = context.value.paraphrase                                         \n                            context.value.paraphrase = true                                                   \n                            const result = g(context.value)                                                   \n                            context.value.paraphrase = oldValue                                               \n                            return result                                                                     \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"hana\",                                                                         \n                      \"types\": [                                                                              \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"hana\",                                                                        \n                      \"word\": \"hana\",                                                                         \n                      \"response\": null,                                                                       \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call9                                                                    \n          RESULT    hana                                                                                      \n",
        "Generator           KM 'dialogues' ordinal: 24  notes: \"x is y (not a response)\"                              \n          APPLIED   Generator(({context, hierarchy}) => hierarchy.isA(context.marker, 'is') && !context.respon\n                    se, ({context, g}) => {                                                                   \n                            // return `${g({ ...context.one, paraphrase: true })} ${isMany(context.one) || isM\n                    any(context.two) || isMany(context) ? \"are\" : \"is\"} ${g(context.two)}`                    \n                            // response or not response -> paraphrase                                         \n                            // the age of greg is the age -> age is 23    -> first only missing paraphrase mar\n                    ker because it is coming from the context                                                 \n                            // your name is greg --response--> your name is greg // should be my name         \n                            // return `${g({...context.one, paraphrase: context.paraphrase})} ${isMany(context\n                    .one) || isMany(context.two) || isMany(context) ? \"are\" : \"is\"} ${g(context.two)}`        \n                            return `${g({...context.one, paraphrase: true})} ${isMany(context.one) || isMany(c\n                    ontext.two) || isMany(context) ? \"are\" : \"is\"} ${g(context.two)}`                         \n                            // return `${g({...context.one})} ${isMany(context.one) || isMany(context.two) || \n                    isMany(context) ? \"are\" : \"is\"} ${g(context.two)}`                                        \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"default\": true,                                                                        \n                      \"marker\": \"is\",                                                                         \n                      \"one\": {                                                                                \n                        \"marker\": \"property\",                                                                 \n                        \"object\": {                                                                           \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"hana\",                                                                     \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"hana\",                                                                    \n                          \"word\": \"hana\"                                                                      \n                        },                                                                                    \n                        \"objects\": [                                                                          \n                          {                                                                                   \n                            \"marker\": \"property\",                                                             \n                            \"text\": \"name\",                                                                   \n                            \"types\": [                                                                        \n                              \"property\"                                                                      \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"name\",                                                                  \n                            \"word\": \"name\"                                                                    \n                          },                                                                                  \n                          {                                                                                   \n                            \"marker\": \"unknown\",                                                              \n                            \"text\": \"hana\",                                                                   \n                            \"types\": [                                                                        \n                              \"object\",                                                                       \n                              \"unknown\"                                                                       \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"hana\",                                                                  \n                            \"word\": \"hana\"                                                                    \n                          }                                                                                   \n                        ],                                                                                    \n                        \"text\": \"hana 's name\",                                                               \n                        \"types\": [                                                                            \n                          \"property\"                                                                          \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"name\",                                                                      \n                        \"word\": \"name\",                                                                       \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"text\": \"hana 's name is hana\",                                                         \n                      \"two\": {                                                                                \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hana\",                                                                       \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hana\",                                                                      \n                        \"word\": \"hana\",                                                                       \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"word\": \"is\",                                                                           \n                      \"topLevel\": true,                                                                       \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4                                                                          \n          RESULT    hana's name is hana                                                                       \n",
        "Generator           KM 'dialogues' ordinal: 14                                                                \n          APPLIED   Generator(({context}) => context.marker == 'unknown', ({context}) => {                    \n                            if (typeof context.marker === 'string') {                                         \n                              return context.value                                                            \n                            } else {                                                                          \n                              JSON.stringify(context.value)                                                   \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"hana\",                                                                         \n                      \"types\": [                                                                              \n                        \"object\",                                                                             \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"hana\",                                                                        \n                      \"word\": \"hana\",                                                                         \n                      \"paraphrase\": true,                                                                     \n                      \"possessive\": false                                                                     \n                    }                                                                                         \n          STACK     Context#2: call10,call11,call12,call13                                                    \n          RESULT    hana                                                                                      \n",
        "Generator           KM 'properties' ordinal: 0  notes: \"add possession ending\"                                \n          APPLIED   Generator(({context}) => context.paraphrase && context.possessive, ({context, g}) => {    \n                            context.possessive = false                                                        \n                            const phrase = g(context)                                                         \n                            context.possessive = true                                                         \n                            if (phrase.endsWith('s')) {                                                       \n                              return `${phrase}'`                                                             \n                            } else {                                                                          \n                              return `${phrase}'s`                                                            \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"hana\",                                                                         \n                      \"types\": [                                                                              \n                        \"object\",                                                                             \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"hana\",                                                                        \n                      \"word\": \"hana\",                                                                         \n                      \"paraphrase\": true,                                                                     \n                      \"possessive\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call10,call11,call12                                                           \n          RESULT    hana's                                                                                    \n",
        "Generator           KM 'dialogues' ordinal: 25                                                                \n          APPLIED   Generator(({context}) => context.paraphrase && context.word, ({context}) => `${context.wor\n                    d}`)                                                                                      \n          TO        {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"text\": \"name\",                                                                         \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"name\",                                                                        \n                      \"word\": \"name\",                                                                         \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call10,call11,call14                                                           \n          RESULT    name                                                                                      \n",
        "Generator           KM 'properties' ordinal: 11  notes: \"object's property\"                                   \n          APPLIED   Generator(({context}) => !context.modifiers && context.object, ({context, g, gs}) => {    \n                                   if (context.objects) {                                                     \n                                     const objects = [ ...context.objects ]                                   \n                                     objects.reverse()                                                        \n                                     let phrase = ''                                                          \n                                     let separator = ''                                                       \n                                     for (let i = 0; i < objects.length-1; ++i) {                             \n                                       phrase = phrase + separator + g({...objects[i], paraphrase: context.par\n                    aphrase, possessive: true})                                                               \n                                       separator = ' '                                                        \n                                     }                                                                        \n                                     phrase = phrase + separator + g({...objects[objects.length-1], paraphrase\n                    : context.paraphrase})                                                                    \n                                     return phrase                                                            \n                                   } else {                                                                   \n                                     const base = { ...context }                                              \n                                     base.object = undefined; // TODO make paraphrase be a default when paraph\n                    rasing?                                                                                   \n                                     if (context.object.marker == 'objectPrefix') {                           \n                                       return `${g(context.object)} ${g(base)}`                               \n                                     } else {                                                                 \n                                       return `${g({...context.object, paraphrase: context.paraphrase})}'s ${g\n                    (base)}`                                                                                  \n                                     }                                                                        \n                                   }                                                                          \n                                 })                                                                           \n          TO        {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"object\": {                                                                             \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hana\",                                                                       \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hana\",                                                                      \n                        \"word\": \"hana\"                                                                        \n                      },                                                                                      \n                      \"objects\": [                                                                            \n                        {                                                                                     \n                          \"marker\": \"property\",                                                               \n                          \"text\": \"name\",                                                                     \n                          \"types\": [                                                                          \n                            \"property\"                                                                        \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"name\",                                                                    \n                          \"word\": \"name\"                                                                      \n                        },                                                                                    \n                        {                                                                                     \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"hana\",                                                                     \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"hana\",                                                                    \n                          \"word\": \"hana\"                                                                      \n                        }                                                                                     \n                      ],                                                                                      \n                      \"text\": \"hana 's name\",                                                                 \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"name\",                                                                        \n                      \"word\": \"name\",                                                                         \n                      \"response\": true,                                                                       \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call10,call11                                                                  \n          RESULT    hana's name                                                                               \n",
        "Generator           KM 'dialogues' ordinal: 14                                                                \n          APPLIED   Generator(({context}) => context.marker == 'unknown', ({context}) => {                    \n                            if (typeof context.marker === 'string') {                                         \n                              return context.value                                                            \n                            } else {                                                                          \n                              JSON.stringify(context.value)                                                   \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"hana\",                                                                         \n                      \"types\": [                                                                              \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"hana\",                                                                        \n                      \"word\": \"hana\",                                                                         \n                      \"response\": true,                                                                       \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call10,call15                                                                  \n          RESULT    hana                                                                                      \n",
        "Generator           KM 'dialogues' ordinal: 22  notes: \"x is y\"                                               \n          APPLIED   Generator(({context, hierarchy}) => { return hierarchy.isA(context.marker, 'is') && contex\n                    t.paraphrase }, ({context, g}) => {                                                       \n                            context.one.response = true                                                       \n                            context.two.response = true                                                       \n                            return `${g({ ...context.one, paraphrase: true })} ${context.word} ${g(context.two\n                    )}`                                                                                       \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"default\": true,                                                                        \n                      \"marker\": \"is\",                                                                         \n                      \"one\": {                                                                                \n                        \"marker\": \"property\",                                                                 \n                        \"object\": {                                                                           \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"hana\",                                                                     \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"hana\",                                                                    \n                          \"word\": \"hana\"                                                                      \n                        },                                                                                    \n                        \"objects\": [                                                                          \n                          {                                                                                   \n                            \"marker\": \"property\",                                                             \n                            \"text\": \"name\",                                                                   \n                            \"types\": [                                                                        \n                              \"property\"                                                                      \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"name\",                                                                  \n                            \"word\": \"name\"                                                                    \n                          },                                                                                  \n                          {                                                                                   \n                            \"marker\": \"unknown\",                                                              \n                            \"text\": \"hana\",                                                                   \n                            \"types\": [                                                                        \n                              \"object\",                                                                       \n                              \"unknown\"                                                                       \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"hana\",                                                                  \n                            \"word\": \"hana\"                                                                    \n                          }                                                                                   \n                        ],                                                                                    \n                        \"text\": \"hana 's name\",                                                               \n                        \"types\": [                                                                            \n                          \"property\"                                                                          \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"name\",                                                                      \n                        \"word\": \"name\",                                                                       \n                        \"response\": true                                                                      \n                      },                                                                                      \n                      \"text\": \"hana 's name is hana\",                                                         \n                      \"two\": {                                                                                \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hana\",                                                                       \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hana\",                                                                      \n                        \"word\": \"hana\",                                                                       \n                        \"response\": true                                                                      \n                      },                                                                                      \n                      \"word\": \"is\",                                                                           \n                      \"topLevel\": true,                                                                       \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call10                                                                         \n          RESULT    hana's name is hana                                                                       \n",
        "Semantic            No semantic applied                                                                       \n          TO        {                                                                                         \n                      \"marker\": \"controlEnd\",                                                                 \n                      \"controlRemove\": true,                                                                  \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n"
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "possession",
                0
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "possession",
                0
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "possession",
                0
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "possession",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "possession",
                0
              ]
            ]
          },
          {
            "op": [
              "possession",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "possession",
                1
              ]
            ]
          },
          {
            "op": [
              "property",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "property",
                0
              ]
            ]
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ]
            ]
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ]
          }
        ]
      },
      "times": 1.215071439743042,
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  - \"hana\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: hana\n                                   text: hana\n                                   value: hana\n    1. possession/0  - \"'s\"\n                                   value: possession\n                                   text: 's\n                                   marker: Operator(possession/0, [Selector(Bridge('{ ...next(operator), object: before[0], objects: before }'), [Type('object')]<==>[])], evaluator(Bridge('{ ...next(operator), object: before[0], objects: before }')), variables({}), inverted)\n                                   word: 's\n    2. unknown/0  - \"name\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: name\n                                   text: name\n                                   value: name\n    3. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n    4. unknown/0  - \"hana\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: hana\n                                   text: hana\n                                   value: hana\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({'marker': Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana'})\n\n>>>>>>>>>>>>> Counter 2\n   *0. unknown/1  - \"hana\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: hana\n                                   text: hana\n                                   value: hana\n                                   unknown: True\n    1. possession/0  - \"'s\"\n                                   value: possession\n                                   text: 's\n                                   marker: Operator(possession/0, [Selector(Bridge('{ ...next(operator), object: before[0], objects: before }'), [Type('object')]<==>[])], evaluator(Bridge('{ ...next(operator), object: before[0], objects: before }')), variables({}), inverted)\n                                   word: 's\n    2. unknown/0  - \"name\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: name\n                                   text: name\n                                   value: name\n    3. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n    4. unknown/0  - \"hana\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: hana\n                                   text: hana\n                                   value: hana\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({'marker': Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({})), 'word': 'name', 'text': 'name', 'value': 'name'})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/1  - \"hana\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: hana\n                                   text: hana\n                                   value: hana\n                                   unknown: True\n    1. possession/0  - \"'s\"\n                                   value: possession\n                                   text: 's\n                                   marker: Operator(possession/0, [Selector(Bridge('{ ...next(operator), object: before[0], objects: before }'), [Type('object')]<==>[])], evaluator(Bridge('{ ...next(operator), object: before[0], objects: before }')), variables({}), inverted)\n                                   word: 's\n   *2. unknown/1  - \"name\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: name\n                                   text: name\n                                   value: name\n                                   unknown: True\n    3. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n    4. unknown/0  - \"hana\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: hana\n                                   text: hana\n                                   value: hana\n<<<<<<<<<<<<<\nNext Op (index=4) is Context({'marker': Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana'})\n\n>>>>>>>>>>>>> Counter 4\n    0. unknown/1  - \"hana\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: hana\n                                   text: hana\n                                   value: hana\n                                   unknown: True\n    1. possession/0  - \"'s\"\n                                   value: possession\n                                   text: 's\n                                   marker: Operator(possession/0, [Selector(Bridge('{ ...next(operator), object: before[0], objects: before }'), [Type('object')]<==>[])], evaluator(Bridge('{ ...next(operator), object: before[0], objects: before }')), variables({}), inverted)\n                                   word: 's\n    2. unknown/1  - \"name\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: name\n                                   text: name\n                                   value: name\n                                   unknown: True\n    3. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n   *4. unknown/1  - \"hana\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: hana\n                                   text: hana\n                                   value: hana\n                                   unknown: True\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({'value': 'possession', 'text': \"'s\", 'marker': Operator(possession/0, [Selector(Bridge('{ ...next(operator), object: before[0], objects: before }'), [Type('object')]<==>[])], evaluator(Bridge('{ ...next(operator), object: before[0], objects: before }')), variables({}), inverted), 'word': \"'s\"})\n\n>>>>>>>>>>>>> Counter 5\n   *0. possession/1  - \"hana 's\"\n                                   value: possession\n                                   text: hana 's\n                                   marker: Operator(possession/1, PASS, [Selector(Bridge('{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }'), []<==>[Type('property')])], evaluator(Bridge('{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: o\n                                   word: 's\n                                   object: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True, 'types': ['unknown', 'object']})\n                                   objects: [\n                                     marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                     word: hana\n                                     text: hana\n                                     value: hana\n                                     unknown: True\n                                     types: [\n                                     'unknown'\n,                                      'object'\n                                     ]\n                                   ]\n    1. unknown/1  - \"name\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: name\n                                   text: name\n                                   value: name\n                                   unknown: True\n    2. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n    3. unknown/1  - \"hana\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: hana\n                                   text: hana\n                                   value: hana\n                                   unknown: True\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({'value': 'possession', 'text': \"hana 's\", 'marker': Operator(possession/1, PASS, [Selector(Bridge('{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }'), []<==>[Type('property')])], evaluator(Bridge('{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }')), variables({}), inverted), 'word': \"'s\", 'object': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True, 'types': ['unknown', 'object']}), 'objects': [Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True, 'types': ['unknown', 'object']})]})\n\n>>>>>>>>>>>>> Counter 6\n   *0. property/0  - \"hana 's name\"\n                                   marker: Operator(property/0, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({}))\n                                   word: name\n                                   text: hana 's name\n                                   value: name\n                                   unknown: True\n                                   types: [\n                                   'property'\n                                   ]\n                                   object: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True, 'types': ['unknown', 'object']})\n                                   objects: [\n                                     marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                     word: name\n                                     text: name\n                                     value: name\n                                     unknown: True\n                                     types: [\n                                     'property'\n                                     ]\n\n                                     marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                     word: hana\n                                     text: hana\n                                     value: hana\n                                     unknown: True\n                                     types: [\n                                     'unknown'\n,                                      'object'\n                                     ]\n                                   ]\n    1. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n    2. unknown/1  - \"hana\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: hana\n                                   text: hana\n                                   value: hana\n                                   unknown: True\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({'marker': Operator(property/0, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({})), 'word': 'name', 'text': \"hana 's name\", 'value': 'name', 'unknown': True, 'types': ['property'], 'object': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True, 'types': ['unknown', 'object']}), 'objects': [Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'name', 'text': 'name', 'value': 'name', 'unknown': True, 'types': ['property']}), Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True, 'types': ['unknown', 'object']})]})\n\n>>>>>>>>>>>>> Counter 7\n   *0. property/1  - \"hana 's name\"\n                                   marker: Operator(property/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: name\n                                   text: hana 's name\n                                   value: name\n                                   unknown: True\n                                   types: [\n                                   'property'\n                                   ]\n                                   object: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True, 'types': ['unknown', 'object']})\n                                   objects: [\n                                     marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                     word: name\n                                     text: name\n                                     value: name\n                                     unknown: True\n                                     types: [\n                                     'property'\n                                     ]\n\n                                     marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                     word: hana\n                                     text: hana\n                                     value: hana\n                                     unknown: True\n                                     types: [\n                                     'unknown'\n,                                      'object'\n                                     ]\n                                   ]\n    1. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n    2. unknown/1  - \"hana\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: hana\n                                   text: hana\n                                   value: hana\n                                   unknown: True\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({'marker': Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({})), 'default': True, 'word': 'is', 'text': 'is'})\n\n>>>>>>>>>>>>> Counter 8\n   *0. is/1  - \"hana 's name is hana\"\n                                   marker: Operator(is/1, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: hana 's name is hana\n                                   one: Context({'marker': Operator(property/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'name', 'text': \"hana 's name\", 'value': 'name', 'unknown': True, 'types': ['property', 'property'], 'object': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value':\n                                   two: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True, 'types': ['unknown']})\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({'marker': Operator(is/1, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({})), 'default': True, 'word': 'is', 'text': \"hana 's name is hana\", 'one': Context({'marker': Operator(property/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'name', 'text': \"hana 's name\", 'value': 'name', 'unknown': True, 'types': ['property', 'property'], 'object': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True, 'types': ['unknown', 'object']}), 'objects': [Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'name', 'text': 'name', 'value': 'name', 'unknown': True, 'types': ['property', 'property']}), Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True, 'types': ['unknown', 'object']})]}), 'two': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True, 'types': ['unknown']})})\n\n>>>>>>>>>>>>> Counter 9\n   *0. is/2  - \"hana 's name is hana\"\n                                   marker: Operator(is/2, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   default: True\n                                   word: is\n                                   text: hana 's name is hana\n                                   one: Context({'marker': Operator(property/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'name', 'text': \"hana 's name\", 'value': 'name', 'unknown': True, 'types': ['property', 'property'], 'object': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value':\n                                   two: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True, 'types': ['unknown']})\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "default": true,
          "marker": "is",
          "one": {
            "marker": "property",
            "object": {
              "marker": "unknown",
              "text": "hana",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "hana",
              "word": "hana"
            },
            "objects": [
              {
                "marker": "property",
                "text": "name",
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": "name",
                "word": "name"
              },
              {
                "marker": "unknown",
                "text": "hana",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "hana",
                "word": "hana"
              }
            ],
            "text": "hana 's name",
            "types": [
              "property"
            ],
            "unknown": true,
            "value": "name",
            "word": "name",
            "response": true
          },
          "text": "hana 's name is hana",
          "two": {
            "marker": "unknown",
            "text": "hana",
            "types": [
              "unknown"
            ],
            "unknown": true,
            "value": "hana",
            "word": "hana",
            "response": true
          },
          "word": "is",
          "topLevel": true
        }
      ],
      "generated": [
        "hana's name is hana"
      ],
      "paraphrases": [
        "hana's name is hana"
      ],
      "responses": [
        ""
      ],
      "memory_free_percent": 69.5,
      "version": "6.13.45-beta.10",
      "query": "hana's name is hana"
    },
    {
      "hierarchy": [
        [
          "hate",
          "canBeQuestion"
        ],
        [
          "sushi",
          "hierarchyAble"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "food",
          "queryable"
        ],
        [
          "pidgeon",
          "queryable"
        ],
        [
          "human",
          "theAble"
        ],
        [
          "love",
          "canBeQuestion"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "owl",
          "theAble"
        ],
        [
          "dislike",
          "canBeDoQuestion"
        ],
        [
          "self",
          "queryable"
        ],
        [
          "dislike",
          "ifAble"
        ],
        [
          "parrot",
          "object"
        ],
        [
          "bird",
          "theAble"
        ],
        [
          "like",
          "orAble"
        ],
        [
          "dog",
          "object"
        ],
        [
          "canBeDoQuestion",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "mammal",
          "hierarchyAble"
        ],
        [
          "chicken_strip",
          "hierarchyAble"
        ],
        [
          "does_after_canBeDoQuestion_doesAble",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "cat",
          "queryable"
        ],
        [
          "mammal",
          "queryable"
        ],
        [
          "love",
          "canBeDoQuestion"
        ],
        [
          "dog",
          "queryable"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "hate",
          "canBeDoQuestion"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "human",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "feline",
          "queryable"
        ],
        [
          "strip",
          "theAble"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "bat",
          "queryable"
        ],
        [
          "like",
          "canBeQuestion"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "wolf",
          "object"
        ],
        [
          "dislike",
          "canBeQuestion"
        ],
        [
          "like",
          "ifAble"
        ],
        [
          "animal",
          "theAble"
        ],
        [
          "bird",
          "hierarchyAble"
        ],
        [
          "pidgeon",
          "hierarchyAble"
        ],
        [
          "strip",
          "concept"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "animal",
          "object"
        ],
        [
          "canine",
          "hierarchyAble"
        ],
        [
          "strip",
          "hierarchyAble"
        ],
        [
          "mammal",
          "object"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "have",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "questionMark_before_canBeQuestion_have",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "owl",
          "queryable"
        ],
        [
          "bat",
          "theAble"
        ],
        [
          "wolf",
          "hierarchyAble"
        ],
        [
          "food",
          "object"
        ],
        [
          "chicken_strip",
          "strip"
        ],
        [
          "strip",
          "queryable"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "feline",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "sushi",
          "object"
        ],
        [
          "parrot",
          "hierarchyAble"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "human",
          "object"
        ],
        [
          "hate",
          "orAble"
        ],
        [
          "animal",
          "queryable"
        ],
        [
          "canine",
          "theAble"
        ],
        [
          "animal",
          "hierarchyAble"
        ],
        [
          "pidgeon",
          "theAble"
        ],
        [
          "want",
          "ifAble"
        ],
        [
          "concept",
          "concept"
        ],
        [
          "wolf",
          "theAble"
        ],
        [
          "feline",
          "hierarchyAble"
        ],
        [
          "parrot",
          "theAble"
        ],
        [
          "bird",
          "object"
        ],
        [
          "want",
          "canBeQuestion"
        ],
        [
          "doesAble",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "eagle",
          "queryable"
        ],
        [
          "dislike",
          "orAble"
        ],
        [
          "whose",
          "object"
        ],
        [
          "dog",
          "theAble"
        ],
        [
          "parrot",
          "queryable"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "eagle",
          "object"
        ],
        [
          "mammal",
          "theAble"
        ],
        [
          "canBeQuestion",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "cat",
          "theAble"
        ],
        [
          "eagle",
          "hierarchyAble"
        ],
        [
          "cat",
          "object"
        ],
        [
          "feline",
          "object"
        ],
        [
          "food",
          "theAble"
        ],
        [
          "bird",
          "queryable"
        ],
        [
          "sushi",
          "theAble"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "owl",
          "object"
        ],
        [
          "canine",
          "object"
        ],
        [
          "love",
          "ifAble"
        ],
        [
          "bat",
          "hierarchyAble"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "pidgeon",
          "object"
        ],
        [
          "human",
          "hierarchyAble"
        ],
        [
          "food",
          "hierarchyAble"
        ],
        [
          "dog",
          "hierarchyAble"
        ],
        [
          "want",
          "canBeDoQuestion"
        ],
        [
          "want",
          "orAble"
        ],
        [
          "sushi",
          "queryable"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "wolf",
          "queryable"
        ],
        [
          "owl",
          "hierarchyAble"
        ],
        [
          "cat",
          "hierarchyAble"
        ],
        [
          "like",
          "canBeDoQuestion"
        ],
        [
          "love",
          "orAble"
        ],
        [
          "hate",
          "ifAble"
        ],
        [
          "eagle",
          "theAble"
        ],
        [
          "bat",
          "object"
        ],
        [
          "canine",
          "queryable"
        ],
        [
          "property",
          "queryable"
        ]
      ],
      "load_cache_time": 0.019496917724609375,
      "logs": [
        "Undefined word 'hana'",
        "Undefined word 'age'",
        "Undefined word '21'",
        "Op choices were: [(('unknown', 0), [('is', 0), ('possession', 0), ('unknown', 0)]), (('unknown', 0), [('is', 0), ('possession', 0), ('unknown', 0)]), (('unknown', 0), [('is', 0), ('possession', 0), ('unknown', 0)]), (('possession', 0), [('is', 0), ('possession', 0)]), (('possession', 1), [('is', 0), ('possession', 1)]), (('property', 0), [('is', 0), ('property', 0)]), (('is', 0), [('is', 0)]), (('is', 1), [('is', 1)])]",
        "Contexts used for choosing operators (if the wrong choices were made update the priories array. Put the expected choice at the end of the list): \n  Context for choosing the operator unknown/0 was [['is', 0], ['possession', 0], ['unknown', 0]]\n  Context for choosing the operator unknown/0 was [['is', 0], ['possession', 0], ['unknown', 0]]\n  Context for choosing the operator unknown/0 was [['is', 0], ['possession', 0], ['unknown', 0]]\n  Context for choosing the operator possession/0 was [['is', 0], ['possession', 0]]\n  Context for choosing the operator possession/1 was [['is', 0], ['possession', 1]]\n  Context for choosing the operator property/0 was [['is', 0], ['property', 0]]\n  Context for choosing the operator is/0 was [['is', 0]]\n  Context for choosing the operator is/1 was [['is', 1]]",
        "",
        "Semantic            No semantic applied                                                                       \n          TO        {                                                                                         \n                      \"marker\": \"controlStart\",                                                               \n                      \"controlRemove\": true,                                                                  \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n",
        "Semantic            KM 'properties' ordinal: 5  notes: \"set the property of an object\"                        \n          APPLIED   Semantic(({context}) => context.marker == 'property' && context.same && context.object, ({\n                    context, objects, km, api}) => {                                                          \n                            const objectContext = context.object;                                             \n                            const propertyContext = context;                                                  \n                            const objectId = context.object.value                                             \n                            const propertyId = context.value                                                  \n                            try{                                                                              \n                              // greg                                                                         \n                              // api.makeObject({config, context: objectContext, doPluralize: false})         \n                              // api.addWord(propertyContext)                                                 \n                              // api.addWord(objectContext)                                                   \n                              api.setProperty(pluralize.singular(objectId), pluralize.singular(propertyId), co\n                    ntext.same, true)                                                                         \n                              context.sameWasProcessed = true                                                 \n                            } catch (e) {                                                                     \n                              const config = km('properties')                                                 \n                              const fragment = config.fragment(\"the property1 of object1 is value1\")          \n                              const value = api.getProperty(objectId, propertyId)                             \n                              if (value.value == context.same.value) {                                        \n                                context.response = [                                                          \n                                  { marker: 'yesno', value: true, paraphrase: true },                         \n                                ]                                                                             \n                                context.sameWasProcessed = true                                               \n                              } else {                                                                        \n                                const mappings = [                                                            \n                                  {                                                                           \n                                    match: ({context}) => context.value == 'property1',                       \n                                    apply: ({context}) => Object.assign(context, { word: propertyContext.word,\n                     value: propertyContext.value, paraphrase: true }),                                       \n                                  },                                                                          \n                                  {                                                                           \n                                    match: ({context}) => context.value == 'object1',                         \n                                    apply: ({context}) => {                                                   \n                                      Object.assign(context, { word: objectContext.word, value: objectContext.\n                    value, paraphrase: true })                                                                \n                                    },                                                                        \n                                  },                                                                          \n                                  {                                                                           \n                                    match: ({context}) => context.value == 'value1',                          \n                                    apply: ({context}) => Object.assign(context, value),                      \n                                  },                                                                          \n                                ]                                                                             \n                                // run the query 'the property of object' then copy that here and template it \n                                context.response = {                                                          \n                                  verbatim: \"no way hose\"                                                     \n                                }                                                                             \n                                context.response = [                                                          \n                                  { marker: 'yesno', value: false, paraphrase: true },                        \n                                ]                                                                             \n                                context.response = context.response.concat(fragment.instantiate(mappings))    \n                                context.response.forEach( (r) => r.paraphrase = true )                        \n                                context.sameWasProcessed = true                                               \n                              }                                                                               \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"object\": {                                                                             \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hana\",                                                                       \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hana\",                                                                      \n                        \"word\": \"hana\"                                                                        \n                      },                                                                                      \n                      \"objects\": [                                                                            \n                        {                                                                                     \n                          \"marker\": \"property\",                                                               \n                          \"text\": \"age\",                                                                      \n                          \"types\": [                                                                          \n                            \"property\"                                                                        \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"age\",                                                                     \n                          \"word\": \"age\"                                                                       \n                        },                                                                                    \n                        {                                                                                     \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"hana\",                                                                     \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"hana\",                                                                    \n                          \"word\": \"hana\"                                                                      \n                        }                                                                                     \n                      ],                                                                                      \n                      \"text\": \"hana 's age\",                                                                  \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"age\",                                                                         \n                      \"word\": \"age\",                                                                          \n                      \"same\": {                                                                               \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"21\",                                                                         \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"21\",                                                                        \n                        \"word\": \"21\",                                                                         \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"response\": null                                                                        \n                    }                                                                                         \n          STACK     Context#2: call2,call3                                                                    \n          RESULT    {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"object\": {                                                                             \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hana\",                                                                       \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hana\",                                                                      \n                        \"word\": \"hana\"                                                                        \n                      },                                                                                      \n                      \"objects\": [                                                                            \n                        {                                                                                     \n                          \"marker\": \"property\",                                                               \n                          \"text\": \"age\",                                                                      \n                          \"types\": [                                                                          \n                            \"property\"                                                                        \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"age\",                                                                     \n                          \"word\": \"age\"                                                                       \n                        },                                                                                    \n                        {                                                                                     \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"hana\",                                                                     \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"hana\",                                                                    \n                          \"word\": \"hana\"                                                                      \n                        }                                                                                     \n                      ],                                                                                      \n                      \"text\": \"hana 's age\",                                                                  \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"age\",                                                                         \n                      \"word\": \"age\",                                                                          \n                      \"same\": {                                                                               \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"21\",                                                                         \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"21\",                                                                        \n                        \"word\": \"21\",                                                                         \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"response\": null,                                                                       \n                      \"sameWasProcessed\": true                                                                \n                    }                                                                                         \n",
        "Semantic            KM 'dialogues' ordinal: 4  notes: \"x is y\"                                                \n          APPLIED   Semantic(({context}) => context.marker == 'is' && !context.query && context.one && context\n                    .two, ({context, s, log}) => {                                                            \n                            const one = context.one;                                                          \n                            const two = context.two;                                                          \n                            one.same = two;                                                                   \n                            one.response = null                                                               \n                            two.response = null                                                               \n                            const onePrime = s(one)                                                           \n                            if (!onePrime.sameWasProcessed) {                                                 \n                              warningSameNotEvaluated(log, context, one)                                      \n                            } else {                                                                          \n                              if (onePrime.response) {                                                        \n                                context.response = onePrime.response                                          \n                              }                                                                               \n                            }                                                                                 \n                            one.same = undefined                                                              \n                            let twoPrime;                                                                     \n                            if (!onePrime.sameWasProcessed) {                                                 \n                              two.same = one                                                                  \n                              twoPrime = s(two)                                                               \n                              if (!twoPrime.sameWasProcessed) {                                               \n                                warningSameNotEvaluated(log, context, two)                                    \n                              } else {                                                                        \n                                if (twoPrime.response) {                                                      \n                                  context.response = twoPrime.response                                        \n                                }                                                                             \n                              }                                                                               \n                              two.same = undefined                                                            \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"default\": true,                                                                        \n                      \"marker\": \"is\",                                                                         \n                      \"one\": {                                                                                \n                        \"marker\": \"property\",                                                                 \n                        \"object\": {                                                                           \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"hana\",                                                                     \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"hana\",                                                                    \n                          \"word\": \"hana\"                                                                      \n                        },                                                                                    \n                        \"objects\": [                                                                          \n                          {                                                                                   \n                            \"marker\": \"property\",                                                             \n                            \"text\": \"age\",                                                                    \n                            \"types\": [                                                                        \n                              \"property\"                                                                      \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"age\",                                                                   \n                            \"word\": \"age\"                                                                     \n                          },                                                                                  \n                          {                                                                                   \n                            \"marker\": \"unknown\",                                                              \n                            \"text\": \"hana\",                                                                   \n                            \"types\": [                                                                        \n                              \"object\",                                                                       \n                              \"unknown\"                                                                       \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"hana\",                                                                  \n                            \"word\": \"hana\"                                                                    \n                          }                                                                                   \n                        ],                                                                                    \n                        \"text\": \"hana 's age\",                                                                \n                        \"types\": [                                                                            \n                          \"property\"                                                                          \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"age\",                                                                       \n                        \"word\": \"age\",                                                                        \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"text\": \"hana 's age is 21\",                                                            \n                      \"two\": {                                                                                \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"21\",                                                                         \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"21\",                                                                        \n                        \"word\": \"21\",                                                                         \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"word\": \"is\",                                                                           \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n          STACK     Context#2: call2                                                                          \n          RESULT    {                                                                                         \n                      \"default\": true,                                                                        \n                      \"marker\": \"is\",                                                                         \n                      \"one\": {                                                                                \n                        \"marker\": \"property\",                                                                 \n                        \"object\": {                                                                           \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"hana\",                                                                     \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"hana\",                                                                    \n                          \"word\": \"hana\"                                                                      \n                        },                                                                                    \n                        \"objects\": [                                                                          \n                          {                                                                                   \n                            \"marker\": \"property\",                                                             \n                            \"text\": \"age\",                                                                    \n                            \"types\": [                                                                        \n                              \"property\"                                                                      \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"age\",                                                                   \n                            \"word\": \"age\"                                                                     \n                          },                                                                                  \n                          {                                                                                   \n                            \"marker\": \"unknown\",                                                              \n                            \"text\": \"hana\",                                                                   \n                            \"types\": [                                                                        \n                              \"object\",                                                                       \n                              \"unknown\"                                                                       \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"hana\",                                                                  \n                            \"word\": \"hana\"                                                                    \n                          }                                                                                   \n                        ],                                                                                    \n                        \"text\": \"hana 's age\",                                                                \n                        \"types\": [                                                                            \n                          \"property\"                                                                          \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"age\",                                                                       \n                        \"word\": \"age\",                                                                        \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"text\": \"hana 's age is 21\",                                                            \n                      \"two\": {                                                                                \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"21\",                                                                         \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"21\",                                                                        \n                        \"word\": \"21\",                                                                         \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"word\": \"is\",                                                                           \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n",
        "Generator           KM 'dialogues' ordinal: 14                                                                \n          APPLIED   Generator(({context}) => context.marker == 'unknown', ({context}) => {                    \n                            if (typeof context.marker === 'string') {                                         \n                              return context.value                                                            \n                            } else {                                                                          \n                              JSON.stringify(context.value)                                                   \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"hana\",                                                                         \n                      \"types\": [                                                                              \n                        \"object\",                                                                             \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"hana\",                                                                        \n                      \"word\": \"hana\",                                                                         \n                      \"paraphrase\": true,                                                                     \n                      \"possessive\": false,                                                                    \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call5,call6,call7                                                        \n          RESULT    hana                                                                                      \n",
        "Generator           KM 'properties' ordinal: 0  notes: \"add possession ending\"                                \n          APPLIED   Generator(({context}) => context.paraphrase && context.possessive, ({context, g}) => {    \n                            context.possessive = false                                                        \n                            const phrase = g(context)                                                         \n                            context.possessive = true                                                         \n                            if (phrase.endsWith('s')) {                                                       \n                              return `${phrase}'`                                                             \n                            } else {                                                                          \n                              return `${phrase}'s`                                                            \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"hana\",                                                                         \n                      \"types\": [                                                                              \n                        \"object\",                                                                             \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"hana\",                                                                        \n                      \"word\": \"hana\",                                                                         \n                      \"paraphrase\": true,                                                                     \n                      \"possessive\": true,                                                                     \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call5,call6                                                              \n          RESULT    hana's                                                                                    \n",
        "Generator           KM 'dialogues' ordinal: 25                                                                \n          APPLIED   Generator(({context}) => context.paraphrase && context.word, ({context}) => `${context.wor\n                    d}`)                                                                                      \n          TO        {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"text\": \"age\",                                                                          \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"age\",                                                                         \n                      \"word\": \"age\",                                                                          \n                      \"paraphrase\": true,                                                                     \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call5,call8                                                              \n          RESULT    age                                                                                       \n",
        "Generator           KM 'properties' ordinal: 11  notes: \"object's property\"                                   \n          APPLIED   Generator(({context}) => !context.modifiers && context.object, ({context, g, gs}) => {    \n                                   if (context.objects) {                                                     \n                                     const objects = [ ...context.objects ]                                   \n                                     objects.reverse()                                                        \n                                     let phrase = ''                                                          \n                                     let separator = ''                                                       \n                                     for (let i = 0; i < objects.length-1; ++i) {                             \n                                       phrase = phrase + separator + g({...objects[i], paraphrase: context.par\n                    aphrase, possessive: true})                                                               \n                                       separator = ' '                                                        \n                                     }                                                                        \n                                     phrase = phrase + separator + g({...objects[objects.length-1], paraphrase\n                    : context.paraphrase})                                                                    \n                                     return phrase                                                            \n                                   } else {                                                                   \n                                     const base = { ...context }                                              \n                                     base.object = undefined; // TODO make paraphrase be a default when paraph\n                    rasing?                                                                                   \n                                     if (context.object.marker == 'objectPrefix') {                           \n                                       return `${g(context.object)} ${g(base)}`                               \n                                     } else {                                                                 \n                                       return `${g({...context.object, paraphrase: context.paraphrase})}'s ${g\n                    (base)}`                                                                                  \n                                     }                                                                        \n                                   }                                                                          \n                                 })                                                                           \n          TO        {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"object\": {                                                                             \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hana\",                                                                       \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hana\",                                                                      \n                        \"word\": \"hana\"                                                                        \n                      },                                                                                      \n                      \"objects\": [                                                                            \n                        {                                                                                     \n                          \"marker\": \"property\",                                                               \n                          \"text\": \"age\",                                                                      \n                          \"types\": [                                                                          \n                            \"property\"                                                                        \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"age\",                                                                     \n                          \"word\": \"age\"                                                                       \n                        },                                                                                    \n                        {                                                                                     \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"hana\",                                                                     \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"hana\",                                                                    \n                          \"word\": \"hana\"                                                                      \n                        }                                                                                     \n                      ],                                                                                      \n                      \"text\": \"hana 's age\",                                                                  \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"age\",                                                                         \n                      \"word\": \"age\",                                                                          \n                      \"response\": null,                                                                       \n                      \"paraphrase\": true,                                                                     \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call5                                                                    \n          RESULT    hana's age                                                                                \n",
        "Generator           KM 'dialogues' ordinal: 7  notes: \"paraphrase a queryable\"                                \n          APPLIED   Generator(({context, hierarchy}) => hierarchy.isA(context.marker, 'queryable') && !context\n                    .isQuery && !context.paraphrase && context.value, ({context, g}) => {                     \n                            const oldValue = context.value.paraphrase                                         \n                            context.value.paraphrase = true                                                   \n                            const result = g(context.value)                                                   \n                            context.value.paraphrase = oldValue                                               \n                            return result                                                                     \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"21\",                                                                           \n                      \"types\": [                                                                              \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"21\",                                                                          \n                      \"word\": \"21\",                                                                           \n                      \"response\": null,                                                                       \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call9                                                                    \n          RESULT    21                                                                                        \n",
        "Generator           KM 'dialogues' ordinal: 24  notes: \"x is y (not a response)\"                              \n          APPLIED   Generator(({context, hierarchy}) => hierarchy.isA(context.marker, 'is') && !context.respon\n                    se, ({context, g}) => {                                                                   \n                            // return `${g({ ...context.one, paraphrase: true })} ${isMany(context.one) || isM\n                    any(context.two) || isMany(context) ? \"are\" : \"is\"} ${g(context.two)}`                    \n                            // response or not response -> paraphrase                                         \n                            // the age of greg is the age -> age is 23    -> first only missing paraphrase mar\n                    ker because it is coming from the context                                                 \n                            // your name is greg --response--> your name is greg // should be my name         \n                            // return `${g({...context.one, paraphrase: context.paraphrase})} ${isMany(context\n                    .one) || isMany(context.two) || isMany(context) ? \"are\" : \"is\"} ${g(context.two)}`        \n                            return `${g({...context.one, paraphrase: true})} ${isMany(context.one) || isMany(c\n                    ontext.two) || isMany(context) ? \"are\" : \"is\"} ${g(context.two)}`                         \n                            // return `${g({...context.one})} ${isMany(context.one) || isMany(context.two) || \n                    isMany(context) ? \"are\" : \"is\"} ${g(context.two)}`                                        \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"default\": true,                                                                        \n                      \"marker\": \"is\",                                                                         \n                      \"one\": {                                                                                \n                        \"marker\": \"property\",                                                                 \n                        \"object\": {                                                                           \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"hana\",                                                                     \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"hana\",                                                                    \n                          \"word\": \"hana\"                                                                      \n                        },                                                                                    \n                        \"objects\": [                                                                          \n                          {                                                                                   \n                            \"marker\": \"property\",                                                             \n                            \"text\": \"age\",                                                                    \n                            \"types\": [                                                                        \n                              \"property\"                                                                      \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"age\",                                                                   \n                            \"word\": \"age\"                                                                     \n                          },                                                                                  \n                          {                                                                                   \n                            \"marker\": \"unknown\",                                                              \n                            \"text\": \"hana\",                                                                   \n                            \"types\": [                                                                        \n                              \"object\",                                                                       \n                              \"unknown\"                                                                       \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"hana\",                                                                  \n                            \"word\": \"hana\"                                                                    \n                          }                                                                                   \n                        ],                                                                                    \n                        \"text\": \"hana 's age\",                                                                \n                        \"types\": [                                                                            \n                          \"property\"                                                                          \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"age\",                                                                       \n                        \"word\": \"age\",                                                                        \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"text\": \"hana 's age is 21\",                                                            \n                      \"two\": {                                                                                \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"21\",                                                                         \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"21\",                                                                        \n                        \"word\": \"21\",                                                                         \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"word\": \"is\",                                                                           \n                      \"topLevel\": true,                                                                       \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4                                                                          \n          RESULT    hana's age is 21                                                                          \n",
        "Generator           KM 'dialogues' ordinal: 14                                                                \n          APPLIED   Generator(({context}) => context.marker == 'unknown', ({context}) => {                    \n                            if (typeof context.marker === 'string') {                                         \n                              return context.value                                                            \n                            } else {                                                                          \n                              JSON.stringify(context.value)                                                   \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"hana\",                                                                         \n                      \"types\": [                                                                              \n                        \"object\",                                                                             \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"hana\",                                                                        \n                      \"word\": \"hana\",                                                                         \n                      \"paraphrase\": true,                                                                     \n                      \"possessive\": false                                                                     \n                    }                                                                                         \n          STACK     Context#2: call10,call11,call12,call13                                                    \n          RESULT    hana                                                                                      \n",
        "Generator           KM 'properties' ordinal: 0  notes: \"add possession ending\"                                \n          APPLIED   Generator(({context}) => context.paraphrase && context.possessive, ({context, g}) => {    \n                            context.possessive = false                                                        \n                            const phrase = g(context)                                                         \n                            context.possessive = true                                                         \n                            if (phrase.endsWith('s')) {                                                       \n                              return `${phrase}'`                                                             \n                            } else {                                                                          \n                              return `${phrase}'s`                                                            \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"hana\",                                                                         \n                      \"types\": [                                                                              \n                        \"object\",                                                                             \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"hana\",                                                                        \n                      \"word\": \"hana\",                                                                         \n                      \"paraphrase\": true,                                                                     \n                      \"possessive\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call10,call11,call12                                                           \n          RESULT    hana's                                                                                    \n",
        "Generator           KM 'dialogues' ordinal: 25                                                                \n          APPLIED   Generator(({context}) => context.paraphrase && context.word, ({context}) => `${context.wor\n                    d}`)                                                                                      \n          TO        {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"text\": \"age\",                                                                          \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"age\",                                                                         \n                      \"word\": \"age\",                                                                          \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call10,call11,call14                                                           \n          RESULT    age                                                                                       \n",
        "Generator           KM 'properties' ordinal: 11  notes: \"object's property\"                                   \n          APPLIED   Generator(({context}) => !context.modifiers && context.object, ({context, g, gs}) => {    \n                                   if (context.objects) {                                                     \n                                     const objects = [ ...context.objects ]                                   \n                                     objects.reverse()                                                        \n                                     let phrase = ''                                                          \n                                     let separator = ''                                                       \n                                     for (let i = 0; i < objects.length-1; ++i) {                             \n                                       phrase = phrase + separator + g({...objects[i], paraphrase: context.par\n                    aphrase, possessive: true})                                                               \n                                       separator = ' '                                                        \n                                     }                                                                        \n                                     phrase = phrase + separator + g({...objects[objects.length-1], paraphrase\n                    : context.paraphrase})                                                                    \n                                     return phrase                                                            \n                                   } else {                                                                   \n                                     const base = { ...context }                                              \n                                     base.object = undefined; // TODO make paraphrase be a default when paraph\n                    rasing?                                                                                   \n                                     if (context.object.marker == 'objectPrefix') {                           \n                                       return `${g(context.object)} ${g(base)}`                               \n                                     } else {                                                                 \n                                       return `${g({...context.object, paraphrase: context.paraphrase})}'s ${g\n                    (base)}`                                                                                  \n                                     }                                                                        \n                                   }                                                                          \n                                 })                                                                           \n          TO        {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"object\": {                                                                             \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hana\",                                                                       \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hana\",                                                                      \n                        \"word\": \"hana\"                                                                        \n                      },                                                                                      \n                      \"objects\": [                                                                            \n                        {                                                                                     \n                          \"marker\": \"property\",                                                               \n                          \"text\": \"age\",                                                                      \n                          \"types\": [                                                                          \n                            \"property\"                                                                        \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"age\",                                                                     \n                          \"word\": \"age\"                                                                       \n                        },                                                                                    \n                        {                                                                                     \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"hana\",                                                                     \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"hana\",                                                                    \n                          \"word\": \"hana\"                                                                      \n                        }                                                                                     \n                      ],                                                                                      \n                      \"text\": \"hana 's age\",                                                                  \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"age\",                                                                         \n                      \"word\": \"age\",                                                                          \n                      \"response\": true,                                                                       \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call10,call11                                                                  \n          RESULT    hana's age                                                                                \n",
        "Generator           KM 'dialogues' ordinal: 14                                                                \n          APPLIED   Generator(({context}) => context.marker == 'unknown', ({context}) => {                    \n                            if (typeof context.marker === 'string') {                                         \n                              return context.value                                                            \n                            } else {                                                                          \n                              JSON.stringify(context.value)                                                   \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"21\",                                                                           \n                      \"types\": [                                                                              \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"21\",                                                                          \n                      \"word\": \"21\",                                                                           \n                      \"response\": true,                                                                       \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call10,call15                                                                  \n          RESULT    21                                                                                        \n",
        "Generator           KM 'dialogues' ordinal: 22  notes: \"x is y\"                                               \n          APPLIED   Generator(({context, hierarchy}) => { return hierarchy.isA(context.marker, 'is') && contex\n                    t.paraphrase }, ({context, g}) => {                                                       \n                            context.one.response = true                                                       \n                            context.two.response = true                                                       \n                            return `${g({ ...context.one, paraphrase: true })} ${context.word} ${g(context.two\n                    )}`                                                                                       \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"default\": true,                                                                        \n                      \"marker\": \"is\",                                                                         \n                      \"one\": {                                                                                \n                        \"marker\": \"property\",                                                                 \n                        \"object\": {                                                                           \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"hana\",                                                                     \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"hana\",                                                                    \n                          \"word\": \"hana\"                                                                      \n                        },                                                                                    \n                        \"objects\": [                                                                          \n                          {                                                                                   \n                            \"marker\": \"property\",                                                             \n                            \"text\": \"age\",                                                                    \n                            \"types\": [                                                                        \n                              \"property\"                                                                      \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"age\",                                                                   \n                            \"word\": \"age\"                                                                     \n                          },                                                                                  \n                          {                                                                                   \n                            \"marker\": \"unknown\",                                                              \n                            \"text\": \"hana\",                                                                   \n                            \"types\": [                                                                        \n                              \"object\",                                                                       \n                              \"unknown\"                                                                       \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"hana\",                                                                  \n                            \"word\": \"hana\"                                                                    \n                          }                                                                                   \n                        ],                                                                                    \n                        \"text\": \"hana 's age\",                                                                \n                        \"types\": [                                                                            \n                          \"property\"                                                                          \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"age\",                                                                       \n                        \"word\": \"age\",                                                                        \n                        \"response\": true                                                                      \n                      },                                                                                      \n                      \"text\": \"hana 's age is 21\",                                                            \n                      \"two\": {                                                                                \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"21\",                                                                         \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"21\",                                                                        \n                        \"word\": \"21\",                                                                         \n                        \"response\": true                                                                      \n                      },                                                                                      \n                      \"word\": \"is\",                                                                           \n                      \"topLevel\": true,                                                                       \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call10                                                                         \n          RESULT    hana's age is 21                                                                          \n",
        "Semantic            No semantic applied                                                                       \n          TO        {                                                                                         \n                      \"marker\": \"controlEnd\",                                                                 \n                      \"controlRemove\": true,                                                                  \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n"
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "possession",
                0
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "possession",
                0
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "possession",
                0
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "possession",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "possession",
                0
              ]
            ]
          },
          {
            "op": [
              "possession",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "possession",
                1
              ]
            ]
          },
          {
            "op": [
              "property",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "property",
                0
              ]
            ]
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ]
            ]
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ]
          }
        ]
      },
      "times": 1.6500611305236816,
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  - \"hana\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: hana\n                                   text: hana\n                                   value: hana\n    1. possession/0  - \"'s\"\n                                   value: possession\n                                   text: 's\n                                   marker: Operator(possession/0, [Selector(Bridge('{ ...next(operator), object: before[0], objects: before }'), [Type('object')]<==>[])], evaluator(Bridge('{ ...next(operator), object: before[0], objects: before }')), variables({}), inverted)\n                                   word: 's\n    2. unknown/0  - \"age\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: age\n                                   text: age\n                                   value: age\n    3. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n    4. unknown/0  - \"21\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: 21\n                                   text: 21\n                                   value: 21\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({'marker': Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana'})\n\n>>>>>>>>>>>>> Counter 2\n   *0. unknown/1  - \"hana\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: hana\n                                   text: hana\n                                   value: hana\n                                   unknown: True\n    1. possession/0  - \"'s\"\n                                   value: possession\n                                   text: 's\n                                   marker: Operator(possession/0, [Selector(Bridge('{ ...next(operator), object: before[0], objects: before }'), [Type('object')]<==>[])], evaluator(Bridge('{ ...next(operator), object: before[0], objects: before }')), variables({}), inverted)\n                                   word: 's\n    2. unknown/0  - \"age\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: age\n                                   text: age\n                                   value: age\n    3. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n    4. unknown/0  - \"21\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: 21\n                                   text: 21\n                                   value: 21\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({'marker': Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({})), 'word': 'age', 'text': 'age', 'value': 'age'})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/1  - \"hana\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: hana\n                                   text: hana\n                                   value: hana\n                                   unknown: True\n    1. possession/0  - \"'s\"\n                                   value: possession\n                                   text: 's\n                                   marker: Operator(possession/0, [Selector(Bridge('{ ...next(operator), object: before[0], objects: before }'), [Type('object')]<==>[])], evaluator(Bridge('{ ...next(operator), object: before[0], objects: before }')), variables({}), inverted)\n                                   word: 's\n   *2. unknown/1  - \"age\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: age\n                                   text: age\n                                   value: age\n                                   unknown: True\n    3. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n    4. unknown/0  - \"21\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: 21\n                                   text: 21\n                                   value: 21\n<<<<<<<<<<<<<\nNext Op (index=4) is Context({'marker': Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({})), 'word': '21', 'text': '21', 'value': '21'})\n\n>>>>>>>>>>>>> Counter 4\n    0. unknown/1  - \"hana\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: hana\n                                   text: hana\n                                   value: hana\n                                   unknown: True\n    1. possession/0  - \"'s\"\n                                   value: possession\n                                   text: 's\n                                   marker: Operator(possession/0, [Selector(Bridge('{ ...next(operator), object: before[0], objects: before }'), [Type('object')]<==>[])], evaluator(Bridge('{ ...next(operator), object: before[0], objects: before }')), variables({}), inverted)\n                                   word: 's\n    2. unknown/1  - \"age\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: age\n                                   text: age\n                                   value: age\n                                   unknown: True\n    3. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n   *4. unknown/1  - \"21\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: 21\n                                   text: 21\n                                   value: 21\n                                   unknown: True\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({'value': 'possession', 'text': \"'s\", 'marker': Operator(possession/0, [Selector(Bridge('{ ...next(operator), object: before[0], objects: before }'), [Type('object')]<==>[])], evaluator(Bridge('{ ...next(operator), object: before[0], objects: before }')), variables({}), inverted), 'word': \"'s\"})\n\n>>>>>>>>>>>>> Counter 5\n   *0. possession/1  - \"hana 's\"\n                                   value: possession\n                                   text: hana 's\n                                   marker: Operator(possession/1, PASS, [Selector(Bridge('{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }'), []<==>[Type('property')])], evaluator(Bridge('{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: o\n                                   word: 's\n                                   object: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True, 'types': ['unknown', 'object']})\n                                   objects: [\n                                     marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                     word: hana\n                                     text: hana\n                                     value: hana\n                                     unknown: True\n                                     types: [\n                                     'unknown'\n,                                      'object'\n                                     ]\n                                   ]\n    1. unknown/1  - \"age\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: age\n                                   text: age\n                                   value: age\n                                   unknown: True\n    2. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n    3. unknown/1  - \"21\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: 21\n                                   text: 21\n                                   value: 21\n                                   unknown: True\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({'value': 'possession', 'text': \"hana 's\", 'marker': Operator(possession/1, PASS, [Selector(Bridge('{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }'), []<==>[Type('property')])], evaluator(Bridge('{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }')), variables({}), inverted), 'word': \"'s\", 'object': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True, 'types': ['unknown', 'object']}), 'objects': [Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True, 'types': ['unknown', 'object']})]})\n\n>>>>>>>>>>>>> Counter 6\n   *0. property/0  - \"hana 's age\"\n                                   marker: Operator(property/0, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({}))\n                                   word: age\n                                   text: hana 's age\n                                   value: age\n                                   unknown: True\n                                   types: [\n                                   'property'\n                                   ]\n                                   object: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True, 'types': ['unknown', 'object']})\n                                   objects: [\n                                     marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                     word: age\n                                     text: age\n                                     value: age\n                                     unknown: True\n                                     types: [\n                                     'property'\n                                     ]\n\n                                     marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                     word: hana\n                                     text: hana\n                                     value: hana\n                                     unknown: True\n                                     types: [\n                                     'unknown'\n,                                      'object'\n                                     ]\n                                   ]\n    1. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n    2. unknown/1  - \"21\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: 21\n                                   text: 21\n                                   value: 21\n                                   unknown: True\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({'marker': Operator(property/0, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({})), 'word': 'age', 'text': \"hana 's age\", 'value': 'age', 'unknown': True, 'types': ['property'], 'object': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True, 'types': ['unknown', 'object']}), 'objects': [Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'age', 'text': 'age', 'value': 'age', 'unknown': True, 'types': ['property']}), Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True, 'types': ['unknown', 'object']})]})\n\n>>>>>>>>>>>>> Counter 7\n   *0. property/1  - \"hana 's age\"\n                                   marker: Operator(property/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: age\n                                   text: hana 's age\n                                   value: age\n                                   unknown: True\n                                   types: [\n                                   'property'\n                                   ]\n                                   object: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True, 'types': ['unknown', 'object']})\n                                   objects: [\n                                     marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                     word: age\n                                     text: age\n                                     value: age\n                                     unknown: True\n                                     types: [\n                                     'property'\n                                     ]\n\n                                     marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                     word: hana\n                                     text: hana\n                                     value: hana\n                                     unknown: True\n                                     types: [\n                                     'unknown'\n,                                      'object'\n                                     ]\n                                   ]\n    1. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n    2. unknown/1  - \"21\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: 21\n                                   text: 21\n                                   value: 21\n                                   unknown: True\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({'marker': Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({})), 'default': True, 'word': 'is', 'text': 'is'})\n\n>>>>>>>>>>>>> Counter 8\n   *0. is/1  - \"hana 's age is 21\"\n                                   marker: Operator(is/1, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: hana 's age is 21\n                                   one: Context({'marker': Operator(property/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'age', 'text': \"hana 's age\", 'value': 'age', 'unknown': True, 'types': ['property', 'property'], 'object': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'h\n                                   two: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': '21', 'text': '21', 'value': '21', 'unknown': True, 'types': ['unknown']})\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({'marker': Operator(is/1, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({})), 'default': True, 'word': 'is', 'text': \"hana 's age is 21\", 'one': Context({'marker': Operator(property/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'age', 'text': \"hana 's age\", 'value': 'age', 'unknown': True, 'types': ['property', 'property'], 'object': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True, 'types': ['unknown', 'object']}), 'objects': [Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'age', 'text': 'age', 'value': 'age', 'unknown': True, 'types': ['property', 'property']}), Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True, 'types': ['unknown', 'object']})]}), 'two': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': '21', 'text': '21', 'value': '21', 'unknown': True, 'types': ['unknown']})})\n\n>>>>>>>>>>>>> Counter 9\n   *0. is/2  - \"hana 's age is 21\"\n                                   marker: Operator(is/2, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   default: True\n                                   word: is\n                                   text: hana 's age is 21\n                                   one: Context({'marker': Operator(property/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'age', 'text': \"hana 's age\", 'value': 'age', 'unknown': True, 'types': ['property', 'property'], 'object': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'h\n                                   two: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': '21', 'text': '21', 'value': '21', 'unknown': True, 'types': ['unknown']})\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "default": true,
          "marker": "is",
          "one": {
            "marker": "property",
            "object": {
              "marker": "unknown",
              "text": "hana",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "hana",
              "word": "hana"
            },
            "objects": [
              {
                "marker": "property",
                "text": "age",
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": "age",
                "word": "age"
              },
              {
                "marker": "unknown",
                "text": "hana",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "hana",
                "word": "hana"
              }
            ],
            "text": "hana 's age",
            "types": [
              "property"
            ],
            "unknown": true,
            "value": "age",
            "word": "age",
            "response": true
          },
          "text": "hana 's age is 21",
          "two": {
            "marker": "unknown",
            "text": "21",
            "types": [
              "unknown"
            ],
            "unknown": true,
            "value": "21",
            "word": "21",
            "response": true
          },
          "word": "is",
          "topLevel": true
        }
      ],
      "generated": [
        "hana's age is 21"
      ],
      "paraphrases": [
        "hana's age is 21"
      ],
      "responses": [
        ""
      ],
      "memory_free_percent": 70,
      "version": "6.13.45-beta.10",
      "query": "hana's age is 21"
    },
    {
      "hierarchy": [
        [
          "hate",
          "canBeQuestion"
        ],
        [
          "sushi",
          "hierarchyAble"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "food",
          "queryable"
        ],
        [
          "pidgeon",
          "queryable"
        ],
        [
          "human",
          "theAble"
        ],
        [
          "love",
          "canBeQuestion"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "owl",
          "theAble"
        ],
        [
          "dislike",
          "canBeDoQuestion"
        ],
        [
          "self",
          "queryable"
        ],
        [
          "dislike",
          "ifAble"
        ],
        [
          "parrot",
          "object"
        ],
        [
          "bird",
          "theAble"
        ],
        [
          "like",
          "orAble"
        ],
        [
          "dog",
          "object"
        ],
        [
          "canBeDoQuestion",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "mammal",
          "hierarchyAble"
        ],
        [
          "chicken_strip",
          "hierarchyAble"
        ],
        [
          "does_after_canBeDoQuestion_doesAble",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "cat",
          "queryable"
        ],
        [
          "mammal",
          "queryable"
        ],
        [
          "love",
          "canBeDoQuestion"
        ],
        [
          "dog",
          "queryable"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "hate",
          "canBeDoQuestion"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "human",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "feline",
          "queryable"
        ],
        [
          "strip",
          "theAble"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "bat",
          "queryable"
        ],
        [
          "like",
          "canBeQuestion"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "wolf",
          "object"
        ],
        [
          "dislike",
          "canBeQuestion"
        ],
        [
          "like",
          "ifAble"
        ],
        [
          "animal",
          "theAble"
        ],
        [
          "bird",
          "hierarchyAble"
        ],
        [
          "pidgeon",
          "hierarchyAble"
        ],
        [
          "strip",
          "concept"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "animal",
          "object"
        ],
        [
          "canine",
          "hierarchyAble"
        ],
        [
          "strip",
          "hierarchyAble"
        ],
        [
          "mammal",
          "object"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "have",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "questionMark_before_canBeQuestion_have",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "owl",
          "queryable"
        ],
        [
          "bat",
          "theAble"
        ],
        [
          "wolf",
          "hierarchyAble"
        ],
        [
          "food",
          "object"
        ],
        [
          "chicken_strip",
          "strip"
        ],
        [
          "strip",
          "queryable"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "feline",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "sushi",
          "object"
        ],
        [
          "parrot",
          "hierarchyAble"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "human",
          "object"
        ],
        [
          "hate",
          "orAble"
        ],
        [
          "animal",
          "queryable"
        ],
        [
          "canine",
          "theAble"
        ],
        [
          "animal",
          "hierarchyAble"
        ],
        [
          "pidgeon",
          "theAble"
        ],
        [
          "want",
          "ifAble"
        ],
        [
          "concept",
          "concept"
        ],
        [
          "wolf",
          "theAble"
        ],
        [
          "feline",
          "hierarchyAble"
        ],
        [
          "parrot",
          "theAble"
        ],
        [
          "bird",
          "object"
        ],
        [
          "want",
          "canBeQuestion"
        ],
        [
          "doesAble",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "eagle",
          "queryable"
        ],
        [
          "dislike",
          "orAble"
        ],
        [
          "whose",
          "object"
        ],
        [
          "dog",
          "theAble"
        ],
        [
          "parrot",
          "queryable"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "eagle",
          "object"
        ],
        [
          "mammal",
          "theAble"
        ],
        [
          "canBeQuestion",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "cat",
          "theAble"
        ],
        [
          "eagle",
          "hierarchyAble"
        ],
        [
          "cat",
          "object"
        ],
        [
          "feline",
          "object"
        ],
        [
          "food",
          "theAble"
        ],
        [
          "bird",
          "queryable"
        ],
        [
          "sushi",
          "theAble"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "owl",
          "object"
        ],
        [
          "canine",
          "object"
        ],
        [
          "love",
          "ifAble"
        ],
        [
          "bat",
          "hierarchyAble"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "pidgeon",
          "object"
        ],
        [
          "human",
          "hierarchyAble"
        ],
        [
          "food",
          "hierarchyAble"
        ],
        [
          "dog",
          "hierarchyAble"
        ],
        [
          "want",
          "canBeDoQuestion"
        ],
        [
          "want",
          "orAble"
        ],
        [
          "sushi",
          "queryable"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "wolf",
          "queryable"
        ],
        [
          "owl",
          "hierarchyAble"
        ],
        [
          "cat",
          "hierarchyAble"
        ],
        [
          "like",
          "canBeDoQuestion"
        ],
        [
          "love",
          "orAble"
        ],
        [
          "hate",
          "ifAble"
        ],
        [
          "eagle",
          "theAble"
        ],
        [
          "bat",
          "object"
        ],
        [
          "canine",
          "queryable"
        ],
        [
          "property",
          "queryable"
        ]
      ],
      "load_cache_time": 0.019425392150878906,
      "logs": [
        "Undefined word 'kia'",
        "Op choices were: [(('unknown', 0), [('chicken', 0), ('love', 0), ('strip', 0), ('unknown', 0)]), (('strip', 0), [('chicken', 0), ('love', 0), ('strip', 0)]), (('chicken', 0), [('chicken', 0), ('love', 0)]), (('chicken_strip', 0), [('chicken_strip', 0), ('love', 0)]), (('love', 0), [('love', 0)]), (('love', 1), [('love', 1)])]",
        "Contexts used for choosing operators (if the wrong choices were made update the priories array. Put the expected choice at the end of the list): \n  Context for choosing the operator unknown/0 was [['chicken', 0], ['love', 0], ['strip', 0], ['unknown', 0]]\n  Context for choosing the operator strip/0 was [['chicken', 0], ['love', 0], ['strip', 0]]\n  Context for choosing the operator chicken/0 was [['chicken', 0], ['love', 0]]\n  Context for choosing the operator chicken_strip/0 was [['chicken_strip', 0], ['love', 0]]\n  Context for choosing the operator love/0 was [['love', 0]]\n  Context for choosing the operator love/1 was [['love', 1]]",
        "",
        "Semantic            No semantic applied                                                                       \n          TO        {                                                                                         \n                      \"marker\": \"controlStart\",                                                               \n                      \"controlRemove\": true,                                                                  \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n",
        "Semantic            KM 'ordering' ordinal: 0  notes: \"ordering setter\"                                        \n          APPLIED   Semantic(({context}) => context.marker == operator, ({context, km}) => {                  \n                              //const api = km('ordering').api                                                \n                              // api.setCategory(ordering.name, context[ordering.object].value, context[orderi\n                    ng.category].value, context)                                                              \n                              const propertiesAPI = km('properties').api                                      \n                              context.ordering = ordering.name                                                \n                              const fcontexts = flattens(['list'], [context])                                 \n                              for (const fcontext of fcontexts) {                                             \n                                fcontext.paraphrase = true                                                    \n                                fcontext[ordering.object].paraphrase = true                                   \n                                fcontext[ordering.category].paraphrase = true                                 \n                              }                                                                               \n                              propertiesAPI.relation_add(fcontexts)                                           \n                            })                                                                                \n          TO        {                                                                                         \n                      \"do\": {                                                                                 \n                        \"left\": \"lover\",                                                                      \n                        \"right\": \"lovee\",                                                                     \n                        \"text\": \"kia loves chicken strips\"                                                    \n                      },                                                                                      \n                      \"focusable\": [                                                                          \n                        \"lover\",                                                                              \n                        \"lovee\"                                                                               \n                      ],                                                                                      \n                      \"lovee\": {                                                                              \n                        \"chicken\": {                                                                          \n                          \"marker\": \"chicken\",                                                                \n                          \"text\": \"chicken\",                                                                  \n                          \"value\": \"chicken\",                                                                 \n                          \"word\": \"chicken\"                                                                   \n                        },                                                                                    \n                        \"marker\": \"chicken_strip\",                                                            \n                        \"modifiers\": [                                                                        \n                          \"chicken\"                                                                           \n                        ],                                                                                    \n                        \"text\": \"chicken strips\",                                                             \n                        \"types\": [                                                                            \n                          \"chicken_strip\",                                                                    \n                          \"object\"                                                                            \n                        ],                                                                                    \n                        \"value\": \"chicken_strip\",                                                             \n                        \"word\": \"strips\"                                                                      \n                      },                                                                                      \n                      \"lover\": {                                                                              \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"kia\",                                                                        \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"kia\",                                                                       \n                        \"word\": \"kia\"                                                                         \n                      },                                                                                      \n                      \"marker\": \"love\",                                                                       \n                      \"text\": \"kia loves chicken strips\",                                                     \n                      \"unflatten\": [                                                                          \n                        \"lover\",                                                                              \n                        \"lovee\"                                                                               \n                      ],                                                                                      \n                      \"value\": \"love\",                                                                        \n                      \"word\": \"loves\",                                                                        \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n          STACK     Context#2: call2                                                                          \n          RESULT    {                                                                                         \n                      \"do\": {                                                                                 \n                        \"left\": \"lover\",                                                                      \n                        \"right\": \"lovee\",                                                                     \n                        \"text\": \"kia loves chicken strips\"                                                    \n                      },                                                                                      \n                      \"focusable\": [                                                                          \n                        \"lover\",                                                                              \n                        \"lovee\"                                                                               \n                      ],                                                                                      \n                      \"lovee\": {                                                                              \n                        \"chicken\": {                                                                          \n                          \"marker\": \"chicken\",                                                                \n                          \"text\": \"chicken\",                                                                  \n                          \"value\": \"chicken\",                                                                 \n                          \"word\": \"chicken\"                                                                   \n                        },                                                                                    \n                        \"marker\": \"chicken_strip\",                                                            \n                        \"modifiers\": [                                                                        \n                          \"chicken\"                                                                           \n                        ],                                                                                    \n                        \"text\": \"chicken strips\",                                                             \n                        \"types\": [                                                                            \n                          \"chicken_strip\",                                                                    \n                          \"object\"                                                                            \n                        ],                                                                                    \n                        \"value\": \"chicken_strip\",                                                             \n                        \"word\": \"strips\"                                                                      \n                      },                                                                                      \n                      \"lover\": {                                                                              \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"kia\",                                                                        \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"kia\",                                                                       \n                        \"word\": \"kia\"                                                                         \n                      },                                                                                      \n                      \"marker\": \"love\",                                                                       \n                      \"text\": \"kia loves chicken strips\",                                                     \n                      \"unflatten\": [                                                                          \n                        \"lover\",                                                                              \n                        \"lovee\"                                                                               \n                      ],                                                                                      \n                      \"value\": \"love\",                                                                        \n                      \"word\": \"loves\",                                                                        \n                      \"topLevel\": true,                                                                       \n                      \"ordering\": \"preference\"                                                                \n                    }                                                                                         \n",
        "Generator           KM 'dialogues' ordinal: 29  notes: \"show word\"                                            \n          APPLIED   Generator(({context}) => context.word, ({context}) => context.word)                       \n          TO        {                                                                                         \n                      \"do\": {                                                                                 \n                        \"left\": \"lover\",                                                                      \n                        \"right\": \"lovee\",                                                                     \n                        \"text\": \"kia loves chicken strips\"                                                    \n                      },                                                                                      \n                      \"focusable\": [                                                                          \n                        \"lover\",                                                                              \n                        \"lovee\"                                                                               \n                      ],                                                                                      \n                      \"lovee\": {                                                                              \n                        \"chicken\": {                                                                          \n                          \"marker\": \"chicken\",                                                                \n                          \"text\": \"chicken\",                                                                  \n                          \"value\": \"chicken\",                                                                 \n                          \"word\": \"chicken\"                                                                   \n                        },                                                                                    \n                        \"marker\": \"chicken_strip\",                                                            \n                        \"modifiers\": [                                                                        \n                          \"chicken\"                                                                           \n                        ],                                                                                    \n                        \"text\": \"chicken strips\",                                                             \n                        \"types\": [                                                                            \n                          \"chicken_strip\",                                                                    \n                          \"object\"                                                                            \n                        ],                                                                                    \n                        \"value\": \"chicken_strip\",                                                             \n                        \"word\": \"strips\"                                                                      \n                      },                                                                                      \n                      \"lover\": {                                                                              \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"kia\",                                                                        \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"kia\",                                                                       \n                        \"word\": \"kia\"                                                                         \n                      },                                                                                      \n                      \"marker\": \"love\",                                                                       \n                      \"text\": \"kia loves chicken strips\",                                                     \n                      \"unflatten\": [                                                                          \n                        \"lover\",                                                                              \n                        \"lovee\"                                                                               \n                      ],                                                                                      \n                      \"value\": \"love\",                                                                        \n                      \"word\": \"loves\",                                                                        \n                      \"topLevel\": true,                                                                       \n                      \"ordering\": \"preference\",                                                               \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call3                                                                          \n          RESULT    loves                                                                                     \n",
        "Generator           KM 'dialogues' ordinal: 14                                                                \n          APPLIED   Generator(({context}) => context.marker == 'unknown', ({context}) => {                    \n                            if (typeof context.marker === 'string') {                                         \n                              return context.value                                                            \n                            } else {                                                                          \n                              JSON.stringify(context.value)                                                   \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"kia\",                                                                          \n                      \"types\": [                                                                              \n                        \"object\",                                                                             \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"kia\",                                                                         \n                      \"word\": \"kia\",                                                                          \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call5                                                                    \n          RESULT    kia                                                                                       \n",
        "Generator           KM 'dialogues' ordinal: 25                                                                \n          APPLIED   Generator(({context}) => context.paraphrase && context.word, ({context}) => `${context.wor\n                    d}`)                                                                                      \n          TO        {                                                                                         \n                      \"marker\": \"chicken\",                                                                    \n                      \"text\": \"chicken\",                                                                      \n                      \"value\": \"chicken\",                                                                     \n                      \"word\": \"chicken\",                                                                      \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call6,call7                                                              \n          RESULT    chicken                                                                                   \n",
        "Generator           KM 'dialogues' ordinal: 4                                                                 \n          APPLIED   Generator(({context}) => context.paraphrase && context.modifiers, ({context, g}) => {     \n                            const text = []                                                                   \n                            for (modifier of context.modifiers) {                                             \n                              text.push(g(context[modifier]))                                                 \n                            }                                                                                 \n                            text.push(context.word)                                                           \n                            return text.join(' ')                                                             \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"chicken\": {                                                                            \n                        \"marker\": \"chicken\",                                                                  \n                        \"text\": \"chicken\",                                                                    \n                        \"value\": \"chicken\",                                                                   \n                        \"word\": \"chicken\"                                                                     \n                      },                                                                                      \n                      \"marker\": \"chicken_strip\",                                                              \n                      \"modifiers\": [                                                                          \n                        \"chicken\"                                                                             \n                      ],                                                                                      \n                      \"text\": \"chicken strips\",                                                               \n                      \"types\": [                                                                              \n                        \"chicken_strip\",                                                                      \n                        \"object\"                                                                              \n                      ],                                                                                      \n                      \"value\": \"chicken_strip\",                                                               \n                      \"word\": \"strips\",                                                                       \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call6                                                                    \n          RESULT    chicken strips                                                                            \n",
        "Generator           KM 'ordering' ordinal: 2  notes: \"ordering generator for paraphrase\"                      \n          APPLIED   Generator(({context}) => context.marker == operator && context.paraphrase && !context.quer\n                    y, ({context, g}) => {                                                                    \n                            const beforeGenerator = before.map( (arg) => g(context[arg.tag]) )                \n                            const afterGenerator = after.map( (arg) => g(context[arg.tag]) )                  \n                            return beforeGenerator.concat([`${context.word}`]).concat(afterGenerator).join(' '\n                    )                                                                                         \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"do\": {                                                                                 \n                        \"left\": \"lover\",                                                                      \n                        \"right\": \"lovee\",                                                                     \n                        \"text\": \"kia loves chicken strips\"                                                    \n                      },                                                                                      \n                      \"focusable\": [                                                                          \n                        \"lover\",                                                                              \n                        \"lovee\"                                                                               \n                      ],                                                                                      \n                      \"lovee\": {                                                                              \n                        \"chicken\": {                                                                          \n                          \"marker\": \"chicken\",                                                                \n                          \"text\": \"chicken\",                                                                  \n                          \"value\": \"chicken\",                                                                 \n                          \"word\": \"chicken\"                                                                   \n                        },                                                                                    \n                        \"marker\": \"chicken_strip\",                                                            \n                        \"modifiers\": [                                                                        \n                          \"chicken\"                                                                           \n                        ],                                                                                    \n                        \"text\": \"chicken strips\",                                                             \n                        \"types\": [                                                                            \n                          \"chicken_strip\",                                                                    \n                          \"object\"                                                                            \n                        ],                                                                                    \n                        \"value\": \"chicken_strip\",                                                             \n                        \"word\": \"strips\"                                                                      \n                      },                                                                                      \n                      \"lover\": {                                                                              \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"kia\",                                                                        \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"kia\",                                                                       \n                        \"word\": \"kia\"                                                                         \n                      },                                                                                      \n                      \"marker\": \"love\",                                                                       \n                      \"text\": \"kia loves chicken strips\",                                                     \n                      \"unflatten\": [                                                                          \n                        \"lover\",                                                                              \n                        \"lovee\"                                                                               \n                      ],                                                                                      \n                      \"value\": \"love\",                                                                        \n                      \"word\": \"loves\",                                                                        \n                      \"topLevel\": true,                                                                       \n                      \"ordering\": \"preference\",                                                               \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4                                                                          \n          RESULT    kia loves chicken strips                                                                  \n",
        "Semantic            No semantic applied                                                                       \n          TO        {                                                                                         \n                      \"marker\": \"controlEnd\",                                                                 \n                      \"controlRemove\": true,                                                                  \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n"
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "chicken",
                0
              ],
              [
                "love",
                0
              ],
              [
                "strip",
                0
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "strip",
              0
            ],
            "ops": [
              [
                "chicken",
                0
              ],
              [
                "love",
                0
              ],
              [
                "strip",
                0
              ]
            ]
          },
          {
            "op": [
              "chicken",
              0
            ],
            "ops": [
              [
                "chicken",
                0
              ],
              [
                "love",
                0
              ]
            ]
          },
          {
            "op": [
              "chicken_strip",
              0
            ],
            "ops": [
              [
                "chicken_strip",
                0
              ],
              [
                "love",
                0
              ]
            ]
          },
          {
            "op": [
              "love",
              0
            ],
            "ops": [
              [
                "love",
                0
              ]
            ]
          },
          {
            "op": [
              "love",
              1
            ],
            "ops": [
              [
                "love",
                1
              ]
            ]
          }
        ]
      },
      "times": 1.0882158279418945,
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  - \"kia\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: kia\n                                   text: kia\n                                   value: kia\n    1. love/0  - \"loves\"\n                                   value: love\n                                   text: loves\n                                   marker: Operator(love/0, [Selector(Bridge('{ ... next(operator) , do: { left: \"lover\", right: \"lovee\" }  , lover: before[0]  , lovee*: after[0] , unflatten: [\"lover\",\"lovee\"], focusable: [\"lover\",\"lovee\"] }'), [Type('object')]<==>[Type('object')])], evaluator(Bridge('{ ... next(operator) , do: { left: \"lover\", right: \"lovee\" }  , lover: before[0]  , lovee*: after\n                                   word: loves\n    2. chicken/0  - \"chicken\"\n                                   value: chicken\n                                   text: chicken\n                                   marker: Operator(chicken/0, PASS, [Selector(Bridge('{ ...after, chicken: operator, marker: operator(concat('chicken_', after.value)), value: concat('chicken_', after.value), modifiers: append(['chicken'], after[0].modifiers)}'), []<==>[Type('strip')])], evaluator(Bridge('{ ...after, chicken: operator, marker: operator(concat('chicken_', after.value)), value: conc\n                                   word: chicken\n    3. strip/0  - \"strips\"\n                                   value: strip\n                                   text: strips\n                                   marker: Operator(strip/0, [Selector(Bridge('{ ...next(operator), value: 'strip' }'), []<==>[])], evaluator(Bridge('{ ...next(operator), value: 'strip' }')), variables({}))\n                                   word: strips\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({'marker': Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia'})\n\n>>>>>>>>>>>>> Counter 2\n   *0. unknown/1  - \"kia\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: kia\n                                   text: kia\n                                   value: kia\n                                   unknown: True\n    1. love/0  - \"loves\"\n                                   value: love\n                                   text: loves\n                                   marker: Operator(love/0, [Selector(Bridge('{ ... next(operator) , do: { left: \"lover\", right: \"lovee\" }  , lover: before[0]  , lovee*: after[0] , unflatten: [\"lover\",\"lovee\"], focusable: [\"lover\",\"lovee\"] }'), [Type('object')]<==>[Type('object')])], evaluator(Bridge('{ ... next(operator) , do: { left: \"lover\", right: \"lovee\" }  , lover: before[0]  , lovee*: after\n                                   word: loves\n    2. chicken/0  - \"chicken\"\n                                   value: chicken\n                                   text: chicken\n                                   marker: Operator(chicken/0, PASS, [Selector(Bridge('{ ...after, chicken: operator, marker: operator(concat('chicken_', after.value)), value: concat('chicken_', after.value), modifiers: append(['chicken'], after[0].modifiers)}'), []<==>[Type('strip')])], evaluator(Bridge('{ ...after, chicken: operator, marker: operator(concat('chicken_', after.value)), value: conc\n                                   word: chicken\n    3. strip/0  - \"strips\"\n                                   value: strip\n                                   text: strips\n                                   marker: Operator(strip/0, [Selector(Bridge('{ ...next(operator), value: 'strip' }'), []<==>[])], evaluator(Bridge('{ ...next(operator), value: 'strip' }')), variables({}))\n                                   word: strips\n<<<<<<<<<<<<<\nNext Op (index=3) is Context({'value': 'strip', 'text': 'strips', 'marker': Operator(strip/0, [Selector(Bridge('{ ...next(operator), value: 'strip' }'), []<==>[])], evaluator(Bridge('{ ...next(operator), value: 'strip' }')), variables({})), 'word': 'strips'})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/1  - \"kia\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: kia\n                                   text: kia\n                                   value: kia\n                                   unknown: True\n    1. love/0  - \"loves\"\n                                   value: love\n                                   text: loves\n                                   marker: Operator(love/0, [Selector(Bridge('{ ... next(operator) , do: { left: \"lover\", right: \"lovee\" }  , lover: before[0]  , lovee*: after[0] , unflatten: [\"lover\",\"lovee\"], focusable: [\"lover\",\"lovee\"] }'), [Type('object')]<==>[Type('object')])], evaluator(Bridge('{ ... next(operator) , do: { left: \"lover\", right: \"lovee\" }  , lover: before[0]  , lovee*: after\n                                   word: loves\n    2. chicken/0  - \"chicken\"\n                                   value: chicken\n                                   text: chicken\n                                   marker: Operator(chicken/0, PASS, [Selector(Bridge('{ ...after, chicken: operator, marker: operator(concat('chicken_', after.value)), value: concat('chicken_', after.value), modifiers: append(['chicken'], after[0].modifiers)}'), []<==>[Type('strip')])], evaluator(Bridge('{ ...after, chicken: operator, marker: operator(concat('chicken_', after.value)), value: conc\n                                   word: chicken\n   *3. strip/1  - \"strips\"\n                                   value: strip\n                                   text: strips\n                                   marker: Operator(strip/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: strips\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({'value': 'chicken', 'text': 'chicken', 'marker': Operator(chicken/0, PASS, [Selector(Bridge('{ ...after, chicken: operator, marker: operator(concat('chicken_', after.value)), value: concat('chicken_', after.value), modifiers: append(['chicken'], after[0].modifiers)}'), []<==>[Type('strip')])], evaluator(Bridge('{ ...after, chicken: operator, marker: operator(concat('chicken_', after.value)), value: concat('chicken_', after.value), modifiers: append(['chicken'], after[0].modifiers)}')), variables({})), 'word': 'chicken'})\n\n>>>>>>>>>>>>> Counter 4\n    0. unknown/1  - \"kia\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: kia\n                                   text: kia\n                                   value: kia\n                                   unknown: True\n    1. love/0  - \"loves\"\n                                   value: love\n                                   text: loves\n                                   marker: Operator(love/0, [Selector(Bridge('{ ... next(operator) , do: { left: \"lover\", right: \"lovee\" }  , lover: before[0]  , lovee*: after[0] , unflatten: [\"lover\",\"lovee\"], focusable: [\"lover\",\"lovee\"] }'), [Type('object')]<==>[Type('object')])], evaluator(Bridge('{ ... next(operator) , do: { left: \"lover\", right: \"lovee\" }  , lover: before[0]  , lovee*: after\n                                   word: loves\n   *2. chicken_strip/0  - \"chicken strips\"\n                                   value: chicken_strip\n                                   text: chicken strips\n                                   marker: Operator(chicken_strip/0, [Selector(Bridge('{ ...next(operator), value: 'chicken_strip' }'), []<==>[])], evaluator(Bridge('{ ...next(operator), value: 'chicken_strip' }')), variables({}))\n                                   word: strips\n                                   types: [\n                                   'strip'\n                                   ]\n                                   chicken: Context({'value': 'chicken', 'text': 'chicken', 'marker': Operator(chicken/0, PASS, [Selector(Bridge('{ ...after, chicken: operator, marker: operator(concat('chicken_', after.value)), value: concat('chicken_', after.value), modifiers: append(['chicken'], after[0].modifiers)}'), []<==>[Type('strip')])], evaluator(Bridge('{ ...after, chicken: operator, mar\n                                   modifiers: [\n                                   'chicken'\n                                   ]\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({'value': 'chicken_strip', 'text': 'chicken strips', 'marker': Operator(chicken_strip/0, [Selector(Bridge('{ ...next(operator), value: 'chicken_strip' }'), []<==>[])], evaluator(Bridge('{ ...next(operator), value: 'chicken_strip' }')), variables({})), 'word': 'strips', 'types': ['strip'], 'chicken': Context({'value': 'chicken', 'text': 'chicken', 'marker': Operator(chicken/0, PASS, [Selector(Bridge('{ ...after, chicken: operator, marker: operator(concat('chicken_', after.value)), value: concat('chicken_', after.value), modifiers: append(['chicken'], after[0].modifiers)}'), []<==>[Type('strip')])], evaluator(Bridge('{ ...after, chicken: operator, marker: operator(concat('chicken_', after.value)), value: concat('chicken_', after.value), modifiers: append(['chicken'], after[0].modifiers)}')), variables({})), 'word': 'chicken'}), 'modifiers': ['chicken']})\n\n>>>>>>>>>>>>> Counter 5\n    0. unknown/1  - \"kia\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: kia\n                                   text: kia\n                                   value: kia\n                                   unknown: True\n    1. love/0  - \"loves\"\n                                   value: love\n                                   text: loves\n                                   marker: Operator(love/0, [Selector(Bridge('{ ... next(operator) , do: { left: \"lover\", right: \"lovee\" }  , lover: before[0]  , lovee*: after[0] , unflatten: [\"lover\",\"lovee\"], focusable: [\"lover\",\"lovee\"] }'), [Type('object')]<==>[Type('object')])], evaluator(Bridge('{ ... next(operator) , do: { left: \"lover\", right: \"lovee\" }  , lover: before[0]  , lovee*: after\n                                   word: loves\n   *2. chicken_strip/1  - \"chicken strips\"\n                                   value: chicken_strip\n                                   text: chicken strips\n                                   marker: Operator(chicken_strip/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: strips\n                                   types: [\n                                   'strip'\n                                   ]\n                                   chicken: Context({'value': 'chicken', 'text': 'chicken', 'marker': Operator(chicken/0, PASS, [Selector(Bridge('{ ...after, chicken: operator, marker: operator(concat('chicken_', after.value)), value: concat('chicken_', after.value), modifiers: append(['chicken'], after[0].modifiers)}'), []<==>[Type('strip')])], evaluator(Bridge('{ ...after, chicken: operator, mar\n                                   modifiers: [\n                                   'chicken'\n                                   ]\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({'value': 'love', 'text': 'loves', 'marker': Operator(love/0, [Selector(Bridge('{ ... next(operator) , do: { left: \"lover\", right: \"lovee\" }  , lover: before[0]  , lovee*: after[0] , unflatten: [\"lover\",\"lovee\"], focusable: [\"lover\",\"lovee\"] }'), [Type('object')]<==>[Type('object')])], evaluator(Bridge('{ ... next(operator) , do: { left: \"lover\", right: \"lovee\" }  , lover: before[0]  , lovee*: after[0] , unflatten: [\"lover\",\"lovee\"], focusable: [\"lover\",\"lovee\"] }')), variables({})), 'word': 'loves'})\n\n>>>>>>>>>>>>> Counter 6\n   *0. love/1  - \"kia loves chicken strips\"\n                                   value: love\n                                   text: kia loves chicken strips\n                                   marker: Operator(love/1, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({}))\n                                   word: loves\n                                   do: Context({'left': 'lover', 'right': 'lovee', 'text': 'kia loves chicken strips'})\n                                   lover: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown', 'object']})\n                                   lovee: Context({'value': 'chicken_strip', 'text': 'chicken strips', 'marker': Operator(chicken_strip/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'strips', 'types': ['strip', 'chicken_strip', 'object'], 'chicken': Context({'value': 'chicken', 'text': 'chicken', 'marker': Operator(chicken/0, PASS, [Selector(Bridge('{ ...after, chicken: o\n                                   unflatten: [\n                                   'lover'\n,                                    'lovee'\n                                   ]\n                                   focusable: [\n                                   'lover'\n,                                    'lovee'\n                                   ]\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({'value': 'love', 'text': 'kia loves chicken strips', 'marker': Operator(love/1, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({})), 'word': 'loves', 'do': Context({'left': 'lover', 'right': 'lovee', 'text': 'kia loves chicken strips'}), 'lover': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown', 'object']}), 'lovee': Context({'value': 'chicken_strip', 'text': 'chicken strips', 'marker': Operator(chicken_strip/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'strips', 'types': ['strip', 'chicken_strip', 'object'], 'chicken': Context({'value': 'chicken', 'text': 'chicken', 'marker': Operator(chicken/0, PASS, [Selector(Bridge('{ ...after, chicken: operator, marker: operator(concat('chicken_', after.value)), value: concat('chicken_', after.value), modifiers: append(['chicken'], after[0].modifiers)}'), []<==>[Type('strip')])], evaluator(Bridge('{ ...after, chicken: operator, marker: operator(concat('chicken_', after.value)), value: concat('chicken_', after.value), modifiers: append(['chicken'], after[0].modifiers)}')), variables({})), 'word': 'chicken'}), 'modifiers': ['chicken']}), 'unflatten': ['lover', 'lovee'], 'focusable': ['lover', 'lovee']})\n\n>>>>>>>>>>>>> Counter 7\n   *0. love/2  - \"kia loves chicken strips\"\n                                   value: love\n                                   text: kia loves chicken strips\n                                   marker: Operator(love/2, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: loves\n                                   do: Context({'left': 'lover', 'right': 'lovee', 'text': 'kia loves chicken strips'})\n                                   lover: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown', 'object']})\n                                   lovee: Context({'value': 'chicken_strip', 'text': 'chicken strips', 'marker': Operator(chicken_strip/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'strips', 'types': ['strip', 'chicken_strip', 'object'], 'chicken': Context({'value': 'chicken', 'text': 'chicken', 'marker': Operator(chicken/0, PASS, [Selector(Bridge('{ ...after, chicken: o\n                                   unflatten: [\n                                   'lover'\n,                                    'lovee'\n                                   ]\n                                   focusable: [\n                                   'lover'\n,                                    'lovee'\n                                   ]\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "do": {
            "left": "lover",
            "right": "lovee",
            "text": "kia loves chicken strips"
          },
          "focusable": [
            "lover",
            "lovee"
          ],
          "lovee": {
            "chicken": {
              "marker": "chicken",
              "text": "chicken",
              "value": "chicken",
              "word": "chicken"
            },
            "marker": "chicken_strip",
            "modifiers": [
              "chicken"
            ],
            "text": "chicken strips",
            "types": [
              "chicken_strip",
              "object"
            ],
            "value": "chicken_strip",
            "word": "strips"
          },
          "lover": {
            "marker": "unknown",
            "text": "kia",
            "types": [
              "object",
              "unknown"
            ],
            "unknown": true,
            "value": "kia",
            "word": "kia"
          },
          "marker": "love",
          "text": "kia loves chicken strips",
          "unflatten": [
            "lover",
            "lovee"
          ],
          "value": "love",
          "word": "loves",
          "topLevel": true,
          "ordering": "preference"
        }
      ],
      "generated": [
        "loves"
      ],
      "paraphrases": [
        "kia loves chicken strips"
      ],
      "responses": [
        ""
      ],
      "memory_free_percent": 70.4,
      "version": "6.13.45-beta.10",
      "query": "kia loves chicken strips"
    },
    {
      "hierarchy": [
        [
          "hate",
          "canBeQuestion"
        ],
        [
          "sushi",
          "hierarchyAble"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "food",
          "queryable"
        ],
        [
          "pidgeon",
          "queryable"
        ],
        [
          "human",
          "theAble"
        ],
        [
          "love",
          "canBeQuestion"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "owl",
          "theAble"
        ],
        [
          "dislike",
          "canBeDoQuestion"
        ],
        [
          "self",
          "queryable"
        ],
        [
          "dislike",
          "ifAble"
        ],
        [
          "parrot",
          "object"
        ],
        [
          "bird",
          "theAble"
        ],
        [
          "like",
          "orAble"
        ],
        [
          "dog",
          "object"
        ],
        [
          "canBeDoQuestion",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "mammal",
          "hierarchyAble"
        ],
        [
          "chicken_strip",
          "hierarchyAble"
        ],
        [
          "does_after_canBeDoQuestion_doesAble",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "cat",
          "queryable"
        ],
        [
          "mammal",
          "queryable"
        ],
        [
          "love",
          "canBeDoQuestion"
        ],
        [
          "dog",
          "queryable"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "hate",
          "canBeDoQuestion"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "human",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "feline",
          "queryable"
        ],
        [
          "strip",
          "theAble"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "bat",
          "queryable"
        ],
        [
          "like",
          "canBeQuestion"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "wolf",
          "object"
        ],
        [
          "dislike",
          "canBeQuestion"
        ],
        [
          "like",
          "ifAble"
        ],
        [
          "animal",
          "theAble"
        ],
        [
          "bird",
          "hierarchyAble"
        ],
        [
          "pidgeon",
          "hierarchyAble"
        ],
        [
          "strip",
          "concept"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "animal",
          "object"
        ],
        [
          "canine",
          "hierarchyAble"
        ],
        [
          "strip",
          "hierarchyAble"
        ],
        [
          "mammal",
          "object"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "have",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "questionMark_before_canBeQuestion_have",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "owl",
          "queryable"
        ],
        [
          "bat",
          "theAble"
        ],
        [
          "wolf",
          "hierarchyAble"
        ],
        [
          "food",
          "object"
        ],
        [
          "chicken_strip",
          "strip"
        ],
        [
          "strip",
          "queryable"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "feline",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "sushi",
          "object"
        ],
        [
          "parrot",
          "hierarchyAble"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "human",
          "object"
        ],
        [
          "hate",
          "orAble"
        ],
        [
          "animal",
          "queryable"
        ],
        [
          "canine",
          "theAble"
        ],
        [
          "animal",
          "hierarchyAble"
        ],
        [
          "pidgeon",
          "theAble"
        ],
        [
          "want",
          "ifAble"
        ],
        [
          "concept",
          "concept"
        ],
        [
          "wolf",
          "theAble"
        ],
        [
          "feline",
          "hierarchyAble"
        ],
        [
          "parrot",
          "theAble"
        ],
        [
          "bird",
          "object"
        ],
        [
          "want",
          "canBeQuestion"
        ],
        [
          "doesAble",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "eagle",
          "queryable"
        ],
        [
          "dislike",
          "orAble"
        ],
        [
          "whose",
          "object"
        ],
        [
          "dog",
          "theAble"
        ],
        [
          "parrot",
          "queryable"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "eagle",
          "object"
        ],
        [
          "mammal",
          "theAble"
        ],
        [
          "canBeQuestion",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "cat",
          "theAble"
        ],
        [
          "eagle",
          "hierarchyAble"
        ],
        [
          "cat",
          "object"
        ],
        [
          "feline",
          "object"
        ],
        [
          "food",
          "theAble"
        ],
        [
          "bird",
          "queryable"
        ],
        [
          "sushi",
          "theAble"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "owl",
          "object"
        ],
        [
          "canine",
          "object"
        ],
        [
          "love",
          "ifAble"
        ],
        [
          "bat",
          "hierarchyAble"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "pidgeon",
          "object"
        ],
        [
          "human",
          "hierarchyAble"
        ],
        [
          "food",
          "hierarchyAble"
        ],
        [
          "dog",
          "hierarchyAble"
        ],
        [
          "want",
          "canBeDoQuestion"
        ],
        [
          "want",
          "orAble"
        ],
        [
          "sushi",
          "queryable"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "wolf",
          "queryable"
        ],
        [
          "owl",
          "hierarchyAble"
        ],
        [
          "cat",
          "hierarchyAble"
        ],
        [
          "like",
          "canBeDoQuestion"
        ],
        [
          "love",
          "orAble"
        ],
        [
          "hate",
          "ifAble"
        ],
        [
          "eagle",
          "theAble"
        ],
        [
          "bat",
          "object"
        ],
        [
          "canine",
          "queryable"
        ],
        [
          "property",
          "queryable"
        ]
      ],
      "load_cache_time": 0.0052089691162109375,
      "logs": [
        "Undefined word 'kia'",
        "Op choices were: [(('unknown', 0), [('hate', 0), ('sushi', 0), ('unknown', 0)]), (('sushi', 0), [('hate', 0), ('sushi', 0)]), (('hate', 0), [('hate', 0)]), (('hate', 1), [('hate', 1)])]",
        "Contexts used for choosing operators (if the wrong choices were made update the priories array. Put the expected choice at the end of the list): \n  Context for choosing the operator unknown/0 was [['hate', 0], ['sushi', 0], ['unknown', 0]]\n  Context for choosing the operator sushi/0 was [['hate', 0], ['sushi', 0]]\n  Context for choosing the operator hate/0 was [['hate', 0]]\n  Context for choosing the operator hate/1 was [['hate', 1]]",
        "",
        "Semantic            No semantic applied                                                                       \n          TO        {                                                                                         \n                      \"marker\": \"controlStart\",                                                               \n                      \"controlRemove\": true,                                                                  \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n",
        "Semantic            KM 'ordering' ordinal: 6  notes: \"ordering setter\"                                        \n          APPLIED   Semantic(({context}) => context.marker == operator, ({context, km}) => {                  \n                              //const api = km('ordering').api                                                \n                              // api.setCategory(ordering.name, context[ordering.object].value, context[orderi\n                    ng.category].value, context)                                                              \n                              const propertiesAPI = km('properties').api                                      \n                              context.ordering = ordering.name                                                \n                              const fcontexts = flattens(['list'], [context])                                 \n                              for (const fcontext of fcontexts) {                                             \n                                fcontext.paraphrase = true                                                    \n                                fcontext[ordering.object].paraphrase = true                                   \n                                fcontext[ordering.category].paraphrase = true                                 \n                              }                                                                               \n                              propertiesAPI.relation_add(fcontexts)                                           \n                            })                                                                                \n          TO        {                                                                                         \n                      \"do\": {                                                                                 \n                        \"left\": \"hater\",                                                                      \n                        \"right\": \"hatee\",                                                                     \n                        \"text\": \"kia hates sushi\"                                                             \n                      },                                                                                      \n                      \"focusable\": [                                                                          \n                        \"hater\",                                                                              \n                        \"hatee\"                                                                               \n                      ],                                                                                      \n                      \"hatee\": {                                                                              \n                        \"marker\": \"sushi\",                                                                    \n                        \"number\": \"one\",                                                                      \n                        \"text\": \"sushi\",                                                                      \n                        \"types\": [                                                                            \n                          \"sushi\"                                                                             \n                        ],                                                                                    \n                        \"value\": \"sushi\",                                                                     \n                        \"word\": \"sushi\"                                                                       \n                      },                                                                                      \n                      \"hater\": {                                                                              \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"kia\",                                                                        \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"kia\",                                                                       \n                        \"word\": \"kia\"                                                                         \n                      },                                                                                      \n                      \"marker\": \"hate\",                                                                       \n                      \"text\": \"kia hates sushi\",                                                              \n                      \"unflatten\": [                                                                          \n                        \"hater\",                                                                              \n                        \"hatee\"                                                                               \n                      ],                                                                                      \n                      \"value\": \"hate\",                                                                        \n                      \"word\": \"hates\",                                                                        \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n          STACK     Context#2: call2                                                                          \n          RESULT    {                                                                                         \n                      \"do\": {                                                                                 \n                        \"left\": \"hater\",                                                                      \n                        \"right\": \"hatee\",                                                                     \n                        \"text\": \"kia hates sushi\"                                                             \n                      },                                                                                      \n                      \"focusable\": [                                                                          \n                        \"hater\",                                                                              \n                        \"hatee\"                                                                               \n                      ],                                                                                      \n                      \"hatee\": {                                                                              \n                        \"marker\": \"sushi\",                                                                    \n                        \"number\": \"one\",                                                                      \n                        \"text\": \"sushi\",                                                                      \n                        \"types\": [                                                                            \n                          \"sushi\"                                                                             \n                        ],                                                                                    \n                        \"value\": \"sushi\",                                                                     \n                        \"word\": \"sushi\"                                                                       \n                      },                                                                                      \n                      \"hater\": {                                                                              \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"kia\",                                                                        \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"kia\",                                                                       \n                        \"word\": \"kia\"                                                                         \n                      },                                                                                      \n                      \"marker\": \"hate\",                                                                       \n                      \"text\": \"kia hates sushi\",                                                              \n                      \"unflatten\": [                                                                          \n                        \"hater\",                                                                              \n                        \"hatee\"                                                                               \n                      ],                                                                                      \n                      \"value\": \"hate\",                                                                        \n                      \"word\": \"hates\",                                                                        \n                      \"topLevel\": true,                                                                       \n                      \"ordering\": \"preference\"                                                                \n                    }                                                                                         \n",
        "Generator           KM 'dialogues' ordinal: 29  notes: \"show word\"                                            \n          APPLIED   Generator(({context}) => context.word, ({context}) => context.word)                       \n          TO        {                                                                                         \n                      \"do\": {                                                                                 \n                        \"left\": \"hater\",                                                                      \n                        \"right\": \"hatee\",                                                                     \n                        \"text\": \"kia hates sushi\"                                                             \n                      },                                                                                      \n                      \"focusable\": [                                                                          \n                        \"hater\",                                                                              \n                        \"hatee\"                                                                               \n                      ],                                                                                      \n                      \"hatee\": {                                                                              \n                        \"marker\": \"sushi\",                                                                    \n                        \"number\": \"one\",                                                                      \n                        \"text\": \"sushi\",                                                                      \n                        \"types\": [                                                                            \n                          \"sushi\"                                                                             \n                        ],                                                                                    \n                        \"value\": \"sushi\",                                                                     \n                        \"word\": \"sushi\"                                                                       \n                      },                                                                                      \n                      \"hater\": {                                                                              \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"kia\",                                                                        \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"kia\",                                                                       \n                        \"word\": \"kia\"                                                                         \n                      },                                                                                      \n                      \"marker\": \"hate\",                                                                       \n                      \"text\": \"kia hates sushi\",                                                              \n                      \"unflatten\": [                                                                          \n                        \"hater\",                                                                              \n                        \"hatee\"                                                                               \n                      ],                                                                                      \n                      \"value\": \"hate\",                                                                        \n                      \"word\": \"hates\",                                                                        \n                      \"topLevel\": true,                                                                       \n                      \"ordering\": \"preference\",                                                               \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call3                                                                          \n          RESULT    hates                                                                                     \n",
        "Generator           KM 'dialogues' ordinal: 14                                                                \n          APPLIED   Generator(({context}) => context.marker == 'unknown', ({context}) => {                    \n                            if (typeof context.marker === 'string') {                                         \n                              return context.value                                                            \n                            } else {                                                                          \n                              JSON.stringify(context.value)                                                   \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"kia\",                                                                          \n                      \"types\": [                                                                              \n                        \"object\",                                                                             \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"kia\",                                                                         \n                      \"word\": \"kia\",                                                                          \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call5                                                                    \n          RESULT    kia                                                                                       \n",
        "Generator           KM 'dialogues' ordinal: 25                                                                \n          APPLIED   Generator(({context}) => context.paraphrase && context.word, ({context}) => `${context.wor\n                    d}`)                                                                                      \n          TO        {                                                                                         \n                      \"marker\": \"sushi\",                                                                      \n                      \"number\": \"one\",                                                                        \n                      \"text\": \"sushi\",                                                                        \n                      \"types\": [                                                                              \n                        \"sushi\"                                                                               \n                      ],                                                                                      \n                      \"value\": \"sushi\",                                                                       \n                      \"word\": \"sushi\",                                                                        \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call6                                                                    \n          RESULT    sushi                                                                                     \n",
        "Generator           KM 'ordering' ordinal: 8  notes: \"ordering generator for paraphrase\"                      \n          APPLIED   Generator(({context}) => context.marker == operator && context.paraphrase && !context.quer\n                    y, ({context, g}) => {                                                                    \n                            const beforeGenerator = before.map( (arg) => g(context[arg.tag]) )                \n                            const afterGenerator = after.map( (arg) => g(context[arg.tag]) )                  \n                            return beforeGenerator.concat([`${context.word}`]).concat(afterGenerator).join(' '\n                    )                                                                                         \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"do\": {                                                                                 \n                        \"left\": \"hater\",                                                                      \n                        \"right\": \"hatee\",                                                                     \n                        \"text\": \"kia hates sushi\"                                                             \n                      },                                                                                      \n                      \"focusable\": [                                                                          \n                        \"hater\",                                                                              \n                        \"hatee\"                                                                               \n                      ],                                                                                      \n                      \"hatee\": {                                                                              \n                        \"marker\": \"sushi\",                                                                    \n                        \"number\": \"one\",                                                                      \n                        \"text\": \"sushi\",                                                                      \n                        \"types\": [                                                                            \n                          \"sushi\"                                                                             \n                        ],                                                                                    \n                        \"value\": \"sushi\",                                                                     \n                        \"word\": \"sushi\"                                                                       \n                      },                                                                                      \n                      \"hater\": {                                                                              \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"kia\",                                                                        \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"kia\",                                                                       \n                        \"word\": \"kia\"                                                                         \n                      },                                                                                      \n                      \"marker\": \"hate\",                                                                       \n                      \"text\": \"kia hates sushi\",                                                              \n                      \"unflatten\": [                                                                          \n                        \"hater\",                                                                              \n                        \"hatee\"                                                                               \n                      ],                                                                                      \n                      \"value\": \"hate\",                                                                        \n                      \"word\": \"hates\",                                                                        \n                      \"topLevel\": true,                                                                       \n                      \"ordering\": \"preference\",                                                               \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4                                                                          \n          RESULT    kia hates sushi                                                                           \n",
        "Semantic            No semantic applied                                                                       \n          TO        {                                                                                         \n                      \"marker\": \"controlEnd\",                                                                 \n                      \"controlRemove\": true,                                                                  \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n"
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "hate",
                0
              ],
              [
                "sushi",
                0
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "sushi",
              0
            ],
            "ops": [
              [
                "hate",
                0
              ],
              [
                "sushi",
                0
              ]
            ]
          },
          {
            "op": [
              "hate",
              0
            ],
            "ops": [
              [
                "hate",
                0
              ]
            ]
          },
          {
            "op": [
              "hate",
              1
            ],
            "ops": [
              [
                "hate",
                1
              ]
            ]
          }
        ]
      },
      "times": 0.7343850135803223,
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  - \"kia\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: kia\n                                   text: kia\n                                   value: kia\n    1. hate/0  - \"hates\"\n                                   value: hate\n                                   text: hates\n                                   marker: Operator(hate/0, [Selector(Bridge('{ ... next(operator) , do: { left: \"hater\", right: \"hatee\" }  , hater: before[0]  , hatee*: after[0] , unflatten: [\"hater\",\"hatee\"], focusable: [\"hater\",\"hatee\"] }'), [Type('object')]<==>[Type('object')])], evaluator(Bridge('{ ... next(operator) , do: { left: \"hater\", right: \"hatee\" }  , hater: before[0]  , hatee*: after\n                                   word: hates\n    2. sushi/0  - \"sushi\"\n                                   value: sushi\n                                   number: one\n                                   text: sushi\n                                   marker: Operator(sushi/0, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({}))\n                                   word: sushi\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({'marker': Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia'})\n\n>>>>>>>>>>>>> Counter 2\n   *0. unknown/1  - \"kia\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: kia\n                                   text: kia\n                                   value: kia\n                                   unknown: True\n    1. hate/0  - \"hates\"\n                                   value: hate\n                                   text: hates\n                                   marker: Operator(hate/0, [Selector(Bridge('{ ... next(operator) , do: { left: \"hater\", right: \"hatee\" }  , hater: before[0]  , hatee*: after[0] , unflatten: [\"hater\",\"hatee\"], focusable: [\"hater\",\"hatee\"] }'), [Type('object')]<==>[Type('object')])], evaluator(Bridge('{ ... next(operator) , do: { left: \"hater\", right: \"hatee\" }  , hater: before[0]  , hatee*: after\n                                   word: hates\n    2. sushi/0  - \"sushi\"\n                                   value: sushi\n                                   number: one\n                                   text: sushi\n                                   marker: Operator(sushi/0, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({}))\n                                   word: sushi\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({'value': 'sushi', 'number': 'one', 'text': 'sushi', 'marker': Operator(sushi/0, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({})), 'word': 'sushi'})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/1  - \"kia\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: kia\n                                   text: kia\n                                   value: kia\n                                   unknown: True\n    1. hate/0  - \"hates\"\n                                   value: hate\n                                   text: hates\n                                   marker: Operator(hate/0, [Selector(Bridge('{ ... next(operator) , do: { left: \"hater\", right: \"hatee\" }  , hater: before[0]  , hatee*: after[0] , unflatten: [\"hater\",\"hatee\"], focusable: [\"hater\",\"hatee\"] }'), [Type('object')]<==>[Type('object')])], evaluator(Bridge('{ ... next(operator) , do: { left: \"hater\", right: \"hatee\" }  , hater: before[0]  , hatee*: after\n                                   word: hates\n   *2. sushi/1  - \"sushi\"\n                                   value: sushi\n                                   number: one\n                                   text: sushi\n                                   marker: Operator(sushi/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: sushi\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({'value': 'hate', 'text': 'hates', 'marker': Operator(hate/0, [Selector(Bridge('{ ... next(operator) , do: { left: \"hater\", right: \"hatee\" }  , hater: before[0]  , hatee*: after[0] , unflatten: [\"hater\",\"hatee\"], focusable: [\"hater\",\"hatee\"] }'), [Type('object')]<==>[Type('object')])], evaluator(Bridge('{ ... next(operator) , do: { left: \"hater\", right: \"hatee\" }  , hater: before[0]  , hatee*: after[0] , unflatten: [\"hater\",\"hatee\"], focusable: [\"hater\",\"hatee\"] }')), variables({})), 'word': 'hates'})\n\n>>>>>>>>>>>>> Counter 4\n   *0. hate/1  - \"kia hates sushi\"\n                                   value: hate\n                                   text: kia hates sushi\n                                   marker: Operator(hate/1, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({}))\n                                   word: hates\n                                   do: Context({'left': 'hater', 'right': 'hatee', 'text': 'kia hates sushi'})\n                                   hater: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown', 'object']})\n                                   hatee: Context({'value': 'sushi', 'number': 'one', 'text': 'sushi', 'marker': Operator(sushi/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'sushi', 'types': ['sushi']})\n                                   unflatten: [\n                                   'hater'\n,                                    'hatee'\n                                   ]\n                                   focusable: [\n                                   'hater'\n,                                    'hatee'\n                                   ]\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({'value': 'hate', 'text': 'kia hates sushi', 'marker': Operator(hate/1, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({})), 'word': 'hates', 'do': Context({'left': 'hater', 'right': 'hatee', 'text': 'kia hates sushi'}), 'hater': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown', 'object']}), 'hatee': Context({'value': 'sushi', 'number': 'one', 'text': 'sushi', 'marker': Operator(sushi/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'sushi', 'types': ['sushi']}), 'unflatten': ['hater', 'hatee'], 'focusable': ['hater', 'hatee']})\n\n>>>>>>>>>>>>> Counter 5\n   *0. hate/2  - \"kia hates sushi\"\n                                   value: hate\n                                   text: kia hates sushi\n                                   marker: Operator(hate/2, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: hates\n                                   do: Context({'left': 'hater', 'right': 'hatee', 'text': 'kia hates sushi'})\n                                   hater: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown', 'object']})\n                                   hatee: Context({'value': 'sushi', 'number': 'one', 'text': 'sushi', 'marker': Operator(sushi/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'sushi', 'types': ['sushi']})\n                                   unflatten: [\n                                   'hater'\n,                                    'hatee'\n                                   ]\n                                   focusable: [\n                                   'hater'\n,                                    'hatee'\n                                   ]\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "do": {
            "left": "hater",
            "right": "hatee",
            "text": "kia hates sushi"
          },
          "focusable": [
            "hater",
            "hatee"
          ],
          "hatee": {
            "marker": "sushi",
            "number": "one",
            "text": "sushi",
            "types": [
              "sushi"
            ],
            "value": "sushi",
            "word": "sushi"
          },
          "hater": {
            "marker": "unknown",
            "text": "kia",
            "types": [
              "object",
              "unknown"
            ],
            "unknown": true,
            "value": "kia",
            "word": "kia"
          },
          "marker": "hate",
          "text": "kia hates sushi",
          "unflatten": [
            "hater",
            "hatee"
          ],
          "value": "hate",
          "word": "hates",
          "topLevel": true,
          "ordering": "preference"
        }
      ],
      "generated": [
        "hates"
      ],
      "paraphrases": [
        "kia hates sushi"
      ],
      "responses": [
        ""
      ],
      "memory_free_percent": 70.9,
      "version": "6.13.45-beta.10",
      "query": "kia hates sushi"
    },
    {
      "hierarchy": [
        [
          "hate",
          "canBeQuestion"
        ],
        [
          "sushi",
          "hierarchyAble"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "food",
          "queryable"
        ],
        [
          "pidgeon",
          "queryable"
        ],
        [
          "human",
          "theAble"
        ],
        [
          "love",
          "canBeQuestion"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "owl",
          "theAble"
        ],
        [
          "dislike",
          "canBeDoQuestion"
        ],
        [
          "self",
          "queryable"
        ],
        [
          "dislike",
          "ifAble"
        ],
        [
          "parrot",
          "object"
        ],
        [
          "bird",
          "theAble"
        ],
        [
          "like",
          "orAble"
        ],
        [
          "dog",
          "object"
        ],
        [
          "canBeDoQuestion",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "mammal",
          "hierarchyAble"
        ],
        [
          "chicken_strip",
          "hierarchyAble"
        ],
        [
          "does_after_canBeDoQuestion_doesAble",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "cat",
          "queryable"
        ],
        [
          "mammal",
          "queryable"
        ],
        [
          "love",
          "canBeDoQuestion"
        ],
        [
          "dog",
          "queryable"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "hate",
          "canBeDoQuestion"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "human",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "feline",
          "queryable"
        ],
        [
          "strip",
          "theAble"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "bat",
          "queryable"
        ],
        [
          "like",
          "canBeQuestion"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "wolf",
          "object"
        ],
        [
          "dislike",
          "canBeQuestion"
        ],
        [
          "like",
          "ifAble"
        ],
        [
          "animal",
          "theAble"
        ],
        [
          "bird",
          "hierarchyAble"
        ],
        [
          "pidgeon",
          "hierarchyAble"
        ],
        [
          "strip",
          "concept"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "animal",
          "object"
        ],
        [
          "canine",
          "hierarchyAble"
        ],
        [
          "strip",
          "hierarchyAble"
        ],
        [
          "mammal",
          "object"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "have",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "questionMark_before_canBeQuestion_have",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "owl",
          "queryable"
        ],
        [
          "bat",
          "theAble"
        ],
        [
          "wolf",
          "hierarchyAble"
        ],
        [
          "food",
          "object"
        ],
        [
          "chicken_strip",
          "strip"
        ],
        [
          "strip",
          "queryable"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "feline",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "sushi",
          "object"
        ],
        [
          "parrot",
          "hierarchyAble"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "human",
          "object"
        ],
        [
          "hate",
          "orAble"
        ],
        [
          "animal",
          "queryable"
        ],
        [
          "canine",
          "theAble"
        ],
        [
          "animal",
          "hierarchyAble"
        ],
        [
          "pidgeon",
          "theAble"
        ],
        [
          "want",
          "ifAble"
        ],
        [
          "concept",
          "concept"
        ],
        [
          "wolf",
          "theAble"
        ],
        [
          "feline",
          "hierarchyAble"
        ],
        [
          "parrot",
          "theAble"
        ],
        [
          "bird",
          "object"
        ],
        [
          "want",
          "canBeQuestion"
        ],
        [
          "doesAble",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "eagle",
          "queryable"
        ],
        [
          "dislike",
          "orAble"
        ],
        [
          "whose",
          "object"
        ],
        [
          "dog",
          "theAble"
        ],
        [
          "parrot",
          "queryable"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "eagle",
          "object"
        ],
        [
          "mammal",
          "theAble"
        ],
        [
          "canBeQuestion",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "cat",
          "theAble"
        ],
        [
          "eagle",
          "hierarchyAble"
        ],
        [
          "cat",
          "object"
        ],
        [
          "feline",
          "object"
        ],
        [
          "food",
          "theAble"
        ],
        [
          "bird",
          "queryable"
        ],
        [
          "sushi",
          "theAble"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "owl",
          "object"
        ],
        [
          "canine",
          "object"
        ],
        [
          "love",
          "ifAble"
        ],
        [
          "bat",
          "hierarchyAble"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "pidgeon",
          "object"
        ],
        [
          "human",
          "hierarchyAble"
        ],
        [
          "food",
          "hierarchyAble"
        ],
        [
          "dog",
          "hierarchyAble"
        ],
        [
          "want",
          "canBeDoQuestion"
        ],
        [
          "want",
          "orAble"
        ],
        [
          "sushi",
          "queryable"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "wolf",
          "queryable"
        ],
        [
          "owl",
          "hierarchyAble"
        ],
        [
          "cat",
          "hierarchyAble"
        ],
        [
          "like",
          "canBeDoQuestion"
        ],
        [
          "love",
          "orAble"
        ],
        [
          "hate",
          "ifAble"
        ],
        [
          "eagle",
          "theAble"
        ],
        [
          "bat",
          "object"
        ],
        [
          "canine",
          "queryable"
        ],
        [
          "property",
          "queryable"
        ]
      ],
      "load_cache_time": 0.012311935424804688,
      "logs": [
        "Undefined word 'hana'",
        "Op choices were: [(('unknown', 0), [('chicken', 0), ('like', 0), ('strip', 0), ('unknown', 0)]), (('strip', 0), [('chicken', 0), ('like', 0), ('strip', 0)]), (('chicken', 0), [('chicken', 0), ('like', 0)]), (('chicken_strip', 0), [('chicken_strip', 0), ('like', 0)]), (('like', 0), [('like', 0)]), (('like', 1), [('like', 1)])]",
        "Contexts used for choosing operators (if the wrong choices were made update the priories array. Put the expected choice at the end of the list): \n  Context for choosing the operator unknown/0 was [['chicken', 0], ['like', 0], ['strip', 0], ['unknown', 0]]\n  Context for choosing the operator strip/0 was [['chicken', 0], ['like', 0], ['strip', 0]]\n  Context for choosing the operator chicken/0 was [['chicken', 0], ['like', 0]]\n  Context for choosing the operator chicken_strip/0 was [['chicken_strip', 0], ['like', 0]]\n  Context for choosing the operator like/0 was [['like', 0]]\n  Context for choosing the operator like/1 was [['like', 1]]",
        "",
        "Semantic            No semantic applied                                                                       \n          TO        {                                                                                         \n                      \"marker\": \"controlStart\",                                                               \n                      \"controlRemove\": true,                                                                  \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n",
        "Semantic            KM 'ordering' ordinal: 2  notes: \"ordering setter\"                                        \n          APPLIED   Semantic(({context}) => context.marker == operator, ({context, km}) => {                  \n                              //const api = km('ordering').api                                                \n                              // api.setCategory(ordering.name, context[ordering.object].value, context[orderi\n                    ng.category].value, context)                                                              \n                              const propertiesAPI = km('properties').api                                      \n                              context.ordering = ordering.name                                                \n                              const fcontexts = flattens(['list'], [context])                                 \n                              for (const fcontext of fcontexts) {                                             \n                                fcontext.paraphrase = true                                                    \n                                fcontext[ordering.object].paraphrase = true                                   \n                                fcontext[ordering.category].paraphrase = true                                 \n                              }                                                                               \n                              propertiesAPI.relation_add(fcontexts)                                           \n                            })                                                                                \n          TO        {                                                                                         \n                      \"do\": {                                                                                 \n                        \"left\": \"liker\",                                                                      \n                        \"right\": \"likee\",                                                                     \n                        \"text\": \"hana likes chicken strips\"                                                   \n                      },                                                                                      \n                      \"focusable\": [                                                                          \n                        \"liker\",                                                                              \n                        \"likee\"                                                                               \n                      ],                                                                                      \n                      \"likee\": {                                                                              \n                        \"chicken\": {                                                                          \n                          \"marker\": \"chicken\",                                                                \n                          \"text\": \"chicken\",                                                                  \n                          \"value\": \"chicken\",                                                                 \n                          \"word\": \"chicken\"                                                                   \n                        },                                                                                    \n                        \"marker\": \"chicken_strip\",                                                            \n                        \"modifiers\": [                                                                        \n                          \"chicken\"                                                                           \n                        ],                                                                                    \n                        \"text\": \"chicken strips\",                                                             \n                        \"types\": [                                                                            \n                          \"chicken_strip\",                                                                    \n                          \"object\"                                                                            \n                        ],                                                                                    \n                        \"value\": \"chicken_strip\",                                                             \n                        \"word\": \"strips\"                                                                      \n                      },                                                                                      \n                      \"liker\": {                                                                              \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hana\",                                                                       \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hana\",                                                                      \n                        \"word\": \"hana\"                                                                        \n                      },                                                                                      \n                      \"marker\": \"like\",                                                                       \n                      \"text\": \"hana likes chicken strips\",                                                    \n                      \"unflatten\": [                                                                          \n                        \"liker\",                                                                              \n                        \"likee\"                                                                               \n                      ],                                                                                      \n                      \"value\": \"like\",                                                                        \n                      \"word\": \"likes\",                                                                        \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n          STACK     Context#2: call2                                                                          \n          RESULT    {                                                                                         \n                      \"do\": {                                                                                 \n                        \"left\": \"liker\",                                                                      \n                        \"right\": \"likee\",                                                                     \n                        \"text\": \"hana likes chicken strips\"                                                   \n                      },                                                                                      \n                      \"focusable\": [                                                                          \n                        \"liker\",                                                                              \n                        \"likee\"                                                                               \n                      ],                                                                                      \n                      \"likee\": {                                                                              \n                        \"chicken\": {                                                                          \n                          \"marker\": \"chicken\",                                                                \n                          \"text\": \"chicken\",                                                                  \n                          \"value\": \"chicken\",                                                                 \n                          \"word\": \"chicken\"                                                                   \n                        },                                                                                    \n                        \"marker\": \"chicken_strip\",                                                            \n                        \"modifiers\": [                                                                        \n                          \"chicken\"                                                                           \n                        ],                                                                                    \n                        \"text\": \"chicken strips\",                                                             \n                        \"types\": [                                                                            \n                          \"chicken_strip\",                                                                    \n                          \"object\"                                                                            \n                        ],                                                                                    \n                        \"value\": \"chicken_strip\",                                                             \n                        \"word\": \"strips\"                                                                      \n                      },                                                                                      \n                      \"liker\": {                                                                              \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hana\",                                                                       \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hana\",                                                                      \n                        \"word\": \"hana\"                                                                        \n                      },                                                                                      \n                      \"marker\": \"like\",                                                                       \n                      \"text\": \"hana likes chicken strips\",                                                    \n                      \"unflatten\": [                                                                          \n                        \"liker\",                                                                              \n                        \"likee\"                                                                               \n                      ],                                                                                      \n                      \"value\": \"like\",                                                                        \n                      \"word\": \"likes\",                                                                        \n                      \"topLevel\": true,                                                                       \n                      \"ordering\": \"preference\"                                                                \n                    }                                                                                         \n",
        "Generator           KM 'dialogues' ordinal: 29  notes: \"show word\"                                            \n          APPLIED   Generator(({context}) => context.word, ({context}) => context.word)                       \n          TO        {                                                                                         \n                      \"do\": {                                                                                 \n                        \"left\": \"liker\",                                                                      \n                        \"right\": \"likee\",                                                                     \n                        \"text\": \"hana likes chicken strips\"                                                   \n                      },                                                                                      \n                      \"focusable\": [                                                                          \n                        \"liker\",                                                                              \n                        \"likee\"                                                                               \n                      ],                                                                                      \n                      \"likee\": {                                                                              \n                        \"chicken\": {                                                                          \n                          \"marker\": \"chicken\",                                                                \n                          \"text\": \"chicken\",                                                                  \n                          \"value\": \"chicken\",                                                                 \n                          \"word\": \"chicken\"                                                                   \n                        },                                                                                    \n                        \"marker\": \"chicken_strip\",                                                            \n                        \"modifiers\": [                                                                        \n                          \"chicken\"                                                                           \n                        ],                                                                                    \n                        \"text\": \"chicken strips\",                                                             \n                        \"types\": [                                                                            \n                          \"chicken_strip\",                                                                    \n                          \"object\"                                                                            \n                        ],                                                                                    \n                        \"value\": \"chicken_strip\",                                                             \n                        \"word\": \"strips\"                                                                      \n                      },                                                                                      \n                      \"liker\": {                                                                              \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hana\",                                                                       \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hana\",                                                                      \n                        \"word\": \"hana\"                                                                        \n                      },                                                                                      \n                      \"marker\": \"like\",                                                                       \n                      \"text\": \"hana likes chicken strips\",                                                    \n                      \"unflatten\": [                                                                          \n                        \"liker\",                                                                              \n                        \"likee\"                                                                               \n                      ],                                                                                      \n                      \"value\": \"like\",                                                                        \n                      \"word\": \"likes\",                                                                        \n                      \"topLevel\": true,                                                                       \n                      \"ordering\": \"preference\",                                                               \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call3                                                                          \n          RESULT    likes                                                                                     \n",
        "Generator           KM 'dialogues' ordinal: 14                                                                \n          APPLIED   Generator(({context}) => context.marker == 'unknown', ({context}) => {                    \n                            if (typeof context.marker === 'string') {                                         \n                              return context.value                                                            \n                            } else {                                                                          \n                              JSON.stringify(context.value)                                                   \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"hana\",                                                                         \n                      \"types\": [                                                                              \n                        \"object\",                                                                             \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"hana\",                                                                        \n                      \"word\": \"hana\",                                                                         \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call5                                                                    \n          RESULT    hana                                                                                      \n",
        "Generator           KM 'dialogues' ordinal: 25                                                                \n          APPLIED   Generator(({context}) => context.paraphrase && context.word, ({context}) => `${context.wor\n                    d}`)                                                                                      \n          TO        {                                                                                         \n                      \"marker\": \"chicken\",                                                                    \n                      \"text\": \"chicken\",                                                                      \n                      \"value\": \"chicken\",                                                                     \n                      \"word\": \"chicken\",                                                                      \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call6,call7                                                              \n          RESULT    chicken                                                                                   \n",
        "Generator           KM 'dialogues' ordinal: 4                                                                 \n          APPLIED   Generator(({context}) => context.paraphrase && context.modifiers, ({context, g}) => {     \n                            const text = []                                                                   \n                            for (modifier of context.modifiers) {                                             \n                              text.push(g(context[modifier]))                                                 \n                            }                                                                                 \n                            text.push(context.word)                                                           \n                            return text.join(' ')                                                             \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"chicken\": {                                                                            \n                        \"marker\": \"chicken\",                                                                  \n                        \"text\": \"chicken\",                                                                    \n                        \"value\": \"chicken\",                                                                   \n                        \"word\": \"chicken\"                                                                     \n                      },                                                                                      \n                      \"marker\": \"chicken_strip\",                                                              \n                      \"modifiers\": [                                                                          \n                        \"chicken\"                                                                             \n                      ],                                                                                      \n                      \"text\": \"chicken strips\",                                                               \n                      \"types\": [                                                                              \n                        \"chicken_strip\",                                                                      \n                        \"object\"                                                                              \n                      ],                                                                                      \n                      \"value\": \"chicken_strip\",                                                               \n                      \"word\": \"strips\",                                                                       \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call6                                                                    \n          RESULT    chicken strips                                                                            \n",
        "Generator           KM 'ordering' ordinal: 4  notes: \"ordering generator for paraphrase\"                      \n          APPLIED   Generator(({context}) => context.marker == operator && context.paraphrase && !context.quer\n                    y, ({context, g}) => {                                                                    \n                            const beforeGenerator = before.map( (arg) => g(context[arg.tag]) )                \n                            const afterGenerator = after.map( (arg) => g(context[arg.tag]) )                  \n                            return beforeGenerator.concat([`${context.word}`]).concat(afterGenerator).join(' '\n                    )                                                                                         \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"do\": {                                                                                 \n                        \"left\": \"liker\",                                                                      \n                        \"right\": \"likee\",                                                                     \n                        \"text\": \"hana likes chicken strips\"                                                   \n                      },                                                                                      \n                      \"focusable\": [                                                                          \n                        \"liker\",                                                                              \n                        \"likee\"                                                                               \n                      ],                                                                                      \n                      \"likee\": {                                                                              \n                        \"chicken\": {                                                                          \n                          \"marker\": \"chicken\",                                                                \n                          \"text\": \"chicken\",                                                                  \n                          \"value\": \"chicken\",                                                                 \n                          \"word\": \"chicken\"                                                                   \n                        },                                                                                    \n                        \"marker\": \"chicken_strip\",                                                            \n                        \"modifiers\": [                                                                        \n                          \"chicken\"                                                                           \n                        ],                                                                                    \n                        \"text\": \"chicken strips\",                                                             \n                        \"types\": [                                                                            \n                          \"chicken_strip\",                                                                    \n                          \"object\"                                                                            \n                        ],                                                                                    \n                        \"value\": \"chicken_strip\",                                                             \n                        \"word\": \"strips\"                                                                      \n                      },                                                                                      \n                      \"liker\": {                                                                              \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hana\",                                                                       \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hana\",                                                                      \n                        \"word\": \"hana\"                                                                        \n                      },                                                                                      \n                      \"marker\": \"like\",                                                                       \n                      \"text\": \"hana likes chicken strips\",                                                    \n                      \"unflatten\": [                                                                          \n                        \"liker\",                                                                              \n                        \"likee\"                                                                               \n                      ],                                                                                      \n                      \"value\": \"like\",                                                                        \n                      \"word\": \"likes\",                                                                        \n                      \"topLevel\": true,                                                                       \n                      \"ordering\": \"preference\",                                                               \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4                                                                          \n          RESULT    hana likes chicken strips                                                                 \n",
        "Semantic            No semantic applied                                                                       \n          TO        {                                                                                         \n                      \"marker\": \"controlEnd\",                                                                 \n                      \"controlRemove\": true,                                                                  \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n"
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "chicken",
                0
              ],
              [
                "like",
                0
              ],
              [
                "strip",
                0
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "strip",
              0
            ],
            "ops": [
              [
                "chicken",
                0
              ],
              [
                "like",
                0
              ],
              [
                "strip",
                0
              ]
            ]
          },
          {
            "op": [
              "chicken",
              0
            ],
            "ops": [
              [
                "chicken",
                0
              ],
              [
                "like",
                0
              ]
            ]
          },
          {
            "op": [
              "chicken_strip",
              0
            ],
            "ops": [
              [
                "chicken_strip",
                0
              ],
              [
                "like",
                0
              ]
            ]
          },
          {
            "op": [
              "like",
              0
            ],
            "ops": [
              [
                "like",
                0
              ]
            ]
          },
          {
            "op": [
              "like",
              1
            ],
            "ops": [
              [
                "like",
                1
              ]
            ]
          }
        ]
      },
      "times": 1.0673949718475342,
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  - \"hana\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: hana\n                                   text: hana\n                                   value: hana\n    1. like/0  - \"likes\"\n                                   value: like\n                                   text: likes\n                                   marker: Operator(like/0, [Selector(Bridge('{ ... next(operator) , do: { left: \"liker\", right: \"likee\" }  , liker: before[0]  , likee*: after[0] , unflatten: [\"liker\",\"likee\"], focusable: [\"liker\",\"likee\"] }'), [Type('object')]<==>[Type('object')])], evaluator(Bridge('{ ... next(operator) , do: { left: \"liker\", right: \"likee\" }  , liker: before[0]  , likee*: after\n                                   word: likes\n    2. chicken/0  - \"chicken\"\n                                   value: chicken\n                                   text: chicken\n                                   marker: Operator(chicken/0, PASS, [Selector(Bridge('{ ...after, chicken: operator, marker: operator(concat('chicken_', after.value)), value: concat('chicken_', after.value), modifiers: append(['chicken'], after[0].modifiers)}'), []<==>[Type('strip')])], evaluator(Bridge('{ ...after, chicken: operator, marker: operator(concat('chicken_', after.value)), value: conc\n                                   word: chicken\n    3. strip/0  - \"strips\"\n                                   value: strip\n                                   text: strips\n                                   marker: Operator(strip/0, [Selector(Bridge('{ ...next(operator), value: 'strip' }'), []<==>[])], evaluator(Bridge('{ ...next(operator), value: 'strip' }')), variables({}))\n                                   word: strips\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({'marker': Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana'})\n\n>>>>>>>>>>>>> Counter 2\n   *0. unknown/1  - \"hana\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: hana\n                                   text: hana\n                                   value: hana\n                                   unknown: True\n    1. like/0  - \"likes\"\n                                   value: like\n                                   text: likes\n                                   marker: Operator(like/0, [Selector(Bridge('{ ... next(operator) , do: { left: \"liker\", right: \"likee\" }  , liker: before[0]  , likee*: after[0] , unflatten: [\"liker\",\"likee\"], focusable: [\"liker\",\"likee\"] }'), [Type('object')]<==>[Type('object')])], evaluator(Bridge('{ ... next(operator) , do: { left: \"liker\", right: \"likee\" }  , liker: before[0]  , likee*: after\n                                   word: likes\n    2. chicken/0  - \"chicken\"\n                                   value: chicken\n                                   text: chicken\n                                   marker: Operator(chicken/0, PASS, [Selector(Bridge('{ ...after, chicken: operator, marker: operator(concat('chicken_', after.value)), value: concat('chicken_', after.value), modifiers: append(['chicken'], after[0].modifiers)}'), []<==>[Type('strip')])], evaluator(Bridge('{ ...after, chicken: operator, marker: operator(concat('chicken_', after.value)), value: conc\n                                   word: chicken\n    3. strip/0  - \"strips\"\n                                   value: strip\n                                   text: strips\n                                   marker: Operator(strip/0, [Selector(Bridge('{ ...next(operator), value: 'strip' }'), []<==>[])], evaluator(Bridge('{ ...next(operator), value: 'strip' }')), variables({}))\n                                   word: strips\n<<<<<<<<<<<<<\nNext Op (index=3) is Context({'value': 'strip', 'text': 'strips', 'marker': Operator(strip/0, [Selector(Bridge('{ ...next(operator), value: 'strip' }'), []<==>[])], evaluator(Bridge('{ ...next(operator), value: 'strip' }')), variables({})), 'word': 'strips'})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/1  - \"hana\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: hana\n                                   text: hana\n                                   value: hana\n                                   unknown: True\n    1. like/0  - \"likes\"\n                                   value: like\n                                   text: likes\n                                   marker: Operator(like/0, [Selector(Bridge('{ ... next(operator) , do: { left: \"liker\", right: \"likee\" }  , liker: before[0]  , likee*: after[0] , unflatten: [\"liker\",\"likee\"], focusable: [\"liker\",\"likee\"] }'), [Type('object')]<==>[Type('object')])], evaluator(Bridge('{ ... next(operator) , do: { left: \"liker\", right: \"likee\" }  , liker: before[0]  , likee*: after\n                                   word: likes\n    2. chicken/0  - \"chicken\"\n                                   value: chicken\n                                   text: chicken\n                                   marker: Operator(chicken/0, PASS, [Selector(Bridge('{ ...after, chicken: operator, marker: operator(concat('chicken_', after.value)), value: concat('chicken_', after.value), modifiers: append(['chicken'], after[0].modifiers)}'), []<==>[Type('strip')])], evaluator(Bridge('{ ...after, chicken: operator, marker: operator(concat('chicken_', after.value)), value: conc\n                                   word: chicken\n   *3. strip/1  - \"strips\"\n                                   value: strip\n                                   text: strips\n                                   marker: Operator(strip/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: strips\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({'value': 'chicken', 'text': 'chicken', 'marker': Operator(chicken/0, PASS, [Selector(Bridge('{ ...after, chicken: operator, marker: operator(concat('chicken_', after.value)), value: concat('chicken_', after.value), modifiers: append(['chicken'], after[0].modifiers)}'), []<==>[Type('strip')])], evaluator(Bridge('{ ...after, chicken: operator, marker: operator(concat('chicken_', after.value)), value: concat('chicken_', after.value), modifiers: append(['chicken'], after[0].modifiers)}')), variables({})), 'word': 'chicken'})\n\n>>>>>>>>>>>>> Counter 4\n    0. unknown/1  - \"hana\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: hana\n                                   text: hana\n                                   value: hana\n                                   unknown: True\n    1. like/0  - \"likes\"\n                                   value: like\n                                   text: likes\n                                   marker: Operator(like/0, [Selector(Bridge('{ ... next(operator) , do: { left: \"liker\", right: \"likee\" }  , liker: before[0]  , likee*: after[0] , unflatten: [\"liker\",\"likee\"], focusable: [\"liker\",\"likee\"] }'), [Type('object')]<==>[Type('object')])], evaluator(Bridge('{ ... next(operator) , do: { left: \"liker\", right: \"likee\" }  , liker: before[0]  , likee*: after\n                                   word: likes\n   *2. chicken_strip/0  - \"chicken strips\"\n                                   value: chicken_strip\n                                   text: chicken strips\n                                   marker: Operator(chicken_strip/0, [Selector(Bridge('{ ...next(operator), value: 'chicken_strip' }'), []<==>[])], evaluator(Bridge('{ ...next(operator), value: 'chicken_strip' }')), variables({}))\n                                   word: strips\n                                   types: [\n                                   'strip'\n                                   ]\n                                   chicken: Context({'value': 'chicken', 'text': 'chicken', 'marker': Operator(chicken/0, PASS, [Selector(Bridge('{ ...after, chicken: operator, marker: operator(concat('chicken_', after.value)), value: concat('chicken_', after.value), modifiers: append(['chicken'], after[0].modifiers)}'), []<==>[Type('strip')])], evaluator(Bridge('{ ...after, chicken: operator, mar\n                                   modifiers: [\n                                   'chicken'\n                                   ]\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({'value': 'chicken_strip', 'text': 'chicken strips', 'marker': Operator(chicken_strip/0, [Selector(Bridge('{ ...next(operator), value: 'chicken_strip' }'), []<==>[])], evaluator(Bridge('{ ...next(operator), value: 'chicken_strip' }')), variables({})), 'word': 'strips', 'types': ['strip'], 'chicken': Context({'value': 'chicken', 'text': 'chicken', 'marker': Operator(chicken/0, PASS, [Selector(Bridge('{ ...after, chicken: operator, marker: operator(concat('chicken_', after.value)), value: concat('chicken_', after.value), modifiers: append(['chicken'], after[0].modifiers)}'), []<==>[Type('strip')])], evaluator(Bridge('{ ...after, chicken: operator, marker: operator(concat('chicken_', after.value)), value: concat('chicken_', after.value), modifiers: append(['chicken'], after[0].modifiers)}')), variables({})), 'word': 'chicken'}), 'modifiers': ['chicken']})\n\n>>>>>>>>>>>>> Counter 5\n    0. unknown/1  - \"hana\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: hana\n                                   text: hana\n                                   value: hana\n                                   unknown: True\n    1. like/0  - \"likes\"\n                                   value: like\n                                   text: likes\n                                   marker: Operator(like/0, [Selector(Bridge('{ ... next(operator) , do: { left: \"liker\", right: \"likee\" }  , liker: before[0]  , likee*: after[0] , unflatten: [\"liker\",\"likee\"], focusable: [\"liker\",\"likee\"] }'), [Type('object')]<==>[Type('object')])], evaluator(Bridge('{ ... next(operator) , do: { left: \"liker\", right: \"likee\" }  , liker: before[0]  , likee*: after\n                                   word: likes\n   *2. chicken_strip/1  - \"chicken strips\"\n                                   value: chicken_strip\n                                   text: chicken strips\n                                   marker: Operator(chicken_strip/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: strips\n                                   types: [\n                                   'strip'\n                                   ]\n                                   chicken: Context({'value': 'chicken', 'text': 'chicken', 'marker': Operator(chicken/0, PASS, [Selector(Bridge('{ ...after, chicken: operator, marker: operator(concat('chicken_', after.value)), value: concat('chicken_', after.value), modifiers: append(['chicken'], after[0].modifiers)}'), []<==>[Type('strip')])], evaluator(Bridge('{ ...after, chicken: operator, mar\n                                   modifiers: [\n                                   'chicken'\n                                   ]\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({'value': 'like', 'text': 'likes', 'marker': Operator(like/0, [Selector(Bridge('{ ... next(operator) , do: { left: \"liker\", right: \"likee\" }  , liker: before[0]  , likee*: after[0] , unflatten: [\"liker\",\"likee\"], focusable: [\"liker\",\"likee\"] }'), [Type('object')]<==>[Type('object')])], evaluator(Bridge('{ ... next(operator) , do: { left: \"liker\", right: \"likee\" }  , liker: before[0]  , likee*: after[0] , unflatten: [\"liker\",\"likee\"], focusable: [\"liker\",\"likee\"] }')), variables({})), 'word': 'likes'})\n\n>>>>>>>>>>>>> Counter 6\n   *0. like/1  - \"hana likes chicken strips\"\n                                   value: like\n                                   text: hana likes chicken strips\n                                   marker: Operator(like/1, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({}))\n                                   word: likes\n                                   do: Context({'left': 'liker', 'right': 'likee', 'text': 'hana likes chicken strips'})\n                                   liker: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True, 'types': ['unknown', 'object']})\n                                   likee: Context({'value': 'chicken_strip', 'text': 'chicken strips', 'marker': Operator(chicken_strip/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'strips', 'types': ['strip', 'chicken_strip', 'object'], 'chicken': Context({'value': 'chicken', 'text': 'chicken', 'marker': Operator(chicken/0, PASS, [Selector(Bridge('{ ...after, chicken: o\n                                   unflatten: [\n                                   'liker'\n,                                    'likee'\n                                   ]\n                                   focusable: [\n                                   'liker'\n,                                    'likee'\n                                   ]\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({'value': 'like', 'text': 'hana likes chicken strips', 'marker': Operator(like/1, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({})), 'word': 'likes', 'do': Context({'left': 'liker', 'right': 'likee', 'text': 'hana likes chicken strips'}), 'liker': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True, 'types': ['unknown', 'object']}), 'likee': Context({'value': 'chicken_strip', 'text': 'chicken strips', 'marker': Operator(chicken_strip/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'strips', 'types': ['strip', 'chicken_strip', 'object'], 'chicken': Context({'value': 'chicken', 'text': 'chicken', 'marker': Operator(chicken/0, PASS, [Selector(Bridge('{ ...after, chicken: operator, marker: operator(concat('chicken_', after.value)), value: concat('chicken_', after.value), modifiers: append(['chicken'], after[0].modifiers)}'), []<==>[Type('strip')])], evaluator(Bridge('{ ...after, chicken: operator, marker: operator(concat('chicken_', after.value)), value: concat('chicken_', after.value), modifiers: append(['chicken'], after[0].modifiers)}')), variables({})), 'word': 'chicken'}), 'modifiers': ['chicken']}), 'unflatten': ['liker', 'likee'], 'focusable': ['liker', 'likee']})\n\n>>>>>>>>>>>>> Counter 7\n   *0. like/2  - \"hana likes chicken strips\"\n                                   value: like\n                                   text: hana likes chicken strips\n                                   marker: Operator(like/2, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: likes\n                                   do: Context({'left': 'liker', 'right': 'likee', 'text': 'hana likes chicken strips'})\n                                   liker: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True, 'types': ['unknown', 'object']})\n                                   likee: Context({'value': 'chicken_strip', 'text': 'chicken strips', 'marker': Operator(chicken_strip/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'strips', 'types': ['strip', 'chicken_strip', 'object'], 'chicken': Context({'value': 'chicken', 'text': 'chicken', 'marker': Operator(chicken/0, PASS, [Selector(Bridge('{ ...after, chicken: o\n                                   unflatten: [\n                                   'liker'\n,                                    'likee'\n                                   ]\n                                   focusable: [\n                                   'liker'\n,                                    'likee'\n                                   ]\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "do": {
            "left": "liker",
            "right": "likee",
            "text": "hana likes chicken strips"
          },
          "focusable": [
            "liker",
            "likee"
          ],
          "likee": {
            "chicken": {
              "marker": "chicken",
              "text": "chicken",
              "value": "chicken",
              "word": "chicken"
            },
            "marker": "chicken_strip",
            "modifiers": [
              "chicken"
            ],
            "text": "chicken strips",
            "types": [
              "chicken_strip",
              "object"
            ],
            "value": "chicken_strip",
            "word": "strips"
          },
          "liker": {
            "marker": "unknown",
            "text": "hana",
            "types": [
              "object",
              "unknown"
            ],
            "unknown": true,
            "value": "hana",
            "word": "hana"
          },
          "marker": "like",
          "text": "hana likes chicken strips",
          "unflatten": [
            "liker",
            "likee"
          ],
          "value": "like",
          "word": "likes",
          "topLevel": true,
          "ordering": "preference"
        }
      ],
      "generated": [
        "likes"
      ],
      "paraphrases": [
        "hana likes chicken strips"
      ],
      "responses": [
        ""
      ],
      "memory_free_percent": 71.3,
      "version": "6.13.45-beta.10",
      "query": "hana likes chicken strips"
    },
    {
      "hierarchy": [
        [
          "hate",
          "canBeQuestion"
        ],
        [
          "sushi",
          "hierarchyAble"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "food",
          "queryable"
        ],
        [
          "pidgeon",
          "queryable"
        ],
        [
          "human",
          "theAble"
        ],
        [
          "love",
          "canBeQuestion"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "owl",
          "theAble"
        ],
        [
          "dislike",
          "canBeDoQuestion"
        ],
        [
          "self",
          "queryable"
        ],
        [
          "dislike",
          "ifAble"
        ],
        [
          "parrot",
          "object"
        ],
        [
          "bird",
          "theAble"
        ],
        [
          "like",
          "orAble"
        ],
        [
          "dog",
          "object"
        ],
        [
          "canBeDoQuestion",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "mammal",
          "hierarchyAble"
        ],
        [
          "chicken_strip",
          "hierarchyAble"
        ],
        [
          "does_after_canBeDoQuestion_doesAble",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "cat",
          "queryable"
        ],
        [
          "mammal",
          "queryable"
        ],
        [
          "love",
          "canBeDoQuestion"
        ],
        [
          "dog",
          "queryable"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "hate",
          "canBeDoQuestion"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "human",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "feline",
          "queryable"
        ],
        [
          "strip",
          "theAble"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "bat",
          "queryable"
        ],
        [
          "like",
          "canBeQuestion"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "wolf",
          "object"
        ],
        [
          "dislike",
          "canBeQuestion"
        ],
        [
          "like",
          "ifAble"
        ],
        [
          "animal",
          "theAble"
        ],
        [
          "bird",
          "hierarchyAble"
        ],
        [
          "pidgeon",
          "hierarchyAble"
        ],
        [
          "strip",
          "concept"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "animal",
          "object"
        ],
        [
          "canine",
          "hierarchyAble"
        ],
        [
          "strip",
          "hierarchyAble"
        ],
        [
          "mammal",
          "object"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "have",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "questionMark_before_canBeQuestion_have",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "owl",
          "queryable"
        ],
        [
          "bat",
          "theAble"
        ],
        [
          "wolf",
          "hierarchyAble"
        ],
        [
          "food",
          "object"
        ],
        [
          "chicken_strip",
          "strip"
        ],
        [
          "strip",
          "queryable"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "feline",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "sushi",
          "object"
        ],
        [
          "parrot",
          "hierarchyAble"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "human",
          "object"
        ],
        [
          "hate",
          "orAble"
        ],
        [
          "animal",
          "queryable"
        ],
        [
          "canine",
          "theAble"
        ],
        [
          "animal",
          "hierarchyAble"
        ],
        [
          "pidgeon",
          "theAble"
        ],
        [
          "want",
          "ifAble"
        ],
        [
          "concept",
          "concept"
        ],
        [
          "wolf",
          "theAble"
        ],
        [
          "feline",
          "hierarchyAble"
        ],
        [
          "parrot",
          "theAble"
        ],
        [
          "bird",
          "object"
        ],
        [
          "want",
          "canBeQuestion"
        ],
        [
          "doesAble",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "eagle",
          "queryable"
        ],
        [
          "dislike",
          "orAble"
        ],
        [
          "whose",
          "object"
        ],
        [
          "dog",
          "theAble"
        ],
        [
          "parrot",
          "queryable"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "eagle",
          "object"
        ],
        [
          "mammal",
          "theAble"
        ],
        [
          "canBeQuestion",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "cat",
          "theAble"
        ],
        [
          "eagle",
          "hierarchyAble"
        ],
        [
          "cat",
          "object"
        ],
        [
          "feline",
          "object"
        ],
        [
          "food",
          "theAble"
        ],
        [
          "bird",
          "queryable"
        ],
        [
          "sushi",
          "theAble"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "owl",
          "object"
        ],
        [
          "canine",
          "object"
        ],
        [
          "love",
          "ifAble"
        ],
        [
          "bat",
          "hierarchyAble"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "pidgeon",
          "object"
        ],
        [
          "human",
          "hierarchyAble"
        ],
        [
          "food",
          "hierarchyAble"
        ],
        [
          "dog",
          "hierarchyAble"
        ],
        [
          "want",
          "canBeDoQuestion"
        ],
        [
          "want",
          "orAble"
        ],
        [
          "sushi",
          "queryable"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "wolf",
          "queryable"
        ],
        [
          "owl",
          "hierarchyAble"
        ],
        [
          "cat",
          "hierarchyAble"
        ],
        [
          "like",
          "canBeDoQuestion"
        ],
        [
          "love",
          "orAble"
        ],
        [
          "hate",
          "ifAble"
        ],
        [
          "eagle",
          "theAble"
        ],
        [
          "bat",
          "object"
        ],
        [
          "canine",
          "queryable"
        ],
        [
          "property",
          "queryable"
        ]
      ],
      "load_cache_time": 0.005828380584716797,
      "logs": [
        "Undefined word 'hana'",
        "Op choices were: [(('unknown', 0), [('dislike', 0), ('sushi', 0), ('unknown', 0)]), (('sushi', 0), [('dislike', 0), ('sushi', 0)]), (('dislike', 0), [('dislike', 0)]), (('dislike', 1), [('dislike', 1)])]",
        "Contexts used for choosing operators (if the wrong choices were made update the priories array. Put the expected choice at the end of the list): \n  Context for choosing the operator unknown/0 was [['dislike', 0], ['sushi', 0], ['unknown', 0]]\n  Context for choosing the operator sushi/0 was [['dislike', 0], ['sushi', 0]]\n  Context for choosing the operator dislike/0 was [['dislike', 0]]\n  Context for choosing the operator dislike/1 was [['dislike', 1]]",
        "",
        "Semantic            No semantic applied                                                                       \n          TO        {                                                                                         \n                      \"marker\": \"controlStart\",                                                               \n                      \"controlRemove\": true,                                                                  \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n",
        "Semantic            KM 'ordering' ordinal: 4  notes: \"ordering setter\"                                        \n          APPLIED   Semantic(({context}) => context.marker == operator, ({context, km}) => {                  \n                              //const api = km('ordering').api                                                \n                              // api.setCategory(ordering.name, context[ordering.object].value, context[orderi\n                    ng.category].value, context)                                                              \n                              const propertiesAPI = km('properties').api                                      \n                              context.ordering = ordering.name                                                \n                              const fcontexts = flattens(['list'], [context])                                 \n                              for (const fcontext of fcontexts) {                                             \n                                fcontext.paraphrase = true                                                    \n                                fcontext[ordering.object].paraphrase = true                                   \n                                fcontext[ordering.category].paraphrase = true                                 \n                              }                                                                               \n                              propertiesAPI.relation_add(fcontexts)                                           \n                            })                                                                                \n          TO        {                                                                                         \n                      \"dislikee\": {                                                                           \n                        \"marker\": \"sushi\",                                                                    \n                        \"number\": \"one\",                                                                      \n                        \"text\": \"sushi\",                                                                      \n                        \"types\": [                                                                            \n                          \"sushi\"                                                                             \n                        ],                                                                                    \n                        \"value\": \"sushi\",                                                                     \n                        \"word\": \"sushi\"                                                                       \n                      },                                                                                      \n                      \"disliker\": {                                                                           \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hana\",                                                                       \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hana\",                                                                      \n                        \"word\": \"hana\"                                                                        \n                      },                                                                                      \n                      \"do\": {                                                                                 \n                        \"left\": \"disliker\",                                                                   \n                        \"right\": \"dislikee\",                                                                  \n                        \"text\": \"hana dislikes sushi\"                                                         \n                      },                                                                                      \n                      \"focusable\": [                                                                          \n                        \"disliker\",                                                                           \n                        \"dislikee\"                                                                            \n                      ],                                                                                      \n                      \"marker\": \"dislike\",                                                                    \n                      \"text\": \"hana dislikes sushi\",                                                          \n                      \"unflatten\": [                                                                          \n                        \"disliker\",                                                                           \n                        \"dislikee\"                                                                            \n                      ],                                                                                      \n                      \"value\": \"dislike\",                                                                     \n                      \"word\": \"dislikes\",                                                                     \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n          STACK     Context#2: call2                                                                          \n          RESULT    {                                                                                         \n                      \"dislikee\": {                                                                           \n                        \"marker\": \"sushi\",                                                                    \n                        \"number\": \"one\",                                                                      \n                        \"text\": \"sushi\",                                                                      \n                        \"types\": [                                                                            \n                          \"sushi\"                                                                             \n                        ],                                                                                    \n                        \"value\": \"sushi\",                                                                     \n                        \"word\": \"sushi\"                                                                       \n                      },                                                                                      \n                      \"disliker\": {                                                                           \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hana\",                                                                       \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hana\",                                                                      \n                        \"word\": \"hana\"                                                                        \n                      },                                                                                      \n                      \"do\": {                                                                                 \n                        \"left\": \"disliker\",                                                                   \n                        \"right\": \"dislikee\",                                                                  \n                        \"text\": \"hana dislikes sushi\"                                                         \n                      },                                                                                      \n                      \"focusable\": [                                                                          \n                        \"disliker\",                                                                           \n                        \"dislikee\"                                                                            \n                      ],                                                                                      \n                      \"marker\": \"dislike\",                                                                    \n                      \"text\": \"hana dislikes sushi\",                                                          \n                      \"unflatten\": [                                                                          \n                        \"disliker\",                                                                           \n                        \"dislikee\"                                                                            \n                      ],                                                                                      \n                      \"value\": \"dislike\",                                                                     \n                      \"word\": \"dislikes\",                                                                     \n                      \"topLevel\": true,                                                                       \n                      \"ordering\": \"preference\"                                                                \n                    }                                                                                         \n",
        "Generator           KM 'dialogues' ordinal: 29  notes: \"show word\"                                            \n          APPLIED   Generator(({context}) => context.word, ({context}) => context.word)                       \n          TO        {                                                                                         \n                      \"dislikee\": {                                                                           \n                        \"marker\": \"sushi\",                                                                    \n                        \"number\": \"one\",                                                                      \n                        \"text\": \"sushi\",                                                                      \n                        \"types\": [                                                                            \n                          \"sushi\"                                                                             \n                        ],                                                                                    \n                        \"value\": \"sushi\",                                                                     \n                        \"word\": \"sushi\"                                                                       \n                      },                                                                                      \n                      \"disliker\": {                                                                           \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hana\",                                                                       \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hana\",                                                                      \n                        \"word\": \"hana\"                                                                        \n                      },                                                                                      \n                      \"do\": {                                                                                 \n                        \"left\": \"disliker\",                                                                   \n                        \"right\": \"dislikee\",                                                                  \n                        \"text\": \"hana dislikes sushi\"                                                         \n                      },                                                                                      \n                      \"focusable\": [                                                                          \n                        \"disliker\",                                                                           \n                        \"dislikee\"                                                                            \n                      ],                                                                                      \n                      \"marker\": \"dislike\",                                                                    \n                      \"text\": \"hana dislikes sushi\",                                                          \n                      \"unflatten\": [                                                                          \n                        \"disliker\",                                                                           \n                        \"dislikee\"                                                                            \n                      ],                                                                                      \n                      \"value\": \"dislike\",                                                                     \n                      \"word\": \"dislikes\",                                                                     \n                      \"topLevel\": true,                                                                       \n                      \"ordering\": \"preference\",                                                               \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call3                                                                          \n          RESULT    dislikes                                                                                  \n",
        "Generator           KM 'dialogues' ordinal: 14                                                                \n          APPLIED   Generator(({context}) => context.marker == 'unknown', ({context}) => {                    \n                            if (typeof context.marker === 'string') {                                         \n                              return context.value                                                            \n                            } else {                                                                          \n                              JSON.stringify(context.value)                                                   \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"hana\",                                                                         \n                      \"types\": [                                                                              \n                        \"object\",                                                                             \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"hana\",                                                                        \n                      \"word\": \"hana\",                                                                         \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call5                                                                    \n          RESULT    hana                                                                                      \n",
        "Generator           KM 'dialogues' ordinal: 25                                                                \n          APPLIED   Generator(({context}) => context.paraphrase && context.word, ({context}) => `${context.wor\n                    d}`)                                                                                      \n          TO        {                                                                                         \n                      \"marker\": \"sushi\",                                                                      \n                      \"number\": \"one\",                                                                        \n                      \"text\": \"sushi\",                                                                        \n                      \"types\": [                                                                              \n                        \"sushi\"                                                                               \n                      ],                                                                                      \n                      \"value\": \"sushi\",                                                                       \n                      \"word\": \"sushi\",                                                                        \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call6                                                                    \n          RESULT    sushi                                                                                     \n",
        "Generator           KM 'ordering' ordinal: 6  notes: \"ordering generator for paraphrase\"                      \n          APPLIED   Generator(({context}) => context.marker == operator && context.paraphrase && !context.quer\n                    y, ({context, g}) => {                                                                    \n                            const beforeGenerator = before.map( (arg) => g(context[arg.tag]) )                \n                            const afterGenerator = after.map( (arg) => g(context[arg.tag]) )                  \n                            return beforeGenerator.concat([`${context.word}`]).concat(afterGenerator).join(' '\n                    )                                                                                         \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"dislikee\": {                                                                           \n                        \"marker\": \"sushi\",                                                                    \n                        \"number\": \"one\",                                                                      \n                        \"text\": \"sushi\",                                                                      \n                        \"types\": [                                                                            \n                          \"sushi\"                                                                             \n                        ],                                                                                    \n                        \"value\": \"sushi\",                                                                     \n                        \"word\": \"sushi\"                                                                       \n                      },                                                                                      \n                      \"disliker\": {                                                                           \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hana\",                                                                       \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hana\",                                                                      \n                        \"word\": \"hana\"                                                                        \n                      },                                                                                      \n                      \"do\": {                                                                                 \n                        \"left\": \"disliker\",                                                                   \n                        \"right\": \"dislikee\",                                                                  \n                        \"text\": \"hana dislikes sushi\"                                                         \n                      },                                                                                      \n                      \"focusable\": [                                                                          \n                        \"disliker\",                                                                           \n                        \"dislikee\"                                                                            \n                      ],                                                                                      \n                      \"marker\": \"dislike\",                                                                    \n                      \"text\": \"hana dislikes sushi\",                                                          \n                      \"unflatten\": [                                                                          \n                        \"disliker\",                                                                           \n                        \"dislikee\"                                                                            \n                      ],                                                                                      \n                      \"value\": \"dislike\",                                                                     \n                      \"word\": \"dislikes\",                                                                     \n                      \"topLevel\": true,                                                                       \n                      \"ordering\": \"preference\",                                                               \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4                                                                          \n          RESULT    hana dislikes sushi                                                                       \n",
        "Semantic            No semantic applied                                                                       \n          TO        {                                                                                         \n                      \"marker\": \"controlEnd\",                                                                 \n                      \"controlRemove\": true,                                                                  \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n"
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "dislike",
                0
              ],
              [
                "sushi",
                0
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "sushi",
              0
            ],
            "ops": [
              [
                "dislike",
                0
              ],
              [
                "sushi",
                0
              ]
            ]
          },
          {
            "op": [
              "dislike",
              0
            ],
            "ops": [
              [
                "dislike",
                0
              ]
            ]
          },
          {
            "op": [
              "dislike",
              1
            ],
            "ops": [
              [
                "dislike",
                1
              ]
            ]
          }
        ]
      },
      "times": 0.7335283756256104,
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  - \"hana\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: hana\n                                   text: hana\n                                   value: hana\n    1. dislike/0  - \"dislikes\"\n                                   value: dislike\n                                   text: dislikes\n                                   marker: Operator(dislike/0, [Selector(Bridge('{ ... next(operator) , do: { left: \"disliker\", right: \"dislikee\" }  , disliker: before[0]  , dislikee*: after[0] , unflatten: [\"disliker\",\"dislikee\"], focusable: [\"disliker\",\"dislikee\"] }'), [Type('object')]<==>[Type('object')])], evaluator(Bridge('{ ... next(operator) , do: { left: \"disliker\", right: \"dislikee\" }  , \n                                   word: dislikes\n    2. sushi/0  - \"sushi\"\n                                   value: sushi\n                                   number: one\n                                   text: sushi\n                                   marker: Operator(sushi/0, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({}))\n                                   word: sushi\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({'marker': Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana'})\n\n>>>>>>>>>>>>> Counter 2\n   *0. unknown/1  - \"hana\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: hana\n                                   text: hana\n                                   value: hana\n                                   unknown: True\n    1. dislike/0  - \"dislikes\"\n                                   value: dislike\n                                   text: dislikes\n                                   marker: Operator(dislike/0, [Selector(Bridge('{ ... next(operator) , do: { left: \"disliker\", right: \"dislikee\" }  , disliker: before[0]  , dislikee*: after[0] , unflatten: [\"disliker\",\"dislikee\"], focusable: [\"disliker\",\"dislikee\"] }'), [Type('object')]<==>[Type('object')])], evaluator(Bridge('{ ... next(operator) , do: { left: \"disliker\", right: \"dislikee\" }  , \n                                   word: dislikes\n    2. sushi/0  - \"sushi\"\n                                   value: sushi\n                                   number: one\n                                   text: sushi\n                                   marker: Operator(sushi/0, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({}))\n                                   word: sushi\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({'value': 'sushi', 'number': 'one', 'text': 'sushi', 'marker': Operator(sushi/0, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({})), 'word': 'sushi'})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/1  - \"hana\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: hana\n                                   text: hana\n                                   value: hana\n                                   unknown: True\n    1. dislike/0  - \"dislikes\"\n                                   value: dislike\n                                   text: dislikes\n                                   marker: Operator(dislike/0, [Selector(Bridge('{ ... next(operator) , do: { left: \"disliker\", right: \"dislikee\" }  , disliker: before[0]  , dislikee*: after[0] , unflatten: [\"disliker\",\"dislikee\"], focusable: [\"disliker\",\"dislikee\"] }'), [Type('object')]<==>[Type('object')])], evaluator(Bridge('{ ... next(operator) , do: { left: \"disliker\", right: \"dislikee\" }  , \n                                   word: dislikes\n   *2. sushi/1  - \"sushi\"\n                                   value: sushi\n                                   number: one\n                                   text: sushi\n                                   marker: Operator(sushi/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: sushi\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({'value': 'dislike', 'text': 'dislikes', 'marker': Operator(dislike/0, [Selector(Bridge('{ ... next(operator) , do: { left: \"disliker\", right: \"dislikee\" }  , disliker: before[0]  , dislikee*: after[0] , unflatten: [\"disliker\",\"dislikee\"], focusable: [\"disliker\",\"dislikee\"] }'), [Type('object')]<==>[Type('object')])], evaluator(Bridge('{ ... next(operator) , do: { left: \"disliker\", right: \"dislikee\" }  , disliker: before[0]  , dislikee*: after[0] , unflatten: [\"disliker\",\"dislikee\"], focusable: [\"disliker\",\"dislikee\"] }')), variables({})), 'word': 'dislikes'})\n\n>>>>>>>>>>>>> Counter 4\n   *0. dislike/1  - \"hana dislikes sushi\"\n                                   value: dislike\n                                   text: hana dislikes sushi\n                                   marker: Operator(dislike/1, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({}))\n                                   word: dislikes\n                                   do: Context({'left': 'disliker', 'right': 'dislikee', 'text': 'hana dislikes sushi'})\n                                   disliker: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True, 'types': ['unknown', 'object']})\n                                   dislikee: Context({'value': 'sushi', 'number': 'one', 'text': 'sushi', 'marker': Operator(sushi/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'sushi', 'types': ['sushi']})\n                                   unflatten: [\n                                   'disliker'\n,                                    'dislikee'\n                                   ]\n                                   focusable: [\n                                   'disliker'\n,                                    'dislikee'\n                                   ]\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({'value': 'dislike', 'text': 'hana dislikes sushi', 'marker': Operator(dislike/1, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({})), 'word': 'dislikes', 'do': Context({'left': 'disliker', 'right': 'dislikee', 'text': 'hana dislikes sushi'}), 'disliker': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True, 'types': ['unknown', 'object']}), 'dislikee': Context({'value': 'sushi', 'number': 'one', 'text': 'sushi', 'marker': Operator(sushi/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'sushi', 'types': ['sushi']}), 'unflatten': ['disliker', 'dislikee'], 'focusable': ['disliker', 'dislikee']})\n\n>>>>>>>>>>>>> Counter 5\n   *0. dislike/2  - \"hana dislikes sushi\"\n                                   value: dislike\n                                   text: hana dislikes sushi\n                                   marker: Operator(dislike/2, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: dislikes\n                                   do: Context({'left': 'disliker', 'right': 'dislikee', 'text': 'hana dislikes sushi'})\n                                   disliker: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True, 'types': ['unknown', 'object']})\n                                   dislikee: Context({'value': 'sushi', 'number': 'one', 'text': 'sushi', 'marker': Operator(sushi/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'sushi', 'types': ['sushi']})\n                                   unflatten: [\n                                   'disliker'\n,                                    'dislikee'\n                                   ]\n                                   focusable: [\n                                   'disliker'\n,                                    'dislikee'\n                                   ]\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "dislikee": {
            "marker": "sushi",
            "number": "one",
            "text": "sushi",
            "types": [
              "sushi"
            ],
            "value": "sushi",
            "word": "sushi"
          },
          "disliker": {
            "marker": "unknown",
            "text": "hana",
            "types": [
              "object",
              "unknown"
            ],
            "unknown": true,
            "value": "hana",
            "word": "hana"
          },
          "do": {
            "left": "disliker",
            "right": "dislikee",
            "text": "hana dislikes sushi"
          },
          "focusable": [
            "disliker",
            "dislikee"
          ],
          "marker": "dislike",
          "text": "hana dislikes sushi",
          "unflatten": [
            "disliker",
            "dislikee"
          ],
          "value": "dislike",
          "word": "dislikes",
          "topLevel": true,
          "ordering": "preference"
        }
      ],
      "generated": [
        "dislikes"
      ],
      "paraphrases": [
        "hana dislikes sushi"
      ],
      "responses": [
        ""
      ],
      "memory_free_percent": 71.8,
      "version": "6.13.45-beta.10",
      "query": "hana dislikes sushi"
    },
    {
      "hierarchy": [
        [
          "hate",
          "canBeQuestion"
        ],
        [
          "sushi",
          "hierarchyAble"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "food",
          "queryable"
        ],
        [
          "pidgeon",
          "queryable"
        ],
        [
          "human",
          "theAble"
        ],
        [
          "love",
          "canBeQuestion"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "owl",
          "theAble"
        ],
        [
          "dislike",
          "canBeDoQuestion"
        ],
        [
          "self",
          "queryable"
        ],
        [
          "dislike",
          "ifAble"
        ],
        [
          "parrot",
          "object"
        ],
        [
          "bird",
          "theAble"
        ],
        [
          "like",
          "orAble"
        ],
        [
          "dog",
          "object"
        ],
        [
          "canBeDoQuestion",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "mammal",
          "hierarchyAble"
        ],
        [
          "chicken_strip",
          "hierarchyAble"
        ],
        [
          "does_after_canBeDoQuestion_doesAble",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "cat",
          "queryable"
        ],
        [
          "mammal",
          "queryable"
        ],
        [
          "love",
          "canBeDoQuestion"
        ],
        [
          "dog",
          "queryable"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "hate",
          "canBeDoQuestion"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "human",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "feline",
          "queryable"
        ],
        [
          "strip",
          "theAble"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "bat",
          "queryable"
        ],
        [
          "like",
          "canBeQuestion"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "wolf",
          "object"
        ],
        [
          "dislike",
          "canBeQuestion"
        ],
        [
          "like",
          "ifAble"
        ],
        [
          "animal",
          "theAble"
        ],
        [
          "bird",
          "hierarchyAble"
        ],
        [
          "pidgeon",
          "hierarchyAble"
        ],
        [
          "strip",
          "concept"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "animal",
          "object"
        ],
        [
          "canine",
          "hierarchyAble"
        ],
        [
          "strip",
          "hierarchyAble"
        ],
        [
          "mammal",
          "object"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "have",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "questionMark_before_canBeQuestion_have",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "owl",
          "queryable"
        ],
        [
          "bat",
          "theAble"
        ],
        [
          "wolf",
          "hierarchyAble"
        ],
        [
          "food",
          "object"
        ],
        [
          "chicken_strip",
          "strip"
        ],
        [
          "strip",
          "queryable"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "feline",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "sushi",
          "object"
        ],
        [
          "parrot",
          "hierarchyAble"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "human",
          "object"
        ],
        [
          "hate",
          "orAble"
        ],
        [
          "animal",
          "queryable"
        ],
        [
          "canine",
          "theAble"
        ],
        [
          "animal",
          "hierarchyAble"
        ],
        [
          "pidgeon",
          "theAble"
        ],
        [
          "want",
          "ifAble"
        ],
        [
          "concept",
          "concept"
        ],
        [
          "wolf",
          "theAble"
        ],
        [
          "feline",
          "hierarchyAble"
        ],
        [
          "parrot",
          "theAble"
        ],
        [
          "bird",
          "object"
        ],
        [
          "want",
          "canBeQuestion"
        ],
        [
          "doesAble",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "eagle",
          "queryable"
        ],
        [
          "dislike",
          "orAble"
        ],
        [
          "whose",
          "object"
        ],
        [
          "dog",
          "theAble"
        ],
        [
          "parrot",
          "queryable"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "eagle",
          "object"
        ],
        [
          "mammal",
          "theAble"
        ],
        [
          "canBeQuestion",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "cat",
          "theAble"
        ],
        [
          "eagle",
          "hierarchyAble"
        ],
        [
          "cat",
          "object"
        ],
        [
          "feline",
          "object"
        ],
        [
          "food",
          "theAble"
        ],
        [
          "bird",
          "queryable"
        ],
        [
          "sushi",
          "theAble"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "owl",
          "object"
        ],
        [
          "canine",
          "object"
        ],
        [
          "love",
          "ifAble"
        ],
        [
          "bat",
          "hierarchyAble"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "pidgeon",
          "object"
        ],
        [
          "human",
          "hierarchyAble"
        ],
        [
          "food",
          "hierarchyAble"
        ],
        [
          "dog",
          "hierarchyAble"
        ],
        [
          "want",
          "canBeDoQuestion"
        ],
        [
          "want",
          "orAble"
        ],
        [
          "sushi",
          "queryable"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "wolf",
          "queryable"
        ],
        [
          "owl",
          "hierarchyAble"
        ],
        [
          "cat",
          "hierarchyAble"
        ],
        [
          "like",
          "canBeDoQuestion"
        ],
        [
          "love",
          "orAble"
        ],
        [
          "hate",
          "ifAble"
        ],
        [
          "eagle",
          "theAble"
        ],
        [
          "bat",
          "object"
        ],
        [
          "canine",
          "queryable"
        ],
        [
          "property",
          "queryable"
        ]
      ],
      "load_cache_time": 0.0057599544525146484,
      "logs": [
        "Undefined word 'hanna'",
        "Undefined word 'hana'",
        "Op choices were: [(('unknown', 0), [('means', 0), ('unknown', 0)]), (('unknown', 0), [('means', 0), ('unknown', 0)]), (('means', 0), [('means', 0)])]",
        "Contexts used for choosing operators (if the wrong choices were made update the priories array. Put the expected choice at the end of the list): \n  Context for choosing the operator unknown/0 was [['means', 0], ['unknown', 0]]\n  Context for choosing the operator unknown/0 was [['means', 0], ['unknown', 0]]\n  Context for choosing the operator means/0 was [['means', 0]]",
        "",
        "Semantic            No semantic applied                                                                       \n          TO        {                                                                                         \n                      \"marker\": \"controlStart\",                                                               \n                      \"controlRemove\": true,                                                                  \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n",
        "Semantic            KM 'meta' ordinal: 2  notes: \"from means to where from is unknown\"                        \n          APPLIED   Semantic(({context}) => context.marker == 'means' && context.from.marker == 'unknown', ({c\n                    onfig, context, km, isTest}) => {                                                         \n                            if (isTest) {                                                                     \n                              return                                                                          \n                            } else {                                                                          \n                              km(\"dialogues\").api.setVariable(context.from.value, context.to.value)           \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"default\": true,                                                                        \n                      \"from\": {                                                                               \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hanna\",                                                                      \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hanna\",                                                                     \n                        \"word\": \"hanna\"                                                                       \n                      },                                                                                      \n                      \"marker\": \"means\",                                                                      \n                      \"text\": \"hanna means hana\",                                                             \n                      \"to\": {                                                                                 \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hana\",                                                                       \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hana\",                                                                      \n                        \"word\": \"hana\"                                                                        \n                      },                                                                                      \n                      \"word\": \"means\",                                                                        \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n          STACK     Context#2: call2                                                                          \n          RESULT    {                                                                                         \n                      \"default\": true,                                                                        \n                      \"from\": {                                                                               \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hanna\",                                                                      \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hanna\",                                                                     \n                        \"word\": \"hanna\"                                                                       \n                      },                                                                                      \n                      \"marker\": \"means\",                                                                      \n                      \"text\": \"hanna means hana\",                                                             \n                      \"to\": {                                                                                 \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hana\",                                                                       \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hana\",                                                                      \n                        \"word\": \"hana\"                                                                        \n                      },                                                                                      \n                      \"word\": \"means\",                                                                        \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n",
        "Generator           KM 'dialogues' ordinal: 29  notes: \"show word\"                                            \n          APPLIED   Generator(({context}) => context.word, ({context}) => context.word)                       \n          TO        {                                                                                         \n                      \"default\": true,                                                                        \n                      \"from\": {                                                                               \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hanna\",                                                                      \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hanna\",                                                                     \n                        \"word\": \"hanna\"                                                                       \n                      },                                                                                      \n                      \"marker\": \"means\",                                                                      \n                      \"text\": \"hanna means hana\",                                                             \n                      \"to\": {                                                                                 \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hana\",                                                                       \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hana\",                                                                      \n                        \"word\": \"hana\"                                                                        \n                      },                                                                                      \n                      \"word\": \"means\",                                                                        \n                      \"topLevel\": true,                                                                       \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call3                                                                          \n          RESULT    means                                                                                     \n",
        "Generator           KM 'dialogues' ordinal: 14                                                                \n          APPLIED   Generator(({context}) => context.marker == 'unknown', ({context}) => {                    \n                            if (typeof context.marker === 'string') {                                         \n                              return context.value                                                            \n                            } else {                                                                          \n                              JSON.stringify(context.value)                                                   \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"hanna\",                                                                        \n                      \"unknown\": true,                                                                        \n                      \"value\": \"hanna\",                                                                       \n                      \"word\": \"hanna\",                                                                        \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call5                                                                    \n          RESULT    hanna                                                                                     \n",
        "Generator           KM 'dialogues' ordinal: 14                                                                \n          APPLIED   Generator(({context}) => context.marker == 'unknown', ({context}) => {                    \n                            if (typeof context.marker === 'string') {                                         \n                              return context.value                                                            \n                            } else {                                                                          \n                              JSON.stringify(context.value)                                                   \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"hanna\",                                                                        \n                      \"unknown\": true,                                                                        \n                      \"value\": \"hanna\",                                                                       \n                      \"word\": \"hanna\",                                                                        \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call6                                                                    \n          RESULT    hanna                                                                                     \n",
        "Generator           KM 'dialogues' ordinal: 14                                                                \n          APPLIED   Generator(({context}) => context.marker == 'unknown', ({context}) => {                    \n                            if (typeof context.marker === 'string') {                                         \n                              return context.value                                                            \n                            } else {                                                                          \n                              JSON.stringify(context.value)                                                   \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"hana\",                                                                         \n                      \"unknown\": true,                                                                        \n                      \"value\": \"hana\",                                                                        \n                      \"word\": \"hana\",                                                                         \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call7                                                                    \n          RESULT    hana                                                                                      \n",
        "Generator           KM 'meta' ordinal: 1                                                                      \n          APPLIED   Generator(({context}) => context.marker == 'means' && context.paraphrase, ({context, g}) =\n                    > {                                                                                       \n                            // const before = g({ ...context.from, paraphrase: true, debug: true})            \n                            const before = g({ ...context.from, paraphrase: true})                            \n                            return `${g({ ...context.from, paraphrase: true})} means ${g(context.to)}`        \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"default\": true,                                                                        \n                      \"from\": {                                                                               \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hanna\",                                                                      \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hanna\",                                                                     \n                        \"word\": \"hanna\"                                                                       \n                      },                                                                                      \n                      \"marker\": \"means\",                                                                      \n                      \"text\": \"hanna means hana\",                                                             \n                      \"to\": {                                                                                 \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"hana\",                                                                       \n                        \"unknown\": true,                                                                      \n                        \"value\": \"hana\",                                                                      \n                        \"word\": \"hana\"                                                                        \n                      },                                                                                      \n                      \"word\": \"means\",                                                                        \n                      \"topLevel\": true,                                                                       \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4                                                                          \n          RESULT    hanna means hana                                                                          \n",
        "Semantic            No semantic applied                                                                       \n          TO        {                                                                                         \n                      \"marker\": \"controlEnd\",                                                                 \n                      \"controlRemove\": true,                                                                  \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n"
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "means",
                0
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "means",
                0
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "means",
              0
            ],
            "ops": [
              [
                "means",
                0
              ]
            ]
          }
        ]
      },
      "times": 1.017951250076294,
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  - \"hanna\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: hanna\n                                   text: hanna\n                                   value: hanna\n    1. means/0  - \"means\"\n                                   marker: Operator(means/0, [Selector(Bridge('{ ...next(operator), from: before[0], to: after[0] }'), [Any]<==>[Any])], evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}))\n                                   default: True\n                                   text: means\n                                   word: means\n    2. unknown/0  - \"hana\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: hana\n                                   text: hana\n                                   value: hana\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({'marker': Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({})), 'word': 'hanna', 'text': 'hanna', 'value': 'hanna'})\n\n>>>>>>>>>>>>> Counter 2\n   *0. unknown/1  - \"hanna\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: hanna\n                                   text: hanna\n                                   value: hanna\n                                   unknown: True\n    1. means/0  - \"means\"\n                                   marker: Operator(means/0, [Selector(Bridge('{ ...next(operator), from: before[0], to: after[0] }'), [Any]<==>[Any])], evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}))\n                                   default: True\n                                   text: means\n                                   word: means\n    2. unknown/0  - \"hana\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: hana\n                                   text: hana\n                                   value: hana\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({'marker': Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana'})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/1  - \"hanna\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: hanna\n                                   text: hanna\n                                   value: hanna\n                                   unknown: True\n    1. means/0  - \"means\"\n                                   marker: Operator(means/0, [Selector(Bridge('{ ...next(operator), from: before[0], to: after[0] }'), [Any]<==>[Any])], evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({}))\n                                   default: True\n                                   text: means\n                                   word: means\n   *2. unknown/1  - \"hana\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: hana\n                                   text: hana\n                                   value: hana\n                                   unknown: True\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({'marker': Operator(means/0, [Selector(Bridge('{ ...next(operator), from: before[0], to: after[0] }'), [Any]<==>[Any])], evaluator(Bridge('{ ...next(operator), from: before[0], to: after[0] }')), variables({})), 'default': True, 'text': 'means', 'word': 'means'})\n\n>>>>>>>>>>>>> Counter 4\n   *0. means/1  - \"hanna means hana\"\n                                   marker: Operator(means/1, [Selector(None, [Any]<==>[Any])], evaluator(None), variables({}))\n                                   default: True\n                                   text: hanna means hana\n                                   word: means\n                                   from: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hanna', 'text': 'hanna', 'value': 'hanna', 'unknown': True})\n                                   to: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'hana', 'text': 'hana', 'value': 'hana', 'unknown': True})\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "default": true,
          "from": {
            "marker": "unknown",
            "text": "hanna",
            "unknown": true,
            "value": "hanna",
            "word": "hanna"
          },
          "marker": "means",
          "text": "hanna means hana",
          "to": {
            "marker": "unknown",
            "text": "hana",
            "unknown": true,
            "value": "hana",
            "word": "hana"
          },
          "word": "means",
          "topLevel": true
        }
      ],
      "generated": [
        "means"
      ],
      "paraphrases": [
        "hanna means hana"
      ],
      "responses": [
        ""
      ],
      "memory_free_percent": 72.2,
      "version": "6.13.45-beta.10",
      "query": "hanna means hana"
    },
    {
      "hierarchy": [
        [
          "hate",
          "canBeQuestion"
        ],
        [
          "sushi",
          "hierarchyAble"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "food",
          "queryable"
        ],
        [
          "pidgeon",
          "queryable"
        ],
        [
          "human",
          "theAble"
        ],
        [
          "love",
          "canBeQuestion"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "owl",
          "theAble"
        ],
        [
          "dislike",
          "canBeDoQuestion"
        ],
        [
          "self",
          "queryable"
        ],
        [
          "dislike",
          "ifAble"
        ],
        [
          "parrot",
          "object"
        ],
        [
          "bird",
          "theAble"
        ],
        [
          "like",
          "orAble"
        ],
        [
          "dog",
          "object"
        ],
        [
          "canBeDoQuestion",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "mammal",
          "hierarchyAble"
        ],
        [
          "chicken_strip",
          "hierarchyAble"
        ],
        [
          "does_after_canBeDoQuestion_doesAble",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "cat",
          "queryable"
        ],
        [
          "mammal",
          "queryable"
        ],
        [
          "love",
          "canBeDoQuestion"
        ],
        [
          "dog",
          "queryable"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "hate",
          "canBeDoQuestion"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "human",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "feline",
          "queryable"
        ],
        [
          "strip",
          "theAble"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "bat",
          "queryable"
        ],
        [
          "like",
          "canBeQuestion"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "wolf",
          "object"
        ],
        [
          "dislike",
          "canBeQuestion"
        ],
        [
          "like",
          "ifAble"
        ],
        [
          "animal",
          "theAble"
        ],
        [
          "bird",
          "hierarchyAble"
        ],
        [
          "pidgeon",
          "hierarchyAble"
        ],
        [
          "strip",
          "concept"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "animal",
          "object"
        ],
        [
          "canine",
          "hierarchyAble"
        ],
        [
          "strip",
          "hierarchyAble"
        ],
        [
          "mammal",
          "object"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "have",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "questionMark_before_canBeQuestion_have",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "owl",
          "queryable"
        ],
        [
          "bat",
          "theAble"
        ],
        [
          "wolf",
          "hierarchyAble"
        ],
        [
          "food",
          "object"
        ],
        [
          "chicken_strip",
          "strip"
        ],
        [
          "strip",
          "queryable"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "feline",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "sushi",
          "object"
        ],
        [
          "parrot",
          "hierarchyAble"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "human",
          "object"
        ],
        [
          "hate",
          "orAble"
        ],
        [
          "animal",
          "queryable"
        ],
        [
          "canine",
          "theAble"
        ],
        [
          "animal",
          "hierarchyAble"
        ],
        [
          "pidgeon",
          "theAble"
        ],
        [
          "want",
          "ifAble"
        ],
        [
          "concept",
          "concept"
        ],
        [
          "wolf",
          "theAble"
        ],
        [
          "feline",
          "hierarchyAble"
        ],
        [
          "parrot",
          "theAble"
        ],
        [
          "bird",
          "object"
        ],
        [
          "want",
          "canBeQuestion"
        ],
        [
          "doesAble",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "eagle",
          "queryable"
        ],
        [
          "dislike",
          "orAble"
        ],
        [
          "whose",
          "object"
        ],
        [
          "dog",
          "theAble"
        ],
        [
          "parrot",
          "queryable"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "eagle",
          "object"
        ],
        [
          "mammal",
          "theAble"
        ],
        [
          "canBeQuestion",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "cat",
          "theAble"
        ],
        [
          "eagle",
          "hierarchyAble"
        ],
        [
          "cat",
          "object"
        ],
        [
          "feline",
          "object"
        ],
        [
          "food",
          "theAble"
        ],
        [
          "bird",
          "queryable"
        ],
        [
          "sushi",
          "theAble"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "owl",
          "object"
        ],
        [
          "canine",
          "object"
        ],
        [
          "love",
          "ifAble"
        ],
        [
          "bat",
          "hierarchyAble"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "pidgeon",
          "object"
        ],
        [
          "human",
          "hierarchyAble"
        ],
        [
          "food",
          "hierarchyAble"
        ],
        [
          "dog",
          "hierarchyAble"
        ],
        [
          "want",
          "canBeDoQuestion"
        ],
        [
          "want",
          "orAble"
        ],
        [
          "sushi",
          "queryable"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "wolf",
          "queryable"
        ],
        [
          "owl",
          "hierarchyAble"
        ],
        [
          "cat",
          "hierarchyAble"
        ],
        [
          "like",
          "canBeDoQuestion"
        ],
        [
          "love",
          "orAble"
        ],
        [
          "hate",
          "ifAble"
        ],
        [
          "eagle",
          "theAble"
        ],
        [
          "bat",
          "object"
        ],
        [
          "canine",
          "queryable"
        ],
        [
          "property",
          "queryable"
        ]
      ],
      "load_cache_time": 0.004403352737426758,
      "logs": [
        "Undefined word 'kia'",
        "Undefined word 'cleo'",
        "Op choices were: [(('unknown', 0), [('cat', 0), ('is', 0), ('possession', 0), ('unknown', 0)]), (('unknown', 0), [('cat', 0), ('is', 0), ('possession', 0), ('unknown', 0)]), (('cat', 0), [('cat', 0), ('is', 0), ('possession', 0)]), (('possession', 0), [('is', 0), ('possession', 0)]), (('possession', 1), [('is', 0), ('possession', 1)]), (('property', 0), [('is', 0), ('property', 0)]), (('is', 0), [('is', 0)]), (('is', 1), [('is', 1)])]",
        "Contexts used for choosing operators (if the wrong choices were made update the priories array. Put the expected choice at the end of the list): \n  Context for choosing the operator unknown/0 was [['cat', 0], ['is', 0], ['possession', 0], ['unknown', 0]]\n  Context for choosing the operator unknown/0 was [['cat', 0], ['is', 0], ['possession', 0], ['unknown', 0]]\n  Context for choosing the operator cat/0 was [['cat', 0], ['is', 0], ['possession', 0]]\n  Context for choosing the operator possession/0 was [['is', 0], ['possession', 0]]\n  Context for choosing the operator possession/1 was [['is', 0], ['possession', 1]]\n  Context for choosing the operator property/0 was [['is', 0], ['property', 0]]\n  Context for choosing the operator is/0 was [['is', 0]]\n  Context for choosing the operator is/1 was [['is', 1]]",
        "",
        "Semantic            No semantic applied                                                                       \n          TO        {                                                                                         \n                      \"marker\": \"controlStart\",                                                               \n                      \"controlRemove\": true,                                                                  \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n",
        "Semantic            KM 'properties' ordinal: 5  notes: \"set the property of an object\"                        \n          APPLIED   Semantic(({context}) => context.marker == 'property' && context.same && context.object, ({\n                    context, objects, km, api}) => {                                                          \n                            const objectContext = context.object;                                             \n                            const propertyContext = context;                                                  \n                            const objectId = context.object.value                                             \n                            const propertyId = context.value                                                  \n                            try{                                                                              \n                              // greg                                                                         \n                              // api.makeObject({config, context: objectContext, doPluralize: false})         \n                              // api.addWord(propertyContext)                                                 \n                              // api.addWord(objectContext)                                                   \n                              api.setProperty(pluralize.singular(objectId), pluralize.singular(propertyId), co\n                    ntext.same, true)                                                                         \n                              context.sameWasProcessed = true                                                 \n                            } catch (e) {                                                                     \n                              const config = km('properties')                                                 \n                              const fragment = config.fragment(\"the property1 of object1 is value1\")          \n                              const value = api.getProperty(objectId, propertyId)                             \n                              if (value.value == context.same.value) {                                        \n                                context.response = [                                                          \n                                  { marker: 'yesno', value: true, paraphrase: true },                         \n                                ]                                                                             \n                                context.sameWasProcessed = true                                               \n                              } else {                                                                        \n                                const mappings = [                                                            \n                                  {                                                                           \n                                    match: ({context}) => context.value == 'property1',                       \n                                    apply: ({context}) => Object.assign(context, { word: propertyContext.word,\n                     value: propertyContext.value, paraphrase: true }),                                       \n                                  },                                                                          \n                                  {                                                                           \n                                    match: ({context}) => context.value == 'object1',                         \n                                    apply: ({context}) => {                                                   \n                                      Object.assign(context, { word: objectContext.word, value: objectContext.\n                    value, paraphrase: true })                                                                \n                                    },                                                                        \n                                  },                                                                          \n                                  {                                                                           \n                                    match: ({context}) => context.value == 'value1',                          \n                                    apply: ({context}) => Object.assign(context, value),                      \n                                  },                                                                          \n                                ]                                                                             \n                                // run the query 'the property of object' then copy that here and template it \n                                context.response = {                                                          \n                                  verbatim: \"no way hose\"                                                     \n                                }                                                                             \n                                context.response = [                                                          \n                                  { marker: 'yesno', value: false, paraphrase: true },                        \n                                ]                                                                             \n                                context.response = context.response.concat(fragment.instantiate(mappings))    \n                                context.response.forEach( (r) => r.paraphrase = true )                        \n                                context.sameWasProcessed = true                                               \n                              }                                                                               \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"number\": \"one\",                                                                        \n                      \"object\": {                                                                             \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"kia\",                                                                        \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"kia\",                                                                       \n                        \"word\": \"kia\"                                                                         \n                      },                                                                                      \n                      \"objects\": [                                                                            \n                        {                                                                                     \n                          \"marker\": \"cat\",                                                                    \n                          \"number\": \"one\",                                                                    \n                          \"text\": \"cat\",                                                                      \n                          \"types\": [                                                                          \n                            \"cat\",                                                                            \n                            \"property\"                                                                        \n                          ],                                                                                  \n                          \"value\": \"cat\",                                                                     \n                          \"word\": \"cat\"                                                                       \n                        },                                                                                    \n                        {                                                                                     \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"kia\",                                                                      \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"kia\",                                                                     \n                          \"word\": \"kia\"                                                                       \n                        }                                                                                     \n                      ],                                                                                      \n                      \"text\": \"kia 's cat\",                                                                   \n                      \"types\": [                                                                              \n                        \"cat\",                                                                                \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"value\": \"cat\",                                                                         \n                      \"word\": \"cat\",                                                                          \n                      \"same\": {                                                                               \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"cleo\",                                                                       \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"cleo\",                                                                      \n                        \"word\": \"cleo\",                                                                       \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"response\": null                                                                        \n                    }                                                                                         \n          STACK     Context#2: call2,call3                                                                    \n          RESULT    {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"number\": \"one\",                                                                        \n                      \"object\": {                                                                             \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"kia\",                                                                        \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"kia\",                                                                       \n                        \"word\": \"kia\"                                                                         \n                      },                                                                                      \n                      \"objects\": [                                                                            \n                        {                                                                                     \n                          \"marker\": \"cat\",                                                                    \n                          \"number\": \"one\",                                                                    \n                          \"text\": \"cat\",                                                                      \n                          \"types\": [                                                                          \n                            \"cat\",                                                                            \n                            \"property\"                                                                        \n                          ],                                                                                  \n                          \"value\": \"cat\",                                                                     \n                          \"word\": \"cat\"                                                                       \n                        },                                                                                    \n                        {                                                                                     \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"kia\",                                                                      \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"kia\",                                                                     \n                          \"word\": \"kia\"                                                                       \n                        }                                                                                     \n                      ],                                                                                      \n                      \"text\": \"kia 's cat\",                                                                   \n                      \"types\": [                                                                              \n                        \"cat\",                                                                                \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"value\": \"cat\",                                                                         \n                      \"word\": \"cat\",                                                                          \n                      \"same\": {                                                                               \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"cleo\",                                                                       \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"cleo\",                                                                      \n                        \"word\": \"cleo\",                                                                       \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"response\": null,                                                                       \n                      \"sameWasProcessed\": true                                                                \n                    }                                                                                         \n",
        "Semantic            KM 'dialogues' ordinal: 4  notes: \"x is y\"                                                \n          APPLIED   Semantic(({context}) => context.marker == 'is' && !context.query && context.one && context\n                    .two, ({context, s, log}) => {                                                            \n                            const one = context.one;                                                          \n                            const two = context.two;                                                          \n                            one.same = two;                                                                   \n                            one.response = null                                                               \n                            two.response = null                                                               \n                            const onePrime = s(one)                                                           \n                            if (!onePrime.sameWasProcessed) {                                                 \n                              warningSameNotEvaluated(log, context, one)                                      \n                            } else {                                                                          \n                              if (onePrime.response) {                                                        \n                                context.response = onePrime.response                                          \n                              }                                                                               \n                            }                                                                                 \n                            one.same = undefined                                                              \n                            let twoPrime;                                                                     \n                            if (!onePrime.sameWasProcessed) {                                                 \n                              two.same = one                                                                  \n                              twoPrime = s(two)                                                               \n                              if (!twoPrime.sameWasProcessed) {                                               \n                                warningSameNotEvaluated(log, context, two)                                    \n                              } else {                                                                        \n                                if (twoPrime.response) {                                                      \n                                  context.response = twoPrime.response                                        \n                                }                                                                             \n                              }                                                                               \n                              two.same = undefined                                                            \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"default\": true,                                                                        \n                      \"marker\": \"is\",                                                                         \n                      \"one\": {                                                                                \n                        \"marker\": \"property\",                                                                 \n                        \"number\": \"one\",                                                                      \n                        \"object\": {                                                                           \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"kia\",                                                                      \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"kia\",                                                                     \n                          \"word\": \"kia\"                                                                       \n                        },                                                                                    \n                        \"objects\": [                                                                          \n                          {                                                                                   \n                            \"marker\": \"cat\",                                                                  \n                            \"number\": \"one\",                                                                  \n                            \"text\": \"cat\",                                                                    \n                            \"types\": [                                                                        \n                              \"cat\",                                                                          \n                              \"property\"                                                                      \n                            ],                                                                                \n                            \"value\": \"cat\",                                                                   \n                            \"word\": \"cat\"                                                                     \n                          },                                                                                  \n                          {                                                                                   \n                            \"marker\": \"unknown\",                                                              \n                            \"text\": \"kia\",                                                                    \n                            \"types\": [                                                                        \n                              \"object\",                                                                       \n                              \"unknown\"                                                                       \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"kia\",                                                                   \n                            \"word\": \"kia\"                                                                     \n                          }                                                                                   \n                        ],                                                                                    \n                        \"text\": \"kia 's cat\",                                                                 \n                        \"types\": [                                                                            \n                          \"cat\",                                                                              \n                          \"property\"                                                                          \n                        ],                                                                                    \n                        \"value\": \"cat\",                                                                       \n                        \"word\": \"cat\",                                                                        \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"text\": \"kia 's cat is cleo\",                                                           \n                      \"two\": {                                                                                \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"cleo\",                                                                       \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"cleo\",                                                                      \n                        \"word\": \"cleo\",                                                                       \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"word\": \"is\",                                                                           \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n          STACK     Context#2: call2                                                                          \n          RESULT    {                                                                                         \n                      \"default\": true,                                                                        \n                      \"marker\": \"is\",                                                                         \n                      \"one\": {                                                                                \n                        \"marker\": \"property\",                                                                 \n                        \"number\": \"one\",                                                                      \n                        \"object\": {                                                                           \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"kia\",                                                                      \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"kia\",                                                                     \n                          \"word\": \"kia\"                                                                       \n                        },                                                                                    \n                        \"objects\": [                                                                          \n                          {                                                                                   \n                            \"marker\": \"cat\",                                                                  \n                            \"number\": \"one\",                                                                  \n                            \"text\": \"cat\",                                                                    \n                            \"types\": [                                                                        \n                              \"cat\",                                                                          \n                              \"property\"                                                                      \n                            ],                                                                                \n                            \"value\": \"cat\",                                                                   \n                            \"word\": \"cat\"                                                                     \n                          },                                                                                  \n                          {                                                                                   \n                            \"marker\": \"unknown\",                                                              \n                            \"text\": \"kia\",                                                                    \n                            \"types\": [                                                                        \n                              \"object\",                                                                       \n                              \"unknown\"                                                                       \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"kia\",                                                                   \n                            \"word\": \"kia\"                                                                     \n                          }                                                                                   \n                        ],                                                                                    \n                        \"text\": \"kia 's cat\",                                                                 \n                        \"types\": [                                                                            \n                          \"cat\",                                                                              \n                          \"property\"                                                                          \n                        ],                                                                                    \n                        \"value\": \"cat\",                                                                       \n                        \"word\": \"cat\",                                                                        \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"text\": \"kia 's cat is cleo\",                                                           \n                      \"two\": {                                                                                \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"cleo\",                                                                       \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"cleo\",                                                                      \n                        \"word\": \"cleo\",                                                                       \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"word\": \"is\",                                                                           \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n",
        "Generator           KM 'dialogues' ordinal: 14                                                                \n          APPLIED   Generator(({context}) => context.marker == 'unknown', ({context}) => {                    \n                            if (typeof context.marker === 'string') {                                         \n                              return context.value                                                            \n                            } else {                                                                          \n                              JSON.stringify(context.value)                                                   \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"kia\",                                                                          \n                      \"types\": [                                                                              \n                        \"object\",                                                                             \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"kia\",                                                                         \n                      \"word\": \"kia\",                                                                          \n                      \"paraphrase\": true,                                                                     \n                      \"possessive\": false,                                                                    \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call5,call6,call7                                                        \n          RESULT    kia                                                                                       \n",
        "Generator           KM 'properties' ordinal: 0  notes: \"add possession ending\"                                \n          APPLIED   Generator(({context}) => context.paraphrase && context.possessive, ({context, g}) => {    \n                            context.possessive = false                                                        \n                            const phrase = g(context)                                                         \n                            context.possessive = true                                                         \n                            if (phrase.endsWith('s')) {                                                       \n                              return `${phrase}'`                                                             \n                            } else {                                                                          \n                              return `${phrase}'s`                                                            \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"kia\",                                                                          \n                      \"types\": [                                                                              \n                        \"object\",                                                                             \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"kia\",                                                                         \n                      \"word\": \"kia\",                                                                          \n                      \"paraphrase\": true,                                                                     \n                      \"possessive\": true,                                                                     \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call5,call6                                                              \n          RESULT    kia's                                                                                     \n",
        "Generator           KM 'dialogues' ordinal: 25                                                                \n          APPLIED   Generator(({context}) => context.paraphrase && context.word, ({context}) => `${context.wor\n                    d}`)                                                                                      \n          TO        {                                                                                         \n                      \"marker\": \"cat\",                                                                        \n                      \"number\": \"one\",                                                                        \n                      \"text\": \"cat\",                                                                          \n                      \"types\": [                                                                              \n                        \"cat\",                                                                                \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"value\": \"cat\",                                                                         \n                      \"word\": \"cat\",                                                                          \n                      \"paraphrase\": true,                                                                     \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call5,call8                                                              \n          RESULT    cat                                                                                       \n",
        "Generator           KM 'properties' ordinal: 11  notes: \"object's property\"                                   \n          APPLIED   Generator(({context}) => !context.modifiers && context.object, ({context, g, gs}) => {    \n                                   if (context.objects) {                                                     \n                                     const objects = [ ...context.objects ]                                   \n                                     objects.reverse()                                                        \n                                     let phrase = ''                                                          \n                                     let separator = ''                                                       \n                                     for (let i = 0; i < objects.length-1; ++i) {                             \n                                       phrase = phrase + separator + g({...objects[i], paraphrase: context.par\n                    aphrase, possessive: true})                                                               \n                                       separator = ' '                                                        \n                                     }                                                                        \n                                     phrase = phrase + separator + g({...objects[objects.length-1], paraphrase\n                    : context.paraphrase})                                                                    \n                                     return phrase                                                            \n                                   } else {                                                                   \n                                     const base = { ...context }                                              \n                                     base.object = undefined; // TODO make paraphrase be a default when paraph\n                    rasing?                                                                                   \n                                     if (context.object.marker == 'objectPrefix') {                           \n                                       return `${g(context.object)} ${g(base)}`                               \n                                     } else {                                                                 \n                                       return `${g({...context.object, paraphrase: context.paraphrase})}'s ${g\n                    (base)}`                                                                                  \n                                     }                                                                        \n                                   }                                                                          \n                                 })                                                                           \n          TO        {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"number\": \"one\",                                                                        \n                      \"object\": {                                                                             \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"kia\",                                                                        \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"kia\",                                                                       \n                        \"word\": \"kia\"                                                                         \n                      },                                                                                      \n                      \"objects\": [                                                                            \n                        {                                                                                     \n                          \"marker\": \"cat\",                                                                    \n                          \"number\": \"one\",                                                                    \n                          \"text\": \"cat\",                                                                      \n                          \"types\": [                                                                          \n                            \"cat\",                                                                            \n                            \"property\"                                                                        \n                          ],                                                                                  \n                          \"value\": \"cat\",                                                                     \n                          \"word\": \"cat\"                                                                       \n                        },                                                                                    \n                        {                                                                                     \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"kia\",                                                                      \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"kia\",                                                                     \n                          \"word\": \"kia\"                                                                       \n                        }                                                                                     \n                      ],                                                                                      \n                      \"text\": \"kia 's cat\",                                                                   \n                      \"types\": [                                                                              \n                        \"cat\",                                                                                \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"value\": \"cat\",                                                                         \n                      \"word\": \"cat\",                                                                          \n                      \"response\": null,                                                                       \n                      \"paraphrase\": true,                                                                     \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call5                                                                    \n          RESULT    kia's cat                                                                                 \n",
        "Generator           KM 'dialogues' ordinal: 7  notes: \"paraphrase a queryable\"                                \n          APPLIED   Generator(({context, hierarchy}) => hierarchy.isA(context.marker, 'queryable') && !context\n                    .isQuery && !context.paraphrase && context.value, ({context, g}) => {                     \n                            const oldValue = context.value.paraphrase                                         \n                            context.value.paraphrase = true                                                   \n                            const result = g(context.value)                                                   \n                            context.value.paraphrase = oldValue                                               \n                            return result                                                                     \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"cleo\",                                                                         \n                      \"types\": [                                                                              \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"cleo\",                                                                        \n                      \"word\": \"cleo\",                                                                         \n                      \"response\": null,                                                                       \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4,call9                                                                    \n          RESULT    cleo                                                                                      \n",
        "Generator           KM 'dialogues' ordinal: 24  notes: \"x is y (not a response)\"                              \n          APPLIED   Generator(({context, hierarchy}) => hierarchy.isA(context.marker, 'is') && !context.respon\n                    se, ({context, g}) => {                                                                   \n                            // return `${g({ ...context.one, paraphrase: true })} ${isMany(context.one) || isM\n                    any(context.two) || isMany(context) ? \"are\" : \"is\"} ${g(context.two)}`                    \n                            // response or not response -> paraphrase                                         \n                            // the age of greg is the age -> age is 23    -> first only missing paraphrase mar\n                    ker because it is coming from the context                                                 \n                            // your name is greg --response--> your name is greg // should be my name         \n                            // return `${g({...context.one, paraphrase: context.paraphrase})} ${isMany(context\n                    .one) || isMany(context.two) || isMany(context) ? \"are\" : \"is\"} ${g(context.two)}`        \n                            return `${g({...context.one, paraphrase: true})} ${isMany(context.one) || isMany(c\n                    ontext.two) || isMany(context) ? \"are\" : \"is\"} ${g(context.two)}`                         \n                            // return `${g({...context.one})} ${isMany(context.one) || isMany(context.two) || \n                    isMany(context) ? \"are\" : \"is\"} ${g(context.two)}`                                        \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"default\": true,                                                                        \n                      \"marker\": \"is\",                                                                         \n                      \"one\": {                                                                                \n                        \"marker\": \"property\",                                                                 \n                        \"number\": \"one\",                                                                      \n                        \"object\": {                                                                           \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"kia\",                                                                      \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"kia\",                                                                     \n                          \"word\": \"kia\"                                                                       \n                        },                                                                                    \n                        \"objects\": [                                                                          \n                          {                                                                                   \n                            \"marker\": \"cat\",                                                                  \n                            \"number\": \"one\",                                                                  \n                            \"text\": \"cat\",                                                                    \n                            \"types\": [                                                                        \n                              \"cat\",                                                                          \n                              \"property\"                                                                      \n                            ],                                                                                \n                            \"value\": \"cat\",                                                                   \n                            \"word\": \"cat\"                                                                     \n                          },                                                                                  \n                          {                                                                                   \n                            \"marker\": \"unknown\",                                                              \n                            \"text\": \"kia\",                                                                    \n                            \"types\": [                                                                        \n                              \"object\",                                                                       \n                              \"unknown\"                                                                       \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"kia\",                                                                   \n                            \"word\": \"kia\"                                                                     \n                          }                                                                                   \n                        ],                                                                                    \n                        \"text\": \"kia 's cat\",                                                                 \n                        \"types\": [                                                                            \n                          \"cat\",                                                                              \n                          \"property\"                                                                          \n                        ],                                                                                    \n                        \"value\": \"cat\",                                                                       \n                        \"word\": \"cat\",                                                                        \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"text\": \"kia 's cat is cleo\",                                                           \n                      \"two\": {                                                                                \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"cleo\",                                                                       \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"cleo\",                                                                      \n                        \"word\": \"cleo\",                                                                       \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"word\": \"is\",                                                                           \n                      \"topLevel\": true,                                                                       \n                      \"isResponse\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call4                                                                          \n          RESULT    kia's cat is cleo                                                                         \n",
        "Generator           KM 'dialogues' ordinal: 14                                                                \n          APPLIED   Generator(({context}) => context.marker == 'unknown', ({context}) => {                    \n                            if (typeof context.marker === 'string') {                                         \n                              return context.value                                                            \n                            } else {                                                                          \n                              JSON.stringify(context.value)                                                   \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"kia\",                                                                          \n                      \"types\": [                                                                              \n                        \"object\",                                                                             \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"kia\",                                                                         \n                      \"word\": \"kia\",                                                                          \n                      \"paraphrase\": true,                                                                     \n                      \"possessive\": false                                                                     \n                    }                                                                                         \n          STACK     Context#2: call10,call11,call12,call13                                                    \n          RESULT    kia                                                                                       \n",
        "Generator           KM 'properties' ordinal: 0  notes: \"add possession ending\"                                \n          APPLIED   Generator(({context}) => context.paraphrase && context.possessive, ({context, g}) => {    \n                            context.possessive = false                                                        \n                            const phrase = g(context)                                                         \n                            context.possessive = true                                                         \n                            if (phrase.endsWith('s')) {                                                       \n                              return `${phrase}'`                                                             \n                            } else {                                                                          \n                              return `${phrase}'s`                                                            \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"kia\",                                                                          \n                      \"types\": [                                                                              \n                        \"object\",                                                                             \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"kia\",                                                                         \n                      \"word\": \"kia\",                                                                          \n                      \"paraphrase\": true,                                                                     \n                      \"possessive\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call10,call11,call12                                                           \n          RESULT    kia's                                                                                     \n",
        "Generator           KM 'dialogues' ordinal: 25                                                                \n          APPLIED   Generator(({context}) => context.paraphrase && context.word, ({context}) => `${context.wor\n                    d}`)                                                                                      \n          TO        {                                                                                         \n                      \"marker\": \"cat\",                                                                        \n                      \"number\": \"one\",                                                                        \n                      \"text\": \"cat\",                                                                          \n                      \"types\": [                                                                              \n                        \"cat\",                                                                                \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"value\": \"cat\",                                                                         \n                      \"word\": \"cat\",                                                                          \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call10,call11,call14                                                           \n          RESULT    cat                                                                                       \n",
        "Generator           KM 'properties' ordinal: 11  notes: \"object's property\"                                   \n          APPLIED   Generator(({context}) => !context.modifiers && context.object, ({context, g, gs}) => {    \n                                   if (context.objects) {                                                     \n                                     const objects = [ ...context.objects ]                                   \n                                     objects.reverse()                                                        \n                                     let phrase = ''                                                          \n                                     let separator = ''                                                       \n                                     for (let i = 0; i < objects.length-1; ++i) {                             \n                                       phrase = phrase + separator + g({...objects[i], paraphrase: context.par\n                    aphrase, possessive: true})                                                               \n                                       separator = ' '                                                        \n                                     }                                                                        \n                                     phrase = phrase + separator + g({...objects[objects.length-1], paraphrase\n                    : context.paraphrase})                                                                    \n                                     return phrase                                                            \n                                   } else {                                                                   \n                                     const base = { ...context }                                              \n                                     base.object = undefined; // TODO make paraphrase be a default when paraph\n                    rasing?                                                                                   \n                                     if (context.object.marker == 'objectPrefix') {                           \n                                       return `${g(context.object)} ${g(base)}`                               \n                                     } else {                                                                 \n                                       return `${g({...context.object, paraphrase: context.paraphrase})}'s ${g\n                    (base)}`                                                                                  \n                                     }                                                                        \n                                   }                                                                          \n                                 })                                                                           \n          TO        {                                                                                         \n                      \"marker\": \"property\",                                                                   \n                      \"number\": \"one\",                                                                        \n                      \"object\": {                                                                             \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"kia\",                                                                        \n                        \"types\": [                                                                            \n                          \"object\",                                                                           \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"kia\",                                                                       \n                        \"word\": \"kia\"                                                                         \n                      },                                                                                      \n                      \"objects\": [                                                                            \n                        {                                                                                     \n                          \"marker\": \"cat\",                                                                    \n                          \"number\": \"one\",                                                                    \n                          \"text\": \"cat\",                                                                      \n                          \"types\": [                                                                          \n                            \"cat\",                                                                            \n                            \"property\"                                                                        \n                          ],                                                                                  \n                          \"value\": \"cat\",                                                                     \n                          \"word\": \"cat\"                                                                       \n                        },                                                                                    \n                        {                                                                                     \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"kia\",                                                                      \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"kia\",                                                                     \n                          \"word\": \"kia\"                                                                       \n                        }                                                                                     \n                      ],                                                                                      \n                      \"text\": \"kia 's cat\",                                                                   \n                      \"types\": [                                                                              \n                        \"cat\",                                                                                \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"value\": \"cat\",                                                                         \n                      \"word\": \"cat\",                                                                          \n                      \"response\": true,                                                                       \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call10,call11                                                                  \n          RESULT    kia's cat                                                                                 \n",
        "Generator           KM 'dialogues' ordinal: 14                                                                \n          APPLIED   Generator(({context}) => context.marker == 'unknown', ({context}) => {                    \n                            if (typeof context.marker === 'string') {                                         \n                              return context.value                                                            \n                            } else {                                                                          \n                              JSON.stringify(context.value)                                                   \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"marker\": \"unknown\",                                                                    \n                      \"text\": \"cleo\",                                                                         \n                      \"types\": [                                                                              \n                        \"unknown\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"cleo\",                                                                        \n                      \"word\": \"cleo\",                                                                         \n                      \"response\": true,                                                                       \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call10,call15                                                                  \n          RESULT    cleo                                                                                      \n",
        "Generator           KM 'dialogues' ordinal: 22  notes: \"x is y\"                                               \n          APPLIED   Generator(({context, hierarchy}) => { return hierarchy.isA(context.marker, 'is') && contex\n                    t.paraphrase }, ({context, g}) => {                                                       \n                            context.one.response = true                                                       \n                            context.two.response = true                                                       \n                            return `${g({ ...context.one, paraphrase: true })} ${context.word} ${g(context.two\n                    )}`                                                                                       \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"default\": true,                                                                        \n                      \"marker\": \"is\",                                                                         \n                      \"one\": {                                                                                \n                        \"marker\": \"property\",                                                                 \n                        \"number\": \"one\",                                                                      \n                        \"object\": {                                                                           \n                          \"marker\": \"unknown\",                                                                \n                          \"text\": \"kia\",                                                                      \n                          \"types\": [                                                                          \n                            \"object\",                                                                         \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"kia\",                                                                     \n                          \"word\": \"kia\"                                                                       \n                        },                                                                                    \n                        \"objects\": [                                                                          \n                          {                                                                                   \n                            \"marker\": \"cat\",                                                                  \n                            \"number\": \"one\",                                                                  \n                            \"text\": \"cat\",                                                                    \n                            \"types\": [                                                                        \n                              \"cat\",                                                                          \n                              \"property\"                                                                      \n                            ],                                                                                \n                            \"value\": \"cat\",                                                                   \n                            \"word\": \"cat\"                                                                     \n                          },                                                                                  \n                          {                                                                                   \n                            \"marker\": \"unknown\",                                                              \n                            \"text\": \"kia\",                                                                    \n                            \"types\": [                                                                        \n                              \"object\",                                                                       \n                              \"unknown\"                                                                       \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"kia\",                                                                   \n                            \"word\": \"kia\"                                                                     \n                          }                                                                                   \n                        ],                                                                                    \n                        \"text\": \"kia 's cat\",                                                                 \n                        \"types\": [                                                                            \n                          \"cat\",                                                                              \n                          \"property\"                                                                          \n                        ],                                                                                    \n                        \"value\": \"cat\",                                                                       \n                        \"word\": \"cat\",                                                                        \n                        \"response\": true                                                                      \n                      },                                                                                      \n                      \"text\": \"kia 's cat is cleo\",                                                           \n                      \"two\": {                                                                                \n                        \"marker\": \"unknown\",                                                                  \n                        \"text\": \"cleo\",                                                                       \n                        \"types\": [                                                                            \n                          \"unknown\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"cleo\",                                                                      \n                        \"word\": \"cleo\",                                                                       \n                        \"response\": true                                                                      \n                      },                                                                                      \n                      \"word\": \"is\",                                                                           \n                      \"topLevel\": true,                                                                       \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          STACK     Context#2: call10                                                                         \n          RESULT    kia's cat is cleo                                                                         \n",
        "Semantic            No semantic applied                                                                       \n          TO        {                                                                                         \n                      \"marker\": \"controlEnd\",                                                                 \n                      \"controlRemove\": true,                                                                  \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n"
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "cat",
                0
              ],
              [
                "is",
                0
              ],
              [
                "possession",
                0
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "cat",
                0
              ],
              [
                "is",
                0
              ],
              [
                "possession",
                0
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "cat",
              0
            ],
            "ops": [
              [
                "cat",
                0
              ],
              [
                "is",
                0
              ],
              [
                "possession",
                0
              ]
            ]
          },
          {
            "op": [
              "possession",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "possession",
                0
              ]
            ]
          },
          {
            "op": [
              "possession",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "possession",
                1
              ]
            ]
          },
          {
            "op": [
              "property",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "property",
                0
              ]
            ]
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ]
            ]
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ]
          }
        ]
      },
      "times": 1.254194974899292,
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n    0. unknown/0  - \"kia\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: kia\n                                   text: kia\n                                   value: kia\n    1. possession/0  - \"'s\"\n                                   value: possession\n                                   text: 's\n                                   marker: Operator(possession/0, [Selector(Bridge('{ ...next(operator), object: before[0], objects: before }'), [Type('object')]<==>[])], evaluator(Bridge('{ ...next(operator), object: before[0], objects: before }')), variables({}), inverted)\n                                   word: 's\n    2. cat/0  - \"cat\"\n                                   value: cat\n                                   number: one\n                                   text: cat\n                                   marker: Operator(cat/0, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({}))\n                                   word: cat\n    3. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n    4. unknown/0  - \"cleo\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: cleo\n                                   text: cleo\n                                   value: cleo\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({'marker': Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia'})\n\n>>>>>>>>>>>>> Counter 2\n   *0. unknown/1  - \"kia\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: kia\n                                   text: kia\n                                   value: kia\n                                   unknown: True\n    1. possession/0  - \"'s\"\n                                   value: possession\n                                   text: 's\n                                   marker: Operator(possession/0, [Selector(Bridge('{ ...next(operator), object: before[0], objects: before }'), [Type('object')]<==>[])], evaluator(Bridge('{ ...next(operator), object: before[0], objects: before }')), variables({}), inverted)\n                                   word: 's\n    2. cat/0  - \"cat\"\n                                   value: cat\n                                   number: one\n                                   text: cat\n                                   marker: Operator(cat/0, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({}))\n                                   word: cat\n    3. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n    4. unknown/0  - \"cleo\"\n                                   marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: cleo\n                                   text: cleo\n                                   value: cleo\n<<<<<<<<<<<<<\nNext Op (index=4) is Context({'marker': Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({})), 'word': 'cleo', 'text': 'cleo', 'value': 'cleo'})\n\n>>>>>>>>>>>>> Counter 3\n    0. unknown/1  - \"kia\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: kia\n                                   text: kia\n                                   value: kia\n                                   unknown: True\n    1. possession/0  - \"'s\"\n                                   value: possession\n                                   text: 's\n                                   marker: Operator(possession/0, [Selector(Bridge('{ ...next(operator), object: before[0], objects: before }'), [Type('object')]<==>[])], evaluator(Bridge('{ ...next(operator), object: before[0], objects: before }')), variables({}), inverted)\n                                   word: 's\n    2. cat/0  - \"cat\"\n                                   value: cat\n                                   number: one\n                                   text: cat\n                                   marker: Operator(cat/0, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({}))\n                                   word: cat\n    3. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n   *4. unknown/1  - \"cleo\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: cleo\n                                   text: cleo\n                                   value: cleo\n                                   unknown: True\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({'value': 'cat', 'number': 'one', 'text': 'cat', 'marker': Operator(cat/0, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({})), 'word': 'cat'})\n\n>>>>>>>>>>>>> Counter 4\n    0. unknown/1  - \"kia\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: kia\n                                   text: kia\n                                   value: kia\n                                   unknown: True\n    1. possession/0  - \"'s\"\n                                   value: possession\n                                   text: 's\n                                   marker: Operator(possession/0, [Selector(Bridge('{ ...next(operator), object: before[0], objects: before }'), [Type('object')]<==>[])], evaluator(Bridge('{ ...next(operator), object: before[0], objects: before }')), variables({}), inverted)\n                                   word: 's\n   *2. cat/1  - \"cat\"\n                                   value: cat\n                                   number: one\n                                   text: cat\n                                   marker: Operator(cat/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: cat\n    3. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n    4. unknown/1  - \"cleo\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: cleo\n                                   text: cleo\n                                   value: cleo\n                                   unknown: True\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({'value': 'possession', 'text': \"'s\", 'marker': Operator(possession/0, [Selector(Bridge('{ ...next(operator), object: before[0], objects: before }'), [Type('object')]<==>[])], evaluator(Bridge('{ ...next(operator), object: before[0], objects: before }')), variables({}), inverted), 'word': \"'s\"})\n\n>>>>>>>>>>>>> Counter 5\n   *0. possession/1  - \"kia 's\"\n                                   value: possession\n                                   text: kia 's\n                                   marker: Operator(possession/1, PASS, [Selector(Bridge('{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }'), []<==>[Type('property')])], evaluator(Bridge('{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: o\n                                   word: 's\n                                   object: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown', 'object']})\n                                   objects: [\n                                     marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                     word: kia\n                                     text: kia\n                                     value: kia\n                                     unknown: True\n                                     types: [\n                                     'unknown'\n,                                      'object'\n                                     ]\n                                   ]\n    1. cat/1  - \"cat\"\n                                   value: cat\n                                   number: one\n                                   text: cat\n                                   marker: Operator(cat/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: cat\n    2. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n    3. unknown/1  - \"cleo\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: cleo\n                                   text: cleo\n                                   value: cleo\n                                   unknown: True\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({'value': 'possession', 'text': \"kia 's\", 'marker': Operator(possession/1, PASS, [Selector(Bridge('{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }'), []<==>[Type('property')])], evaluator(Bridge('{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }')), variables({}), inverted), 'word': \"'s\", 'object': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown', 'object']}), 'objects': [Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown', 'object']})]})\n\n>>>>>>>>>>>>> Counter 6\n   *0. property/0  - \"kia 's cat\"\n                                   value: cat\n                                   number: one\n                                   text: kia 's cat\n                                   marker: Operator(property/0, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({}))\n                                   word: cat\n                                   types: [\n                                   'cat'\n,                                    'property'\n                                   ]\n                                   object: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown', 'object']})\n                                   objects: [\n                                     value: cat\n                                     number: one\n                                     text: cat\n                                     marker: Operator(cat/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                     word: cat\n                                     types: [\n                                     'cat'\n,                                      'property'\n                                     ]\n\n                                     marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                     word: kia\n                                     text: kia\n                                     value: kia\n                                     unknown: True\n                                     types: [\n                                     'unknown'\n,                                      'object'\n                                     ]\n                                   ]\n    1. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n    2. unknown/1  - \"cleo\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: cleo\n                                   text: cleo\n                                   value: cleo\n                                   unknown: True\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({'value': 'cat', 'number': 'one', 'text': \"kia 's cat\", 'marker': Operator(property/0, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({})), 'word': 'cat', 'types': ['cat', 'property'], 'object': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown', 'object']}), 'objects': [Context({'value': 'cat', 'number': 'one', 'text': 'cat', 'marker': Operator(cat/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'cat', 'types': ['cat', 'property']}), Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown', 'object']})]})\n\n>>>>>>>>>>>>> Counter 7\n   *0. property/1  - \"kia 's cat\"\n                                   value: cat\n                                   number: one\n                                   text: kia 's cat\n                                   marker: Operator(property/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: cat\n                                   types: [\n                                   'cat'\n,                                    'property'\n                                   ]\n                                   object: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown', 'object']})\n                                   objects: [\n                                     value: cat\n                                     number: one\n                                     text: cat\n                                     marker: Operator(cat/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                     word: cat\n                                     types: [\n                                     'cat'\n,                                      'property'\n                                     ]\n\n                                     marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                     word: kia\n                                     text: kia\n                                     value: kia\n                                     unknown: True\n                                     types: [\n                                     'unknown'\n,                                      'object'\n                                     ]\n                                   ]\n    1. is/0  - \"is\"\n                                   marker: Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: is\n    2. unknown/1  - \"cleo\"\n                                   marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: cleo\n                                   text: cleo\n                                   value: cleo\n                                   unknown: True\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({'marker': Operator(is/0, [Selector(Bridge('{ ...next(operator), one: after[0], two: after[1], query: true }'), []<==>[Type('queryable'), Type('queryable')]), Selector(Bridge('{ ...next(operator), one: before[0], two: after[0] }'), [Type('queryable')]<==>[Type('queryable')])], evaluator(Bridge('{ ...next(operator), one: before[0], two: after[0] }')), variables({})), 'default': True, 'word': 'is', 'text': 'is'})\n\n>>>>>>>>>>>>> Counter 8\n   *0. is/1  - \"kia 's cat is cleo\"\n                                   marker: Operator(is/1, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({}))\n                                   default: True\n                                   word: is\n                                   text: kia 's cat is cleo\n                                   one: Context({'value': 'cat', 'number': 'one', 'text': \"kia 's cat\", 'marker': Operator(property/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'cat', 'types': ['cat', 'property', 'property'], 'object': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value'\n                                   two: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'cleo', 'text': 'cleo', 'value': 'cleo', 'unknown': True, 'types': ['unknown']})\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({'marker': Operator(is/1, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({})), 'default': True, 'word': 'is', 'text': \"kia 's cat is cleo\", 'one': Context({'value': 'cat', 'number': 'one', 'text': \"kia 's cat\", 'marker': Operator(property/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'cat', 'types': ['cat', 'property', 'property'], 'object': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown', 'object']}), 'objects': [Context({'value': 'cat', 'number': 'one', 'text': 'cat', 'marker': Operator(cat/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'cat', 'types': ['cat', 'property', 'property']}), Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value': 'kia', 'unknown': True, 'types': ['unknown', 'object']})]}), 'two': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'cleo', 'text': 'cleo', 'value': 'cleo', 'unknown': True, 'types': ['unknown']})})\n\n>>>>>>>>>>>>> Counter 9\n   *0. is/2  - \"kia 's cat is cleo\"\n                                   marker: Operator(is/2, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   default: True\n                                   word: is\n                                   text: kia 's cat is cleo\n                                   one: Context({'value': 'cat', 'number': 'one', 'text': \"kia 's cat\", 'marker': Operator(property/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'cat', 'types': ['cat', 'property', 'property'], 'object': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'kia', 'text': 'kia', 'value'\n                                   two: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'cleo', 'text': 'cleo', 'value': 'cleo', 'unknown': True, 'types': ['unknown']})\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "default": true,
          "marker": "is",
          "one": {
            "marker": "property",
            "number": "one",
            "object": {
              "marker": "unknown",
              "text": "kia",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "kia",
              "word": "kia"
            },
            "objects": [
              {
                "marker": "cat",
                "number": "one",
                "text": "cat",
                "types": [
                  "cat",
                  "property"
                ],
                "value": "cat",
                "word": "cat"
              },
              {
                "marker": "unknown",
                "text": "kia",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "kia",
                "word": "kia"
              }
            ],
            "text": "kia 's cat",
            "types": [
              "cat",
              "property"
            ],
            "value": "cat",
            "word": "cat",
            "response": true
          },
          "text": "kia 's cat is cleo",
          "two": {
            "marker": "unknown",
            "text": "cleo",
            "types": [
              "unknown"
            ],
            "unknown": true,
            "value": "cleo",
            "word": "cleo",
            "response": true
          },
          "word": "is",
          "topLevel": true
        }
      ],
      "generated": [
        "kia's cat is cleo"
      ],
      "paraphrases": [
        "kia's cat is cleo"
      ],
      "responses": [
        ""
      ],
      "memory_free_percent": 72.7,
      "version": "6.13.45-beta.10",
      "query": "kia's cat is cleo"
    }
  ],
  "fragments": [],
  "semantics": []
}