{
  "chicken modifies strips": {
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatable",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "infix"
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "postfix"
          }
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), query: ['what'], determined: true }",
          "id": "what",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: before[0], two: after[0] }",
          "id": "is",
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, ...context }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: 'a', modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, determined: true }",
          "hierarchy": [
            "queryable"
          ],
          "id": "it",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        },
        {
          "allowDups": true,
          "bridge": "{ ...after, chicken: operator, marker: operator(concat('chicken_', after.value)), atomic: true, value: concat('chicken_', after.value), modifiers: append(['chicken'], after[0].modifiers)}",
          "id": "chicken",
          "level": 0
        },
        {
          "allowDups": true,
          "bridge": "{ ...next(operator), value: 'strip' }",
          "id": "strip",
          "level": 0
        },
        {
          "allowDups": true,
          "bridge": "{ ...next(operator), value: 'chicken_strip' }",
          "id": "chicken_strip",
          "level": 0
        }
      ],
      "operators": [
        {
          "allowDups": true,
          "pattern": "([chicken_strip|])"
        },
        {
          "allowDups": true,
          "pattern": "(<chicken|> ([strip|]))"
        },
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|has,have] ([property|]))"
        },
        {
          "pattern": "(<doesnt|doesnt,dont> ([have/0]))"
        },
        {
          "pattern": "(([queryable]) [is|is,are] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|is,are] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([what] ([whatable|])?)"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|does,do> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "chicken": [
          {
            "id": "chicken",
            "initial": "{ value: 'chicken' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "strip": [
          {
            "id": "strip",
            "initial": "{ value: 'strip' }"
          }
        ],
        "strips": [
          {
            "id": "strip",
            "initial": "{ value: 'strip' }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [] }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "concept": {
          "marker": "unknown",
          "text": "strips",
          "unknown": true,
          "value": "strips",
          "word": "strips"
        },
        "default": true,
        "marker": "modifies",
        "modifier": {
          "marker": "unknown",
          "text": "chicken",
          "unknown": true,
          "value": "chicken",
          "word": "chicken"
        },
        "text": "chicken modifies strips",
        "topLevel": true,
        "touchedBy": [
          "call2"
        ],
        "word": "modifies"
      }
    ],
    "metadata": {
      "opChoices": [
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "modifies",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "modifies",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "modifies",
            0
          ],
          "ops": [
            [
              "modifies",
              0
            ]
          ]
        }
      ]
    },
    "objects": {
      "namespaced": {
        "0": {
          "children": {
          },
          "concepts": [
            "properties"
          ],
          "parents": {
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
            }
          },
          "property": {
          },
          "relations": [
          ],
          "valueToWords": {
            "chicken_strip": [
              {
                "chicken": {
                  "marker": "chicken",
                  "value": "chicken",
                  "word": "chicken"
                },
                "marker": "chicken_strip",
                "modifiers": [
                  "chicken"
                ],
                "paraphrase": true,
                "types": [
                  "chicken_strip"
                ],
                "value": "chicken_strip",
                "word": "strip"
              }
            ]
          }
        },
        "1": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "2": {
        }
      },
      "processed": [
        {
          "context": {
            "concept": {
              "marker": "unknown",
              "text": "strips",
              "unknown": true,
              "value": "strips",
              "word": "strips"
            },
            "default": true,
            "marker": "modifies",
            "modifier": {
              "marker": "unknown",
              "text": "chicken",
              "unknown": true,
              "value": "chicken",
              "word": "chicken"
            },
            "text": "chicken modifies strips",
            "topLevel": true,
            "touchedBy": [
              "call2"
            ],
            "word": "modifies"
          },
          "paraphrases": "chicken modifies strips",
          "responses": [
            ""
          ]
        }
      ]
    },
    "paraphrases": [
      "chicken modifies strips"
    ],
    "responses": [
      ""
    ]
  },
  "chicken modifies strips\\nchicken strips": {
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatable",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "infix"
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "postfix"
          }
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), query: ['what'], determined: true }",
          "id": "what",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: before[0], two: after[0] }",
          "id": "is",
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, ...context }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: 'a', modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, determined: true }",
          "hierarchy": [
            "queryable"
          ],
          "id": "it",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        },
        {
          "allowDups": true,
          "bridge": "{ ...after, chicken: operator, marker: operator(concat('chicken_', after.value)), atomic: true, value: concat('chicken_', after.value), modifiers: append(['chicken'], after[0].modifiers)}",
          "id": "chicken",
          "level": 0
        },
        {
          "allowDups": true,
          "bridge": "{ ...next(operator), value: 'strip' }",
          "id": "strip",
          "level": 0
        },
        {
          "allowDups": true,
          "bridge": "{ ...next(operator), value: 'chicken_strip' }",
          "id": "chicken_strip",
          "level": 0
        }
      ],
      "operators": [
        {
          "allowDups": true,
          "pattern": "([chicken_strip|])"
        },
        {
          "allowDups": true,
          "pattern": "(<chicken|> ([strip|]))"
        },
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|has,have] ([property|]))"
        },
        {
          "pattern": "(<doesnt|doesnt,dont> ([have/0]))"
        },
        {
          "pattern": "(([queryable]) [is|is,are] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|is,are] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([what] ([whatable|])?)"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|does,do> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "chicken": [
          {
            "id": "chicken",
            "initial": "{ value: 'chicken' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "strip": [
          {
            "id": "strip",
            "initial": "{ value: 'strip' }"
          }
        ],
        "strips": [
          {
            "id": "strip",
            "initial": "{ value: 'strip' }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [] }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "concept": {
          "marker": "unknown",
          "text": "strips",
          "unknown": true,
          "value": "strips",
          "word": "strips"
        },
        "default": true,
        "marker": "modifies",
        "modifier": {
          "marker": "unknown",
          "text": "chicken",
          "unknown": true,
          "value": "chicken",
          "word": "chicken"
        },
        "text": "chicken modifies strips",
        "topLevel": true,
        "touchedBy": [
          "call2"
        ],
        "word": "modifies"
      },
      {
        "atomic": true,
        "chicken": {
          "marker": "chicken",
          "text": "chicken",
          "value": "chicken",
          "word": "chicken"
        },
        "marker": "chicken_strip",
        "modifiers": [
          "chicken"
        ],
        "text": "chicken strips",
        "topLevel": true,
        "types": [
          "chicken_strip"
        ],
        "value": "chicken_strip",
        "word": "strips"
      }
    ],
    "metadata": {
      "opChoices": [
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "modifies",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "modifies",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "modifies",
            0
          ],
          "ops": [
            [
              "modifies",
              0
            ]
          ]
        },
        {
          "op": [
            "strip",
            0
          ],
          "ops": [
            [
              "chicken",
              0
            ],
            [
              "strip",
              0
            ]
          ]
        },
        {
          "op": [
            "chicken",
            0
          ],
          "ops": [
            [
              "chicken",
              0
            ]
          ]
        },
        {
          "op": [
            "chicken_strip",
            0
          ],
          "ops": [
            [
              "chicken_strip",
              0
            ]
          ]
        }
      ]
    },
    "objects": {
      "namespaced": {
        "0": {
          "children": {
          },
          "concepts": [
            "properties"
          ],
          "parents": {
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
            }
          },
          "property": {
          },
          "relations": [
          ],
          "valueToWords": {
            "chicken_strip": [
              {
                "chicken": {
                  "marker": "chicken",
                  "value": "chicken",
                  "word": "chicken"
                },
                "marker": "chicken_strip",
                "modifiers": [
                  "chicken"
                ],
                "paraphrase": true,
                "types": [
                  "chicken_strip"
                ],
                "value": "chicken_strip",
                "word": "strip"
              }
            ]
          }
        },
        "1": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "2": {
        }
      },
      "processed": [
        {
          "context": {
            "atomic": true,
            "chicken": {
              "marker": "chicken",
              "text": "chicken",
              "value": "chicken",
              "word": "chicken"
            },
            "marker": "chicken_strip",
            "modifiers": [
              "chicken"
            ],
            "text": "chicken strips",
            "topLevel": true,
            "types": [
              "chicken_strip"
            ],
            "value": "chicken_strip",
            "word": "strips"
          },
          "paraphrases": "chicken strips",
          "responses": [
            ""
          ]
        },
        {
          "context": {
            "concept": {
              "marker": "unknown",
              "text": "strips",
              "unknown": true,
              "value": "strips",
              "word": "strips"
            },
            "default": true,
            "marker": "modifies",
            "modifier": {
              "marker": "unknown",
              "text": "chicken",
              "unknown": true,
              "value": "chicken",
              "word": "chicken"
            },
            "text": "chicken modifies strips",
            "topLevel": true,
            "touchedBy": [
              "call2"
            ],
            "word": "modifies"
          },
          "paraphrases": "chicken modifies strips",
          "responses": [
            ""
          ]
        }
      ]
    },
    "paraphrases": [
      "chicken modifies strips",
      "chicken strips"
    ],
    "responses": [
      "",
      ""
    ]
  },
  "greg doesnt have wings": {
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatable",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "infix"
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "postfix"
          }
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), query: ['what'], determined: true }",
          "id": "what",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: before[0], two: after[0] }",
          "id": "is",
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, ...context }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: 'a', modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, determined: true }",
          "hierarchy": [
            "queryable"
          ],
          "id": "it",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|has,have] ([property|]))"
        },
        {
          "pattern": "(<doesnt|doesnt,dont> ([have/0]))"
        },
        {
          "pattern": "(([queryable]) [is|is,are] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|is,are] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([what] ([whatable|])?)"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|does,do> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [] }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "do": {
          "left": "object",
          "right": "property",
          "text": "greg have wings"
        },
        "doesable": true,
        "is_compound": true,
        "marker": "have",
        "negation": true,
        "object": {
          "marker": "unknown",
          "text": "greg",
          "types": [
            "object",
            "unknown"
          ],
          "unknown": true,
          "value": "greg",
          "word": "greg"
        },
        "property": {
          "marker": "property",
          "text": "wings",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "wings",
          "word": "wings"
        },
        "sameWasProcessed": true,
        "text": "greg have wings",
        "topLevel": true,
        "touchedBy": [
          "call2"
        ],
        "word": "have"
      }
    ],
    "metadata": {
      "opChoices": [
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "doesnt",
              0
            ],
            [
              "have",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "doesnt",
              0
            ],
            [
              "have",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "doesnt",
            0
          ],
          "ops": [
            [
              "doesnt",
              0
            ],
            [
              "have",
              0
            ]
          ]
        },
        {
          "op": [
            "have",
            0
          ],
          "ops": [
            [
              "have",
              0
            ]
          ]
        },
        {
          "op": [
            "have",
            1
          ],
          "ops": [
            [
              "have",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "namespaced": {
        "0": {
          "children": {
          },
          "concepts": [
            "properties",
            "greg"
          ],
          "parents": {
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "greg": {
                "wing": {
                  "has": false,
                  "value": null
                }
              }
            }
          },
          "property": {
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "1": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "2": {
        }
      },
      "processed": [
        {
          "context": {
            "do": {
              "left": "object",
              "right": "property",
              "text": "greg have wings"
            },
            "doesable": true,
            "is_compound": true,
            "marker": "have",
            "negation": true,
            "object": {
              "marker": "unknown",
              "text": "greg",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "property": {
              "marker": "property",
              "text": "wings",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "wings",
              "word": "wings"
            },
            "sameWasProcessed": true,
            "text": "greg have wings",
            "topLevel": true,
            "touchedBy": [
              "call2"
            ],
            "word": "have"
          },
          "paraphrases": "greg doesnt have wings",
          "responses": [
            ""
          ]
        }
      ]
    },
    "paraphrases": [
      "greg doesnt have wings"
    ],
    "responses": [
      ""
    ]
  },
  "greg doesnt have wings does greg have wings": {
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatable",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "infix"
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "postfix"
          }
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), query: ['what'], determined: true }",
          "id": "what",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: before[0], two: after[0] }",
          "id": "is",
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, ...context }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: 'a', modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, determined: true }",
          "hierarchy": [
            "queryable"
          ],
          "id": "it",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|has,have] ([property|]))"
        },
        {
          "pattern": "(<doesnt|doesnt,dont> ([have/0]))"
        },
        {
          "pattern": "(([queryable]) [is|is,are] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|is,are] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([what] ([whatable|])?)"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|does,do> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [] }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "do": {
          "left": "object",
          "right": "property",
          "text": "greg have wings"
        },
        "doesable": true,
        "is_compound": true,
        "marker": "have",
        "negation": true,
        "object": {
          "marker": "unknown",
          "text": "greg",
          "types": [
            "object",
            "unknown"
          ],
          "unknown": true,
          "value": "greg",
          "word": "greg"
        },
        "property": {
          "marker": "property",
          "text": "wings",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "wings",
          "word": "wings"
        },
        "sameWasProcessed": true,
        "text": "greg have wings",
        "topLevel": true,
        "touchedBy": [
          "call2"
        ],
        "word": "have"
      },
      {
        "do": {
          "left": "object",
          "right": "property",
          "text": "greg have wings"
        },
        "doesable": true,
        "is_compound": true,
        "marker": "have",
        "object": {
          "marker": "unknown",
          "text": "greg",
          "types": [
            "object",
            "unknown"
          ],
          "unknown": true,
          "value": "greg",
          "word": "greg"
        },
        "property": {
          "marker": "property",
          "text": "wings",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "wings",
          "word": "wings"
        },
        "query": true,
        "response": {
          "marker": "yesno",
          "value": false
        },
        "text": "greg have wings",
        "topLevel": true,
        "touchedBy": [
          "call10"
        ],
        "word": "have"
      }
    ],
    "metadata": {
      "opChoices": [
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "does",
              0
            ],
            [
              "doesnt",
              0
            ],
            [
              "have",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "does",
              0
            ],
            [
              "doesnt",
              0
            ],
            [
              "have",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "does",
              0
            ],
            [
              "doesnt",
              0
            ],
            [
              "have",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "does",
              0
            ],
            [
              "doesnt",
              0
            ],
            [
              "have",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "doesnt",
            0
          ],
          "ops": [
            [
              "does",
              0
            ],
            [
              "doesnt",
              0
            ],
            [
              "have",
              0
            ]
          ]
        },
        {
          "op": [
            "have",
            0
          ],
          "ops": [
            [
              "does",
              0
            ],
            [
              "have",
              0
            ]
          ]
        },
        {
          "op": [
            "have",
            0
          ],
          "ops": [
            [
              "does",
              0
            ],
            [
              "have",
              0
            ],
            [
              "have",
              1
            ]
          ]
        },
        {
          "op": [
            "does",
            0
          ],
          "ops": [
            [
              "does",
              0
            ],
            [
              "have",
              1
            ]
          ]
        },
        {
          "op": [
            "have",
            1
          ],
          "ops": [
            [
              "have",
              1
            ]
          ]
        },
        {
          "op": [
            "have",
            1
          ],
          "ops": [
            [
              "have",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "namespaced": {
        "0": {
          "children": {
          },
          "concepts": [
            "properties",
            "greg"
          ],
          "parents": {
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "greg": {
                "wing": {
                  "has": false,
                  "value": null
                }
              }
            }
          },
          "property": {
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "1": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "2": {
        }
      },
      "processed": [
        {
          "context": {
            "do": {
              "left": "object",
              "right": "property",
              "text": "greg have wings"
            },
            "doesable": true,
            "is_compound": true,
            "marker": "have",
            "object": {
              "marker": "unknown",
              "text": "greg",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "property": {
              "marker": "property",
              "text": "wings",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "wings",
              "word": "wings"
            },
            "query": true,
            "response": {
              "marker": "yesno",
              "value": false
            },
            "text": "greg have wings",
            "topLevel": true,
            "touchedBy": [
              "call10"
            ],
            "word": "have"
          },
          "paraphrases": "does greg have wings?",
          "responses": [
            "",
            "no"
          ]
        },
        {
          "context": {
            "do": {
              "left": "object",
              "right": "property",
              "text": "greg have wings"
            },
            "doesable": true,
            "is_compound": true,
            "marker": "have",
            "negation": true,
            "object": {
              "marker": "unknown",
              "text": "greg",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "property": {
              "marker": "property",
              "text": "wings",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "wings",
              "word": "wings"
            },
            "sameWasProcessed": true,
            "text": "greg have wings",
            "topLevel": true,
            "touchedBy": [
              "call2"
            ],
            "word": "have"
          },
          "paraphrases": "greg doesnt have wings",
          "responses": [
            "",
            "no"
          ]
        }
      ]
    },
    "paraphrases": [
      "greg doesnt have wings",
      "does greg have wings?"
    ],
    "responses": [
      "",
      "no"
    ]
  },
  "greg has eyes": {
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatable",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "infix"
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "postfix"
          }
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), query: ['what'], determined: true }",
          "id": "what",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: before[0], two: after[0] }",
          "id": "is",
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, ...context }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: 'a', modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, determined: true }",
          "hierarchy": [
            "queryable"
          ],
          "id": "it",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|has,have] ([property|]))"
        },
        {
          "pattern": "(<doesnt|doesnt,dont> ([have/0]))"
        },
        {
          "pattern": "(([queryable]) [is|is,are] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|is,are] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([what] ([whatable|])?)"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|does,do> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [] }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "default": true,
        "do": {
          "left": "object",
          "right": "property",
          "text": "greg has eyes"
        },
        "marker": "have",
        "object": {
          "marker": "unknown",
          "text": "greg",
          "types": [
            "object",
            "unknown"
          ],
          "unknown": true,
          "value": "greg",
          "word": "greg"
        },
        "property": {
          "marker": "property",
          "text": "eyes",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "eyes",
          "word": "eyes"
        },
        "sameWasProcessed": true,
        "text": "greg has eyes",
        "topLevel": true,
        "touchedBy": [
          "call2"
        ],
        "word": "has"
      }
    ],
    "metadata": {
      "opChoices": [
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "have",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "have",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "have",
            0
          ],
          "ops": [
            [
              "have",
              0
            ]
          ]
        },
        {
          "op": [
            "have",
            1
          ],
          "ops": [
            [
              "have",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "namespaced": {
        "0": {
          "children": {
          },
          "concepts": [
            "properties",
            "greg"
          ],
          "parents": {
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "greg": {
                "eye": {
                  "has": true,
                  "value": null
                }
              }
            }
          },
          "property": {
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "1": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "2": {
        }
      },
      "processed": [
        {
          "context": {
            "default": true,
            "do": {
              "left": "object",
              "right": "property",
              "text": "greg has eyes"
            },
            "marker": "have",
            "object": {
              "marker": "unknown",
              "text": "greg",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "property": {
              "marker": "property",
              "text": "eyes",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "eyes",
              "word": "eyes"
            },
            "sameWasProcessed": true,
            "text": "greg has eyes",
            "topLevel": true,
            "touchedBy": [
              "call2"
            ],
            "word": "has"
          },
          "paraphrases": "greg has eyes",
          "responses": [
            ""
          ]
        }
      ]
    },
    "paraphrases": [
      "greg has eyes"
    ],
    "responses": [
      ""
    ]
  },
  "greg has eyes greg has eyes?": {
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatable",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "infix"
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "postfix"
          }
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), query: ['what'], determined: true }",
          "id": "what",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: before[0], two: after[0] }",
          "id": "is",
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, ...context }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: 'a', modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, determined: true }",
          "hierarchy": [
            "queryable"
          ],
          "id": "it",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|has,have] ([property|]))"
        },
        {
          "pattern": "(<doesnt|doesnt,dont> ([have/0]))"
        },
        {
          "pattern": "(([queryable]) [is|is,are] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|is,are] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([what] ([whatable|])?)"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|does,do> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [] }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "default": true,
        "do": {
          "left": "object",
          "right": "property",
          "text": "greg has eyes"
        },
        "marker": "have",
        "object": {
          "marker": "unknown",
          "text": "greg",
          "types": [
            "object",
            "unknown"
          ],
          "unknown": true,
          "value": "greg",
          "word": "greg"
        },
        "property": {
          "marker": "property",
          "text": "eyes",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "eyes",
          "word": "eyes"
        },
        "sameWasProcessed": true,
        "text": "greg has eyes",
        "topLevel": true,
        "touchedBy": [
          "call2"
        ],
        "word": "has"
      },
      {
        "default": true,
        "do": {
          "left": "object",
          "right": "property",
          "text": "greg has eyes"
        },
        "marker": "have",
        "object": {
          "marker": "unknown",
          "text": "greg",
          "types": [
            "object",
            "unknown"
          ],
          "unknown": true,
          "value": "greg",
          "word": "greg"
        },
        "property": {
          "marker": "property",
          "text": "eyes",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "eyes",
          "word": "eyes"
        },
        "query": [
          "have"
        ],
        "response": {
          "marker": "yesno",
          "value": true
        },
        "text": "greg has eyes ?",
        "topLevel": true,
        "touchedBy": [
          "call10"
        ],
        "word": "has"
      }
    ],
    "metadata": {
      "opChoices": [
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "have",
              0
            ],
            [
              "questionMark",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "have",
              0
            ],
            [
              "questionMark",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "have",
              0
            ],
            [
              "questionMark",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "have",
              0
            ],
            [
              "questionMark",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "have",
            0
          ],
          "ops": [
            [
              "have",
              0
            ],
            [
              "questionMark",
              0
            ]
          ]
        },
        {
          "op": [
            "have",
            0
          ],
          "ops": [
            [
              "have",
              0
            ],
            [
              "have",
              1
            ],
            [
              "questionMark",
              0
            ]
          ]
        },
        {
          "op": [
            "have",
            1
          ],
          "ops": [
            [
              "have",
              1
            ],
            [
              "questionMark",
              0
            ]
          ]
        },
        {
          "op": [
            "have",
            1
          ],
          "ops": [
            [
              "have",
              1
            ],
            [
              "questionMark",
              0
            ]
          ]
        },
        {
          "op": [
            "questionMark",
            0
          ],
          "ops": [
            [
              "questionMark",
              0
            ]
          ]
        }
      ]
    },
    "objects": {
      "namespaced": {
        "0": {
          "children": {
          },
          "concepts": [
            "properties",
            "greg"
          ],
          "parents": {
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "greg": {
                "eye": {
                  "has": true,
                  "value": null
                }
              }
            }
          },
          "property": {
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "1": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "2": {
        }
      },
      "processed": [
        {
          "context": {
            "default": true,
            "do": {
              "left": "object",
              "right": "property",
              "text": "greg has eyes"
            },
            "marker": "have",
            "object": {
              "marker": "unknown",
              "text": "greg",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "property": {
              "marker": "property",
              "text": "eyes",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "eyes",
              "word": "eyes"
            },
            "query": [
              "have"
            ],
            "response": {
              "marker": "yesno",
              "value": true
            },
            "text": "greg has eyes ?",
            "topLevel": true,
            "touchedBy": [
              "call10"
            ],
            "word": "has"
          },
          "paraphrases": "does greg have eyes?",
          "responses": [
            "",
            "yes"
          ]
        },
        {
          "context": {
            "default": true,
            "do": {
              "left": "object",
              "right": "property",
              "text": "greg has eyes"
            },
            "marker": "have",
            "object": {
              "marker": "unknown",
              "text": "greg",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "property": {
              "marker": "property",
              "text": "eyes",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "eyes",
              "word": "eyes"
            },
            "sameWasProcessed": true,
            "text": "greg has eyes",
            "topLevel": true,
            "touchedBy": [
              "call2"
            ],
            "word": "has"
          },
          "paraphrases": "greg has eyes",
          "responses": [
            "",
            "yes"
          ]
        }
      ]
    },
    "paraphrases": [
      "greg has eyes",
      "does greg have eyes?"
    ],
    "responses": [
      "",
      "yes"
    ]
  },
  "greg has eyes?": {
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatable",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "infix"
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "postfix"
          }
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), query: ['what'], determined: true }",
          "id": "what",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: before[0], two: after[0] }",
          "id": "is",
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, ...context }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: 'a', modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, determined: true }",
          "hierarchy": [
            "queryable"
          ],
          "id": "it",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|has,have] ([property|]))"
        },
        {
          "pattern": "(<doesnt|doesnt,dont> ([have/0]))"
        },
        {
          "pattern": "(([queryable]) [is|is,are] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|is,are] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([what] ([whatable|])?)"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|does,do> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [] }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "default": true,
        "do": {
          "left": "object",
          "right": "property",
          "text": "greg has eyes"
        },
        "marker": "have",
        "object": {
          "marker": "unknown",
          "text": "greg",
          "types": [
            "object",
            "unknown"
          ],
          "unknown": true,
          "value": "greg",
          "word": "greg"
        },
        "property": {
          "marker": "property",
          "text": "eyes",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "eyes",
          "word": "eyes"
        },
        "query": [
          "have"
        ],
        "response": true,
        "text": "greg has eyes ?",
        "topLevel": true,
        "touchedBy": [
          "call2"
        ],
        "verbatim": "There is no object named greg",
        "word": "has"
      }
    ],
    "metadata": {
      "opChoices": [
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "have",
              0
            ],
            [
              "questionMark",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "have",
              0
            ],
            [
              "questionMark",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "have",
            0
          ],
          "ops": [
            [
              "have",
              0
            ],
            [
              "questionMark",
              0
            ]
          ]
        },
        {
          "op": [
            "have",
            1
          ],
          "ops": [
            [
              "have",
              1
            ],
            [
              "questionMark",
              0
            ]
          ]
        },
        {
          "op": [
            "questionMark",
            0
          ],
          "ops": [
            [
              "questionMark",
              0
            ]
          ]
        }
      ]
    },
    "objects": {
      "namespaced": {
        "0": {
          "children": {
          },
          "concepts": [
            "properties"
          ],
          "parents": {
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
            }
          },
          "property": {
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "1": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "2": {
        }
      },
      "processed": [
        {
          "context": {
            "default": true,
            "do": {
              "left": "object",
              "right": "property",
              "text": "greg has eyes"
            },
            "marker": "have",
            "object": {
              "marker": "unknown",
              "text": "greg",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "property": {
              "marker": "property",
              "text": "eyes",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "eyes",
              "word": "eyes"
            },
            "query": [
              "have"
            ],
            "response": true,
            "text": "greg has eyes ?",
            "topLevel": true,
            "touchedBy": [
              "call2"
            ],
            "verbatim": "There is no object named greg",
            "word": "has"
          },
          "paraphrases": "does greg have eyes?",
          "responses": [
            "There is no object named greg"
          ]
        }
      ]
    },
    "paraphrases": [
      "does greg have eyes?"
    ],
    "responses": [
      "There is no object named greg"
    ]
  },
  "greg has toes greg has eyes?": {
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatable",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "infix"
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "postfix"
          }
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), query: ['what'], determined: true }",
          "id": "what",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: before[0], two: after[0] }",
          "id": "is",
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, ...context }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: 'a', modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, determined: true }",
          "hierarchy": [
            "queryable"
          ],
          "id": "it",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|has,have] ([property|]))"
        },
        {
          "pattern": "(<doesnt|doesnt,dont> ([have/0]))"
        },
        {
          "pattern": "(([queryable]) [is|is,are] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|is,are] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([what] ([whatable|])?)"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|does,do> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [] }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "default": true,
        "do": {
          "left": "object",
          "right": "property",
          "text": "greg has toes"
        },
        "marker": "have",
        "object": {
          "marker": "unknown",
          "text": "greg",
          "types": [
            "object",
            "unknown"
          ],
          "unknown": true,
          "value": "greg",
          "word": "greg"
        },
        "property": {
          "marker": "property",
          "text": "toes",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "toes",
          "word": "toes"
        },
        "sameWasProcessed": true,
        "text": "greg has toes",
        "topLevel": true,
        "touchedBy": [
          "call2"
        ],
        "word": "has"
      },
      {
        "default": true,
        "do": {
          "left": "object",
          "right": "property",
          "text": "greg has eyes"
        },
        "marker": "have",
        "object": {
          "marker": "unknown",
          "text": "greg",
          "types": [
            "object",
            "unknown"
          ],
          "unknown": true,
          "value": "greg",
          "word": "greg"
        },
        "property": {
          "marker": "property",
          "text": "eyes",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "eyes",
          "word": "eyes"
        },
        "query": [
          "have"
        ],
        "response": {
          "marker": "yesno",
          "value": false
        },
        "text": "greg has eyes ?",
        "topLevel": true,
        "touchedBy": [
          "call10"
        ],
        "word": "has"
      }
    ],
    "metadata": {
      "opChoices": [
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "have",
              0
            ],
            [
              "questionMark",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "have",
              0
            ],
            [
              "questionMark",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "have",
              0
            ],
            [
              "questionMark",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "have",
              0
            ],
            [
              "questionMark",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "have",
            0
          ],
          "ops": [
            [
              "have",
              0
            ],
            [
              "questionMark",
              0
            ]
          ]
        },
        {
          "op": [
            "have",
            0
          ],
          "ops": [
            [
              "have",
              0
            ],
            [
              "have",
              1
            ],
            [
              "questionMark",
              0
            ]
          ]
        },
        {
          "op": [
            "have",
            1
          ],
          "ops": [
            [
              "have",
              1
            ],
            [
              "questionMark",
              0
            ]
          ]
        },
        {
          "op": [
            "have",
            1
          ],
          "ops": [
            [
              "have",
              1
            ],
            [
              "questionMark",
              0
            ]
          ]
        },
        {
          "op": [
            "questionMark",
            0
          ],
          "ops": [
            [
              "questionMark",
              0
            ]
          ]
        }
      ]
    },
    "objects": {
      "namespaced": {
        "0": {
          "children": {
          },
          "concepts": [
            "properties",
            "greg"
          ],
          "parents": {
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "greg": {
                "toe": {
                  "has": true,
                  "value": null
                }
              }
            }
          },
          "property": {
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "1": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "2": {
        }
      },
      "processed": [
        {
          "context": {
            "default": true,
            "do": {
              "left": "object",
              "right": "property",
              "text": "greg has eyes"
            },
            "marker": "have",
            "object": {
              "marker": "unknown",
              "text": "greg",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "property": {
              "marker": "property",
              "text": "eyes",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "eyes",
              "word": "eyes"
            },
            "query": [
              "have"
            ],
            "response": {
              "marker": "yesno",
              "value": false
            },
            "text": "greg has eyes ?",
            "topLevel": true,
            "touchedBy": [
              "call10"
            ],
            "word": "has"
          },
          "paraphrases": "does greg have eyes?",
          "responses": [
            "",
            "no"
          ]
        },
        {
          "context": {
            "default": true,
            "do": {
              "left": "object",
              "right": "property",
              "text": "greg has toes"
            },
            "marker": "have",
            "object": {
              "marker": "unknown",
              "text": "greg",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "property": {
              "marker": "property",
              "text": "toes",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "toes",
              "word": "toes"
            },
            "sameWasProcessed": true,
            "text": "greg has toes",
            "topLevel": true,
            "touchedBy": [
              "call2"
            ],
            "word": "has"
          },
          "paraphrases": "greg has toes",
          "responses": [
            "",
            "no"
          ]
        }
      ]
    },
    "paraphrases": [
      "greg has toes",
      "does greg have eyes?"
    ],
    "responses": [
      "",
      "no"
    ]
  },
  "greg's car's bumper": {
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatable",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "infix"
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "postfix"
          }
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), query: ['what'], determined: true }",
          "id": "what",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: before[0], two: after[0] }",
          "id": "is",
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, ...context }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: 'a', modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, determined: true }",
          "hierarchy": [
            "queryable"
          ],
          "id": "it",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|has,have] ([property|]))"
        },
        {
          "pattern": "(<doesnt|doesnt,dont> ([have/0]))"
        },
        {
          "pattern": "(([queryable]) [is|is,are] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|is,are] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([what] ([whatable|])?)"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|does,do> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [] }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "marker": "property",
        "object": {
          "marker": "unknown",
          "text": "greg",
          "types": [
            "object",
            "unknown"
          ],
          "unknown": true,
          "value": "greg",
          "word": "greg"
        },
        "objects": [
          {
            "marker": "property",
            "text": "bumper",
            "types": [
              "property"
            ],
            "unknown": true,
            "value": "bumper",
            "word": "bumper"
          },
          {
            "marker": "unknown",
            "text": "car",
            "types": [
              "object",
              "unknown"
            ],
            "unknown": true,
            "value": "car",
            "word": "car"
          },
          {
            "marker": "unknown",
            "text": "greg",
            "types": [
              "object",
              "unknown"
            ],
            "unknown": true,
            "value": "greg",
            "word": "greg"
          }
        ],
        "text": "greg 's car 's bumper",
        "topLevel": true,
        "types": [
          "property"
        ],
        "unknown": true,
        "value": "bumper",
        "word": "bumper"
      }
    ],
    "metadata": {
      "opChoices": [
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "possession",
            0
          ],
          "ops": [
            [
              "possession",
              0
            ]
          ]
        },
        {
          "op": [
            "possession",
            0
          ],
          "ops": [
            [
              "possession",
              0
            ],
            [
              "possession",
              1
            ]
          ]
        },
        {
          "op": [
            "possession",
            1
          ],
          "ops": [
            [
              "possession",
              1
            ]
          ]
        },
        {
          "op": [
            "property",
            0
          ],
          "ops": [
            [
              "possession",
              1
            ],
            [
              "property",
              0
            ]
          ]
        },
        {
          "op": [
            "possession",
            1
          ],
          "ops": [
            [
              "possession",
              1
            ]
          ]
        },
        {
          "op": [
            "property",
            0
          ],
          "ops": [
            [
              "property",
              0
            ]
          ]
        }
      ]
    },
    "objects": {
      "namespaced": {
        "0": {
          "children": {
          },
          "concepts": [
            "properties"
          ],
          "parents": {
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
            }
          },
          "property": {
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "1": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "2": {
        }
      },
      "processed": [
        {
          "context": {
            "marker": "property",
            "object": {
              "marker": "unknown",
              "text": "greg",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "objects": [
              {
                "marker": "property",
                "text": "bumper",
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": "bumper",
                "word": "bumper"
              },
              {
                "marker": "unknown",
                "text": "car",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "car",
                "word": "car"
              },
              {
                "marker": "unknown",
                "text": "greg",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              }
            ],
            "text": "greg 's car 's bumper",
            "topLevel": true,
            "types": [
              "property"
            ],
            "unknown": true,
            "value": "bumper",
            "word": "bumper"
          },
          "paraphrases": "greg's car's bumper",
          "responses": [
            ""
          ]
        }
      ]
    },
    "paraphrases": [
      "greg's car's bumper"
    ],
    "responses": [
      ""
    ]
  },
  "hana's sister is kia": {
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatable",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "infix"
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "postfix"
          }
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), query: ['what'], determined: true }",
          "id": "what",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: before[0], two: after[0] }",
          "id": "is",
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, ...context }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: 'a', modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, determined: true }",
          "hierarchy": [
            "queryable"
          ],
          "id": "it",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|has,have] ([property|]))"
        },
        {
          "pattern": "(<doesnt|doesnt,dont> ([have/0]))"
        },
        {
          "pattern": "(([queryable]) [is|is,are] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|is,are] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([what] ([whatable|])?)"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|does,do> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [] }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "default": true,
        "marker": "is",
        "one": {
          "marker": "property",
          "object": {
            "marker": "unknown",
            "text": "hana",
            "types": [
              "object",
              "unknown"
            ],
            "unknown": true,
            "value": "hana",
            "word": "hana"
          },
          "objects": [
            {
              "marker": "property",
              "text": "sister",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "sister",
              "word": "sister"
            },
            {
              "marker": "unknown",
              "text": "hana",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "hana",
              "word": "hana"
            }
          ],
          "response": true,
          "text": "hana 's sister",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "sister",
          "word": "sister"
        },
        "text": "hana 's sister is kia",
        "topLevel": true,
        "touchedBy": [
          "call2"
        ],
        "two": {
          "marker": "unknown",
          "response": true,
          "text": "kia",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "kia",
          "word": "kia"
        },
        "word": "is"
      }
    ],
    "metadata": {
      "opChoices": [
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "possession",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ]
          ]
        },
        {
          "op": [
            "possession",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              1
            ]
          ]
        },
        {
          "op": [
            "property",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "property",
              0
            ]
          ]
        },
        {
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ]
          ]
        },
        {
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "namespaced": {
        "0": {
          "children": {
            "sister": [
              "kia"
            ]
          },
          "concepts": [
            "properties",
            "kia",
            "sister",
            "hana"
          ],
          "parents": {
            "kia": [
              "sister"
            ]
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "hana": {
                "sister": {
                  "has": true,
                  "value": {
                    "marker": "unknown",
                    "response": true,
                    "text": "kia",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "kia",
                    "word": "kia"
                  }
                }
              },
              "kia": {
              },
              "sister": {
              }
            }
          },
          "property": {
            "sister": [
              {
                "marker": "unknown",
                "response": true,
                "text": "kia",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "kia",
                "word": "kia"
              }
            ]
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "1": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "2": {
        }
      },
      "processed": [
        {
          "context": {
            "default": true,
            "marker": "is",
            "one": {
              "marker": "property",
              "object": {
                "marker": "unknown",
                "text": "hana",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "hana",
                "word": "hana"
              },
              "objects": [
                {
                  "marker": "property",
                  "text": "sister",
                  "types": [
                    "property"
                  ],
                  "unknown": true,
                  "value": "sister",
                  "word": "sister"
                },
                {
                  "marker": "unknown",
                  "text": "hana",
                  "types": [
                    "object",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "hana",
                  "word": "hana"
                }
              ],
              "response": true,
              "text": "hana 's sister",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "sister",
              "word": "sister"
            },
            "text": "hana 's sister is kia",
            "topLevel": true,
            "touchedBy": [
              "call2"
            ],
            "two": {
              "marker": "unknown",
              "response": true,
              "text": "kia",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "kia",
              "word": "kia"
            },
            "word": "is"
          },
          "paraphrases": "hana's sister is kia",
          "responses": [
            ""
          ]
        }
      ]
    },
    "paraphrases": [
      "hana's sister is kia"
    ],
    "responses": [
      ""
    ]
  },
  "hana's sister is kia kia's cat is cleo\\nwho is hana's sister's cat": {
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatable",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "infix"
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "postfix"
          }
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), query: ['what'], determined: true }",
          "id": "what",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: before[0], two: after[0] }",
          "id": "is",
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, ...context }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: 'a', modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, determined: true }",
          "hierarchy": [
            "queryable"
          ],
          "id": "it",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|has,have] ([property|]))"
        },
        {
          "pattern": "(<doesnt|doesnt,dont> ([have/0]))"
        },
        {
          "pattern": "(([queryable]) [is|is,are] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|is,are] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([what] ([whatable|])?)"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|does,do> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [] }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "default": true,
        "marker": "is",
        "one": {
          "marker": "property",
          "object": {
            "marker": "unknown",
            "text": "hana",
            "types": [
              "object",
              "unknown"
            ],
            "unknown": true,
            "value": "hana",
            "word": "hana"
          },
          "objects": [
            {
              "marker": "property",
              "text": "sister",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "sister",
              "word": "sister"
            },
            {
              "marker": "unknown",
              "text": "hana",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "hana",
              "word": "hana"
            }
          ],
          "response": true,
          "text": "hana 's sister",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "sister",
          "word": "sister"
        },
        "text": "hana 's sister is kia",
        "topLevel": true,
        "touchedBy": [
          "call2"
        ],
        "two": {
          "marker": "unknown",
          "response": true,
          "text": "kia",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "kia",
          "word": "kia"
        },
        "word": "is"
      },
      {
        "default": true,
        "marker": "is",
        "one": {
          "marker": "property",
          "object": {
            "marker": "unknown",
            "text": "kia",
            "types": [
              "object",
              "unknown"
            ],
            "unknown": true,
            "value": "kia",
            "word": "kia"
          },
          "objects": [
            {
              "marker": "property",
              "text": "cat",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "cat",
              "word": "cat"
            },
            {
              "marker": "unknown",
              "text": "kia",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "kia",
              "word": "kia"
            }
          ],
          "response": true,
          "text": "kia 's cat",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "cat",
          "word": "cat"
        },
        "text": "kia 's cat is cleo",
        "topLevel": true,
        "touchedBy": [
          "call18"
        ],
        "two": {
          "marker": "unknown",
          "response": true,
          "text": "cleo",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "cleo",
          "word": "cleo"
        },
        "word": "is"
      },
      {
        "default": true,
        "marker": "is",
        "one": {
          "determined": true,
          "marker": "what",
          "modifiers": [
          ],
          "query": [
            "what"
          ],
          "response": true,
          "text": "who",
          "types": [
            "what"
          ],
          "word": "who"
        },
        "query": [
          "what"
        ],
        "response": {
          "default": true,
          "focusable": [
            "two",
            "one"
          ],
          "marker": "is",
          "one": {
            "evaluate": true,
            "marker": "property",
            "object": {
              "marker": "unknown",
              "text": "hana",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "hana",
              "word": "hana"
            },
            "objects": [
              {
                "marker": "property",
                "text": "cat",
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": "cat",
                "word": "cat"
              },
              {
                "marker": "unknown",
                "text": "sister",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "sister",
                "word": "sister"
              },
              {
                "marker": "unknown",
                "text": "hana",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "hana",
                "word": "hana"
              }
            ],
            "text": "hana 's sister 's cat",
            "types": [
              "property"
            ],
            "unknown": true,
            "value": "cat",
            "word": "cat"
          },
          "two": {
            "evaluateWasProcessed": true,
            "focus": true,
            "focusable": [
              "object[0]"
            ],
            "instance": true,
            "marker": "property",
            "objects": [
              {
                "marker": "property",
                "text": "cat",
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": "cat",
                "word": "cat"
              },
              {
                "marker": "unknown",
                "text": "sister",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "sister",
                "word": "sister"
              },
              {
                "marker": "unknown",
                "text": "hana",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "hana",
                "word": "hana"
              }
            ],
            "text": "hana 's sister 's cat",
            "touchedBy": [
              "call3"
            ],
            "types": [
              "property"
            ],
            "unknown": true,
            "value": {
              "marker": "unknown",
              "response": true,
              "text": "cleo",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "cleo",
              "word": "cleo"
            },
            "word": "cat"
          },
          "word": "is"
        },
        "text": "who is hana 's sister 's cat",
        "topLevel": true,
        "touchedBy": [
          "call2"
        ],
        "two": {
          "marker": "property",
          "object": {
            "marker": "unknown",
            "text": "hana",
            "types": [
              "object",
              "unknown"
            ],
            "unknown": true,
            "value": "hana",
            "word": "hana"
          },
          "objects": [
            {
              "marker": "property",
              "text": "cat",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "cat",
              "word": "cat"
            },
            {
              "marker": "unknown",
              "text": "sister",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "sister",
              "word": "sister"
            },
            {
              "marker": "unknown",
              "text": "hana",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "hana",
              "word": "hana"
            }
          ],
          "response": true,
          "text": "hana 's sister 's cat",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "cat",
          "word": "cat"
        },
        "word": "is"
      }
    ],
    "metadata": {
      "opChoices": [
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "possession",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ]
          ]
        },
        {
          "op": [
            "possession",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "possession",
              1
            ]
          ]
        },
        {
          "op": [
            "possession",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              1
            ]
          ]
        },
        {
          "op": [
            "property",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              1
            ],
            [
              "property",
              0
            ]
          ]
        },
        {
          "op": [
            "possession",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              1
            ]
          ]
        },
        {
          "op": [
            "property",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "property",
              0
            ]
          ]
        },
        {
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ]
          ]
        },
        {
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "is",
              1
            ]
          ]
        },
        {
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        },
        {
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "what",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "possession",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ]
          ]
        },
        {
          "op": [
            "possession",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "possession",
              1
            ]
          ]
        },
        {
          "op": [
            "possession",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              1
            ]
          ]
        },
        {
          "op": [
            "property",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              1
            ],
            [
              "property",
              0
            ]
          ]
        },
        {
          "op": [
            "possession",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              1
            ]
          ]
        },
        {
          "op": [
            "property",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "property",
              0
            ]
          ]
        },
        {
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ]
          ]
        },
        {
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "namespaced": {
        "0": {
          "children": {
            "cat": [
              "cleo"
            ],
            "sister": [
              "kia"
            ]
          },
          "concepts": [
            "properties",
            "kia",
            "sister",
            "hana",
            "cleo",
            "cat"
          ],
          "parents": {
            "cleo": [
              "cat"
            ],
            "kia": [
              "sister"
            ]
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "cat": {
              },
              "cleo": {
              },
              "hana": {
                "sister": {
                  "has": true,
                  "value": {
                    "marker": "unknown",
                    "response": true,
                    "text": "kia",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "kia",
                    "word": "kia"
                  }
                }
              },
              "kia": {
                "cat": {
                  "has": true,
                  "value": {
                    "marker": "unknown",
                    "response": true,
                    "text": "cleo",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "cleo",
                    "word": "cleo"
                  }
                }
              },
              "sister": {
              }
            }
          },
          "property": {
            "cat": [
              {
                "marker": "unknown",
                "response": true,
                "text": "cleo",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "cleo",
                "word": "cleo"
              }
            ],
            "sister": [
              {
                "marker": "unknown",
                "response": true,
                "text": "kia",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "kia",
                "word": "kia"
              }
            ]
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "1": {
          "mentioned": [
            {
              "determined": true,
              "marker": "what",
              "modifiers": [
              ],
              "query": [
                "what"
              ],
              "response": true,
              "text": "who",
              "types": [
                "what"
              ],
              "word": "who"
            }
          ],
          "variables": {
          }
        },
        "2": {
        }
      },
      "processed": [
        {
          "context": {
            "default": true,
            "marker": "is",
            "one": {
              "determined": true,
              "marker": "what",
              "modifiers": [
              ],
              "query": [
                "what"
              ],
              "response": true,
              "text": "who",
              "types": [
                "what"
              ],
              "word": "who"
            },
            "query": [
              "what"
            ],
            "response": {
              "default": true,
              "focusable": [
                "two",
                "one"
              ],
              "marker": "is",
              "one": {
                "evaluate": true,
                "marker": "property",
                "object": {
                  "marker": "unknown",
                  "text": "hana",
                  "types": [
                    "object",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "hana",
                  "word": "hana"
                },
                "objects": [
                  {
                    "marker": "property",
                    "text": "cat",
                    "types": [
                      "property"
                    ],
                    "unknown": true,
                    "value": "cat",
                    "word": "cat"
                  },
                  {
                    "marker": "unknown",
                    "text": "sister",
                    "types": [
                      "object",
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "sister",
                    "word": "sister"
                  },
                  {
                    "marker": "unknown",
                    "text": "hana",
                    "types": [
                      "object",
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "hana",
                    "word": "hana"
                  }
                ],
                "text": "hana 's sister 's cat",
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": "cat",
                "word": "cat"
              },
              "two": {
                "evaluateWasProcessed": true,
                "focus": true,
                "focusable": [
                  "object[0]"
                ],
                "instance": true,
                "marker": "property",
                "objects": [
                  {
                    "marker": "property",
                    "text": "cat",
                    "types": [
                      "property"
                    ],
                    "unknown": true,
                    "value": "cat",
                    "word": "cat"
                  },
                  {
                    "marker": "unknown",
                    "text": "sister",
                    "types": [
                      "object",
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "sister",
                    "word": "sister"
                  },
                  {
                    "marker": "unknown",
                    "text": "hana",
                    "types": [
                      "object",
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "hana",
                    "word": "hana"
                  }
                ],
                "text": "hana 's sister 's cat",
                "touchedBy": [
                  "call3"
                ],
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": {
                  "marker": "unknown",
                  "response": true,
                  "text": "cleo",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "cleo",
                  "word": "cleo"
                },
                "word": "cat"
              },
              "word": "is"
            },
            "text": "who is hana 's sister 's cat",
            "topLevel": true,
            "touchedBy": [
              "call2"
            ],
            "two": {
              "marker": "property",
              "object": {
                "marker": "unknown",
                "text": "hana",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "hana",
                "word": "hana"
              },
              "objects": [
                {
                  "marker": "property",
                  "text": "cat",
                  "types": [
                    "property"
                  ],
                  "unknown": true,
                  "value": "cat",
                  "word": "cat"
                },
                {
                  "marker": "unknown",
                  "text": "sister",
                  "types": [
                    "object",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "sister",
                  "word": "sister"
                },
                {
                  "marker": "unknown",
                  "text": "hana",
                  "types": [
                    "object",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "hana",
                  "word": "hana"
                }
              ],
              "response": true,
              "text": "hana 's sister 's cat",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "cat",
              "word": "cat"
            },
            "word": "is"
          },
          "paraphrases": "who is hana's sister's cat?",
          "responses": [
            "hana's sister's cat is cleo"
          ]
        },
        {
          "context": {
            "default": true,
            "marker": "is",
            "one": {
              "marker": "property",
              "object": {
                "marker": "unknown",
                "text": "kia",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "kia",
                "word": "kia"
              },
              "objects": [
                {
                  "marker": "property",
                  "text": "cat",
                  "types": [
                    "property"
                  ],
                  "unknown": true,
                  "value": "cat",
                  "word": "cat"
                },
                {
                  "marker": "unknown",
                  "text": "kia",
                  "types": [
                    "object",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "kia",
                  "word": "kia"
                }
              ],
              "response": true,
              "text": "kia 's cat",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "cat",
              "word": "cat"
            },
            "text": "kia 's cat is cleo",
            "topLevel": true,
            "touchedBy": [
              "call18"
            ],
            "two": {
              "marker": "unknown",
              "response": true,
              "text": "cleo",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "cleo",
              "word": "cleo"
            },
            "word": "is"
          },
          "paraphrases": "kia's cat is cleo",
          "responses": [
            "",
            ""
          ]
        },
        {
          "context": {
            "default": true,
            "marker": "is",
            "one": {
              "marker": "property",
              "object": {
                "marker": "unknown",
                "text": "hana",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "hana",
                "word": "hana"
              },
              "objects": [
                {
                  "marker": "property",
                  "text": "sister",
                  "types": [
                    "property"
                  ],
                  "unknown": true,
                  "value": "sister",
                  "word": "sister"
                },
                {
                  "marker": "unknown",
                  "text": "hana",
                  "types": [
                    "object",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "hana",
                  "word": "hana"
                }
              ],
              "response": true,
              "text": "hana 's sister",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "sister",
              "word": "sister"
            },
            "text": "hana 's sister is kia",
            "topLevel": true,
            "touchedBy": [
              "call2"
            ],
            "two": {
              "marker": "unknown",
              "response": true,
              "text": "kia",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "kia",
              "word": "kia"
            },
            "word": "is"
          },
          "paraphrases": "hana's sister is kia",
          "responses": [
            "",
            ""
          ]
        }
      ]
    },
    "paraphrases": [
      "hana's sister is kia",
      "kia's cat is cleo",
      "who is hana's sister's cat?"
    ],
    "responses": [
      "",
      "",
      "hana's sister's cat is cleo"
    ]
  },
  "hana's sister is kia kia's cat is cleo\\nwho is the cat of the sister of hana": {
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatable",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "infix"
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "postfix"
          }
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), query: ['what'], determined: true }",
          "id": "what",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: before[0], two: after[0] }",
          "id": "is",
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, ...context }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: 'a', modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, determined: true }",
          "hierarchy": [
            "queryable"
          ],
          "id": "it",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|has,have] ([property|]))"
        },
        {
          "pattern": "(<doesnt|doesnt,dont> ([have/0]))"
        },
        {
          "pattern": "(([queryable]) [is|is,are] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|is,are] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([what] ([whatable|])?)"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|does,do> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [] }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "default": true,
        "marker": "is",
        "one": {
          "marker": "property",
          "object": {
            "marker": "unknown",
            "text": "hana",
            "types": [
              "object",
              "unknown"
            ],
            "unknown": true,
            "value": "hana",
            "word": "hana"
          },
          "objects": [
            {
              "marker": "property",
              "text": "sister",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "sister",
              "word": "sister"
            },
            {
              "marker": "unknown",
              "text": "hana",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "hana",
              "word": "hana"
            }
          ],
          "response": true,
          "text": "hana 's sister",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "sister",
          "word": "sister"
        },
        "text": "hana 's sister is kia",
        "topLevel": true,
        "touchedBy": [
          "call2"
        ],
        "two": {
          "marker": "unknown",
          "response": true,
          "text": "kia",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "kia",
          "word": "kia"
        },
        "word": "is"
      },
      {
        "default": true,
        "marker": "is",
        "one": {
          "marker": "property",
          "object": {
            "marker": "unknown",
            "text": "kia",
            "types": [
              "object",
              "unknown"
            ],
            "unknown": true,
            "value": "kia",
            "word": "kia"
          },
          "objects": [
            {
              "marker": "property",
              "text": "cat",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "cat",
              "word": "cat"
            },
            {
              "marker": "unknown",
              "text": "kia",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "kia",
              "word": "kia"
            }
          ],
          "response": true,
          "text": "kia 's cat",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "cat",
          "word": "cat"
        },
        "text": "kia 's cat is cleo",
        "topLevel": true,
        "touchedBy": [
          "call18"
        ],
        "two": {
          "marker": "unknown",
          "response": true,
          "text": "cleo",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "cleo",
          "word": "cleo"
        },
        "word": "is"
      },
      {
        "default": true,
        "marker": "is",
        "one": {
          "determined": true,
          "marker": "what",
          "modifiers": [
          ],
          "query": [
            "what"
          ],
          "response": true,
          "text": "who",
          "types": [
            "what"
          ],
          "word": "who"
        },
        "query": [
          "what"
        ],
        "response": {
          "default": true,
          "focusable": [
            "two",
            "one"
          ],
          "marker": "is",
          "one": {
            "concept": true,
            "determiner": "the",
            "evaluate": true,
            "marker": "property",
            "modifiers": [
              "determiner"
            ],
            "object": {
              "marker": "unknown",
              "text": "hana",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "hana",
              "word": "hana"
            },
            "objects": [
              {
                "concept": true,
                "determiner": "the",
                "marker": "property",
                "modifiers": [
                  "determiner"
                ],
                "pullFromContext": true,
                "text": "the cat",
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": "cat",
                "wantsValue": true,
                "word": "cat"
              },
              {
                "concept": true,
                "determiner": "the",
                "marker": "unknown",
                "modifiers": [
                  "determiner"
                ],
                "pullFromContext": true,
                "text": "the sister",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "sister",
                "wantsValue": true,
                "word": "sister"
              },
              {
                "marker": "unknown",
                "text": "hana",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "hana",
                "word": "hana"
              }
            ],
            "pullFromContext": true,
            "text": "the cat of the sister of hana",
            "types": [
              "property"
            ],
            "unknown": true,
            "value": "cat",
            "wantsValue": true,
            "word": "cat"
          },
          "two": {
            "concept": true,
            "determiner": "the",
            "evaluateWasProcessed": true,
            "focus": true,
            "focusable": [
              "object[0]"
            ],
            "instance": true,
            "marker": "property",
            "modifiers": [
              "determiner"
            ],
            "objects": [
              {
                "concept": true,
                "determiner": "the",
                "marker": "property",
                "modifiers": [
                  "determiner"
                ],
                "pullFromContext": true,
                "text": "the cat",
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": "cat",
                "wantsValue": true,
                "word": "cat"
              },
              {
                "concept": true,
                "determiner": "the",
                "marker": "unknown",
                "modifiers": [
                  "determiner"
                ],
                "pullFromContext": true,
                "text": "the sister",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "sister",
                "wantsValue": true,
                "word": "sister"
              },
              {
                "marker": "unknown",
                "text": "hana",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "hana",
                "word": "hana"
              }
            ],
            "pullFromContext": true,
            "text": "the cat of the sister of hana",
            "touchedBy": [
              "call3"
            ],
            "types": [
              "property"
            ],
            "unknown": true,
            "value": {
              "marker": "unknown",
              "response": true,
              "text": "cleo",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "cleo",
              "word": "cleo"
            },
            "wantsValue": true,
            "word": "cat"
          },
          "word": "is"
        },
        "text": "who is the cat of the sister of hana",
        "topLevel": true,
        "touchedBy": [
          "call2"
        ],
        "two": {
          "concept": true,
          "determiner": "the",
          "marker": "property",
          "modifiers": [
            "determiner"
          ],
          "object": {
            "marker": "unknown",
            "text": "hana",
            "types": [
              "object",
              "unknown"
            ],
            "unknown": true,
            "value": "hana",
            "word": "hana"
          },
          "objects": [
            {
              "concept": true,
              "determiner": "the",
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "pullFromContext": true,
              "text": "the cat",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "cat",
              "wantsValue": true,
              "word": "cat"
            },
            {
              "concept": true,
              "determiner": "the",
              "marker": "unknown",
              "modifiers": [
                "determiner"
              ],
              "pullFromContext": true,
              "text": "the sister",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "sister",
              "wantsValue": true,
              "word": "sister"
            },
            {
              "marker": "unknown",
              "text": "hana",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "hana",
              "word": "hana"
            }
          ],
          "pullFromContext": true,
          "response": true,
          "text": "the cat of the sister of hana",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "cat",
          "wantsValue": true,
          "word": "cat"
        },
        "word": "is"
      }
    ],
    "metadata": {
      "opChoices": [
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "possession",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ]
          ]
        },
        {
          "op": [
            "possession",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "possession",
              1
            ]
          ]
        },
        {
          "op": [
            "possession",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              1
            ]
          ]
        },
        {
          "op": [
            "property",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              1
            ],
            [
              "property",
              0
            ]
          ]
        },
        {
          "op": [
            "possession",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              1
            ]
          ]
        },
        {
          "op": [
            "property",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "property",
              0
            ]
          ]
        },
        {
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ]
          ]
        },
        {
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "is",
              1
            ]
          ]
        },
        {
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        },
        {
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "what",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "op": [
            "propertyOf",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ]
          ]
        },
        {
          "op": [
            "propertyOf",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "op": [
            "propertyOf",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "op": [
            "propertyOf",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ]
          ]
        },
        {
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "namespaced": {
        "0": {
          "children": {
            "cat": [
              "cleo"
            ],
            "sister": [
              "kia"
            ]
          },
          "concepts": [
            "properties",
            "kia",
            "sister",
            "hana",
            "cleo",
            "cat"
          ],
          "parents": {
            "cleo": [
              "cat"
            ],
            "kia": [
              "sister"
            ]
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "cat": {
              },
              "cleo": {
              },
              "hana": {
                "sister": {
                  "has": true,
                  "value": {
                    "marker": "unknown",
                    "response": true,
                    "text": "kia",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "kia",
                    "word": "kia"
                  }
                }
              },
              "kia": {
                "cat": {
                  "has": true,
                  "value": {
                    "marker": "unknown",
                    "response": true,
                    "text": "cleo",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "cleo",
                    "word": "cleo"
                  }
                }
              },
              "sister": {
              }
            }
          },
          "property": {
            "cat": [
              {
                "marker": "unknown",
                "response": true,
                "text": "cleo",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "cleo",
                "word": "cleo"
              }
            ],
            "sister": [
              {
                "marker": "unknown",
                "response": true,
                "text": "kia",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "kia",
                "word": "kia"
              }
            ]
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "1": {
          "mentioned": [
            {
              "determined": true,
              "marker": "what",
              "modifiers": [
              ],
              "query": [
                "what"
              ],
              "response": true,
              "text": "who",
              "types": [
                "what"
              ],
              "word": "who"
            }
          ],
          "variables": {
          }
        },
        "2": {
        }
      },
      "processed": [
        {
          "context": {
            "default": true,
            "marker": "is",
            "one": {
              "determined": true,
              "marker": "what",
              "modifiers": [
              ],
              "query": [
                "what"
              ],
              "response": true,
              "text": "who",
              "types": [
                "what"
              ],
              "word": "who"
            },
            "query": [
              "what"
            ],
            "response": {
              "default": true,
              "focusable": [
                "two",
                "one"
              ],
              "marker": "is",
              "one": {
                "concept": true,
                "determiner": "the",
                "evaluate": true,
                "marker": "property",
                "modifiers": [
                  "determiner"
                ],
                "object": {
                  "marker": "unknown",
                  "text": "hana",
                  "types": [
                    "object",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "hana",
                  "word": "hana"
                },
                "objects": [
                  {
                    "concept": true,
                    "determiner": "the",
                    "marker": "property",
                    "modifiers": [
                      "determiner"
                    ],
                    "pullFromContext": true,
                    "text": "the cat",
                    "types": [
                      "property"
                    ],
                    "unknown": true,
                    "value": "cat",
                    "wantsValue": true,
                    "word": "cat"
                  },
                  {
                    "concept": true,
                    "determiner": "the",
                    "marker": "unknown",
                    "modifiers": [
                      "determiner"
                    ],
                    "pullFromContext": true,
                    "text": "the sister",
                    "types": [
                      "object",
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "sister",
                    "wantsValue": true,
                    "word": "sister"
                  },
                  {
                    "marker": "unknown",
                    "text": "hana",
                    "types": [
                      "object",
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "hana",
                    "word": "hana"
                  }
                ],
                "pullFromContext": true,
                "text": "the cat of the sister of hana",
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": "cat",
                "wantsValue": true,
                "word": "cat"
              },
              "two": {
                "concept": true,
                "determiner": "the",
                "evaluateWasProcessed": true,
                "focus": true,
                "focusable": [
                  "object[0]"
                ],
                "instance": true,
                "marker": "property",
                "modifiers": [
                  "determiner"
                ],
                "objects": [
                  {
                    "concept": true,
                    "determiner": "the",
                    "marker": "property",
                    "modifiers": [
                      "determiner"
                    ],
                    "pullFromContext": true,
                    "text": "the cat",
                    "types": [
                      "property"
                    ],
                    "unknown": true,
                    "value": "cat",
                    "wantsValue": true,
                    "word": "cat"
                  },
                  {
                    "concept": true,
                    "determiner": "the",
                    "marker": "unknown",
                    "modifiers": [
                      "determiner"
                    ],
                    "pullFromContext": true,
                    "text": "the sister",
                    "types": [
                      "object",
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "sister",
                    "wantsValue": true,
                    "word": "sister"
                  },
                  {
                    "marker": "unknown",
                    "text": "hana",
                    "types": [
                      "object",
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "hana",
                    "word": "hana"
                  }
                ],
                "pullFromContext": true,
                "text": "the cat of the sister of hana",
                "touchedBy": [
                  "call3"
                ],
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": {
                  "marker": "unknown",
                  "response": true,
                  "text": "cleo",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "cleo",
                  "word": "cleo"
                },
                "wantsValue": true,
                "word": "cat"
              },
              "word": "is"
            },
            "text": "who is the cat of the sister of hana",
            "topLevel": true,
            "touchedBy": [
              "call2"
            ],
            "two": {
              "concept": true,
              "determiner": "the",
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "object": {
                "marker": "unknown",
                "text": "hana",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "hana",
                "word": "hana"
              },
              "objects": [
                {
                  "concept": true,
                  "determiner": "the",
                  "marker": "property",
                  "modifiers": [
                    "determiner"
                  ],
                  "pullFromContext": true,
                  "text": "the cat",
                  "types": [
                    "property"
                  ],
                  "unknown": true,
                  "value": "cat",
                  "wantsValue": true,
                  "word": "cat"
                },
                {
                  "concept": true,
                  "determiner": "the",
                  "marker": "unknown",
                  "modifiers": [
                    "determiner"
                  ],
                  "pullFromContext": true,
                  "text": "the sister",
                  "types": [
                    "object",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "sister",
                  "wantsValue": true,
                  "word": "sister"
                },
                {
                  "marker": "unknown",
                  "text": "hana",
                  "types": [
                    "object",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "hana",
                  "word": "hana"
                }
              ],
              "pullFromContext": true,
              "response": true,
              "text": "the cat of the sister of hana",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "cat",
              "wantsValue": true,
              "word": "cat"
            },
            "word": "is"
          },
          "paraphrases": "who is the cat of the sister of hana?",
          "responses": [
            "the cat of the sister of hana is cleo"
          ]
        },
        {
          "context": {
            "default": true,
            "marker": "is",
            "one": {
              "marker": "property",
              "object": {
                "marker": "unknown",
                "text": "kia",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "kia",
                "word": "kia"
              },
              "objects": [
                {
                  "marker": "property",
                  "text": "cat",
                  "types": [
                    "property"
                  ],
                  "unknown": true,
                  "value": "cat",
                  "word": "cat"
                },
                {
                  "marker": "unknown",
                  "text": "kia",
                  "types": [
                    "object",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "kia",
                  "word": "kia"
                }
              ],
              "response": true,
              "text": "kia 's cat",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "cat",
              "word": "cat"
            },
            "text": "kia 's cat is cleo",
            "topLevel": true,
            "touchedBy": [
              "call18"
            ],
            "two": {
              "marker": "unknown",
              "response": true,
              "text": "cleo",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "cleo",
              "word": "cleo"
            },
            "word": "is"
          },
          "paraphrases": "kia's cat is cleo",
          "responses": [
            "",
            ""
          ]
        },
        {
          "context": {
            "default": true,
            "marker": "is",
            "one": {
              "marker": "property",
              "object": {
                "marker": "unknown",
                "text": "hana",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "hana",
                "word": "hana"
              },
              "objects": [
                {
                  "marker": "property",
                  "text": "sister",
                  "types": [
                    "property"
                  ],
                  "unknown": true,
                  "value": "sister",
                  "word": "sister"
                },
                {
                  "marker": "unknown",
                  "text": "hana",
                  "types": [
                    "object",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "hana",
                  "word": "hana"
                }
              ],
              "response": true,
              "text": "hana 's sister",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "sister",
              "word": "sister"
            },
            "text": "hana 's sister is kia",
            "topLevel": true,
            "touchedBy": [
              "call2"
            ],
            "two": {
              "marker": "unknown",
              "response": true,
              "text": "kia",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "kia",
              "word": "kia"
            },
            "word": "is"
          },
          "paraphrases": "hana's sister is kia",
          "responses": [
            "",
            ""
          ]
        }
      ]
    },
    "paraphrases": [
      "hana's sister is kia",
      "kia's cat is cleo",
      "who is the cat of the sister of hana?"
    ],
    "responses": [
      "",
      "",
      "the cat of the sister of hana is cleo"
    ]
  },
  "property of object": {
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatable",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "infix"
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "postfix"
          }
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), query: ['what'], determined: true }",
          "id": "what",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: before[0], two: after[0] }",
          "id": "is",
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, ...context }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: 'a', modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, determined: true }",
          "hierarchy": [
            "queryable"
          ],
          "id": "it",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|has,have] ([property|]))"
        },
        {
          "pattern": "(<doesnt|doesnt,dont> ([have/0]))"
        },
        {
          "pattern": "(([queryable]) [is|is,are] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|is,are] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([what] ([whatable|])?)"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|does,do> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [] }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "default": true,
        "marker": "property",
        "object": {
          "default": true,
          "marker": "object",
          "text": "object",
          "types": [
            "object"
          ],
          "word": "object"
        },
        "objects": [
          {
            "default": true,
            "marker": "property",
            "text": "property",
            "types": [
              "property"
            ],
            "word": "property"
          },
          {
            "default": true,
            "marker": "object",
            "text": "object",
            "types": [
              "object"
            ],
            "word": "object"
          }
        ],
        "text": "property of object",
        "topLevel": true,
        "types": [
          "property"
        ],
        "word": "property"
      }
    ],
    "metadata": {
      "opChoices": [
        {
          "op": [
            "property",
            0
          ],
          "ops": [
            [
              "object",
              0
            ],
            [
              "property",
              0
            ],
            [
              "propertyOf",
              0
            ]
          ]
        },
        {
          "op": [
            "object",
            0
          ],
          "ops": [
            [
              "object",
              0
            ],
            [
              "propertyOf",
              0
            ]
          ]
        },
        {
          "op": [
            "propertyOf",
            0
          ],
          "ops": [
            [
              "propertyOf",
              0
            ]
          ]
        },
        {
          "op": [
            "propertyOf",
            1
          ],
          "ops": [
            [
              "propertyOf",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "namespaced": {
        "0": {
          "children": {
          },
          "concepts": [
            "properties"
          ],
          "parents": {
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
            }
          },
          "property": {
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "1": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "2": {
        }
      },
      "processed": [
        {
          "context": {
            "default": true,
            "marker": "property",
            "object": {
              "default": true,
              "marker": "object",
              "text": "object",
              "types": [
                "object"
              ],
              "word": "object"
            },
            "objects": [
              {
                "default": true,
                "marker": "property",
                "text": "property",
                "types": [
                  "property"
                ],
                "word": "property"
              },
              {
                "default": true,
                "marker": "object",
                "text": "object",
                "types": [
                  "object"
                ],
                "word": "object"
              }
            ],
            "text": "property of object",
            "topLevel": true,
            "types": [
              "property"
            ],
            "word": "property"
          },
          "paraphrases": "property of object",
          "responses": [
            ""
          ]
        }
      ]
    },
    "paraphrases": [
      "property of object"
    ],
    "responses": [
      ""
    ]
  },
  "the age of greg is 23 the profession of greg is programmer what are the properties of greg": {
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatable",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "infix"
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "postfix"
          }
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), query: ['what'], determined: true }",
          "id": "what",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: before[0], two: after[0] }",
          "id": "is",
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, ...context }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: 'a', modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, determined: true }",
          "hierarchy": [
            "queryable"
          ],
          "id": "it",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|has,have] ([property|]))"
        },
        {
          "pattern": "(<doesnt|doesnt,dont> ([have/0]))"
        },
        {
          "pattern": "(([queryable]) [is|is,are] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|is,are] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([what] ([whatable|])?)"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|does,do> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [] }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "default": true,
        "marker": "is",
        "one": {
          "concept": true,
          "determiner": "the",
          "marker": "property",
          "modifiers": [
            "determiner"
          ],
          "object": {
            "marker": "unknown",
            "text": "greg",
            "types": [
              "object",
              "unknown"
            ],
            "unknown": true,
            "value": "greg",
            "word": "greg"
          },
          "objects": [
            {
              "concept": true,
              "determiner": "the",
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "pullFromContext": true,
              "text": "the age",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "age",
              "wantsValue": true,
              "word": "age"
            },
            {
              "marker": "unknown",
              "text": "greg",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            }
          ],
          "pullFromContext": true,
          "response": true,
          "text": "the age of greg",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "age",
          "wantsValue": true,
          "word": "age"
        },
        "text": "the age of greg is 23",
        "topLevel": true,
        "touchedBy": [
          "call2"
        ],
        "two": {
          "marker": "unknown",
          "response": true,
          "text": "23",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "23",
          "word": "23"
        },
        "word": "is"
      },
      {
        "default": true,
        "marker": "is",
        "one": {
          "concept": true,
          "determiner": "the",
          "marker": "property",
          "modifiers": [
            "determiner"
          ],
          "object": {
            "marker": "unknown",
            "text": "greg",
            "types": [
              "object",
              "unknown"
            ],
            "unknown": true,
            "value": "greg",
            "word": "greg"
          },
          "objects": [
            {
              "concept": true,
              "determiner": "the",
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "pullFromContext": true,
              "text": "the profession",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "profession",
              "wantsValue": true,
              "word": "profession"
            },
            {
              "marker": "unknown",
              "text": "greg",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            }
          ],
          "pullFromContext": true,
          "response": true,
          "text": "the profession of greg",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "profession",
          "wantsValue": true,
          "word": "profession"
        },
        "text": "the profession of greg is programmer",
        "topLevel": true,
        "touchedBy": [
          "call16"
        ],
        "two": {
          "marker": "unknown",
          "response": true,
          "text": "programmer",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "programmer",
          "word": "programmer"
        },
        "word": "is"
      },
      {
        "default": true,
        "marker": "is",
        "one": {
          "default": true,
          "determined": true,
          "marker": "what",
          "query": [
            "what"
          ],
          "response": true,
          "text": "what",
          "types": [
            "what"
          ],
          "word": "what"
        },
        "query": [
          "what"
        ],
        "response": {
          "default": true,
          "focusable": [
            "two",
            "one"
          ],
          "marker": "is",
          "number": "many",
          "one": {
            "concept": true,
            "determiner": "the",
            "evaluate": true,
            "marker": "property",
            "modifiers": [
              "determiner"
            ],
            "object": {
              "marker": "unknown",
              "text": "greg",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "objects": [
              {
                "concept": true,
                "determiner": "the",
                "marker": "property",
                "modifiers": [
                  "determiner"
                ],
                "pullFromContext": true,
                "text": "the properties",
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": "properties",
                "wantsValue": true,
                "word": "properties"
              },
              {
                "marker": "unknown",
                "text": "greg",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              }
            ],
            "pullFromContext": true,
            "text": "the properties of greg",
            "types": [
              "property"
            ],
            "unknown": true,
            "value": "properties",
            "wantsValue": true,
            "word": "properties"
          },
          "two": {
            "concept": true,
            "determiner": "the",
            "evaluateWasProcessed": true,
            "focus": true,
            "focusable": [
              "object[0]"
            ],
            "instance": true,
            "marker": "property",
            "modifiers": [
              "determiner"
            ],
            "objects": [
              {
                "concept": true,
                "determiner": "the",
                "marker": "property",
                "modifiers": [
                  "determiner"
                ],
                "pullFromContext": true,
                "text": "the properties",
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": "properties",
                "wantsValue": true,
                "word": "properties"
              },
              {
                "marker": "unknown",
                "text": "greg",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              }
            ],
            "pullFromContext": true,
            "text": "the properties of greg",
            "touchedBy": [
              "call31"
            ],
            "types": [
              "property"
            ],
            "unknown": true,
            "value": {
              "marker": "list",
              "value": [
                "age: 23",
                "profession: programmer"
              ]
            },
            "wantsValue": true,
            "word": "properties"
          },
          "word": "are"
        },
        "text": "what are the properties of greg",
        "topLevel": true,
        "touchedBy": [
          "call30"
        ],
        "two": {
          "concept": true,
          "determiner": "the",
          "marker": "property",
          "modifiers": [
            "determiner"
          ],
          "object": {
            "marker": "unknown",
            "text": "greg",
            "types": [
              "object",
              "unknown"
            ],
            "unknown": true,
            "value": "greg",
            "word": "greg"
          },
          "objects": [
            {
              "concept": true,
              "determiner": "the",
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "pullFromContext": true,
              "text": "the properties",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "properties",
              "wantsValue": true,
              "word": "properties"
            },
            {
              "marker": "unknown",
              "text": "greg",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            }
          ],
          "pullFromContext": true,
          "response": true,
          "text": "the properties of greg",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "properties",
          "wantsValue": true,
          "word": "properties"
        },
        "word": "are"
      }
    ],
    "metadata": {
      "opChoices": [
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "what",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "op": [
            "propertyOf",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ]
          ]
        },
        {
          "op": [
            "propertyOf",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "op": [
            "propertyOf",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "op": [
            "propertyOf",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "op": [
            "propertyOf",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "op": [
            "propertyOf",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ]
          ]
        },
        {
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "is",
              1
            ]
          ]
        },
        {
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "is",
              1
            ]
          ]
        },
        {
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        },
        {
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        },
        {
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "namespaced": {
        "0": {
          "children": {
            "age": [
              "23"
            ],
            "profession": [
              "programmer"
            ]
          },
          "concepts": [
            "properties",
            "23",
            "age",
            "greg",
            "programmer",
            "profession"
          ],
          "parents": {
            "23": [
              "age"
            ],
            "programmer": [
              "profession"
            ]
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "23": {
              },
              "age": {
              },
              "greg": {
                "age": {
                  "has": true,
                  "value": {
                    "marker": "unknown",
                    "response": true,
                    "text": "23",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "23",
                    "word": "23"
                  }
                },
                "profession": {
                  "has": true,
                  "value": {
                    "marker": "unknown",
                    "response": true,
                    "text": "programmer",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "programmer",
                    "word": "programmer"
                  }
                }
              },
              "profession": {
              },
              "programmer": {
              }
            }
          },
          "property": {
            "age": [
              {
                "marker": "unknown",
                "response": true,
                "text": "23",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "23",
                "word": "23"
              }
            ],
            "profession": [
              {
                "marker": "unknown",
                "response": true,
                "text": "programmer",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "programmer",
                "word": "programmer"
              }
            ]
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "1": {
          "mentioned": [
            {
              "default": true,
              "determined": true,
              "marker": "what",
              "query": [
                "what"
              ],
              "response": true,
              "text": "what",
              "types": [
                "what"
              ],
              "word": "what"
            }
          ],
          "variables": {
          }
        },
        "2": {
        }
      },
      "processed": [
        {
          "context": {
            "default": true,
            "marker": "is",
            "one": {
              "default": true,
              "determined": true,
              "marker": "what",
              "query": [
                "what"
              ],
              "response": true,
              "text": "what",
              "types": [
                "what"
              ],
              "word": "what"
            },
            "query": [
              "what"
            ],
            "response": {
              "default": true,
              "focusable": [
                "two",
                "one"
              ],
              "marker": "is",
              "number": "many",
              "one": {
                "concept": true,
                "determiner": "the",
                "evaluate": true,
                "marker": "property",
                "modifiers": [
                  "determiner"
                ],
                "object": {
                  "marker": "unknown",
                  "text": "greg",
                  "types": [
                    "object",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                },
                "objects": [
                  {
                    "concept": true,
                    "determiner": "the",
                    "marker": "property",
                    "modifiers": [
                      "determiner"
                    ],
                    "pullFromContext": true,
                    "text": "the properties",
                    "types": [
                      "property"
                    ],
                    "unknown": true,
                    "value": "properties",
                    "wantsValue": true,
                    "word": "properties"
                  },
                  {
                    "marker": "unknown",
                    "text": "greg",
                    "types": [
                      "object",
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "greg",
                    "word": "greg"
                  }
                ],
                "pullFromContext": true,
                "text": "the properties of greg",
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": "properties",
                "wantsValue": true,
                "word": "properties"
              },
              "two": {
                "concept": true,
                "determiner": "the",
                "evaluateWasProcessed": true,
                "focus": true,
                "focusable": [
                  "object[0]"
                ],
                "instance": true,
                "marker": "property",
                "modifiers": [
                  "determiner"
                ],
                "objects": [
                  {
                    "concept": true,
                    "determiner": "the",
                    "marker": "property",
                    "modifiers": [
                      "determiner"
                    ],
                    "pullFromContext": true,
                    "text": "the properties",
                    "types": [
                      "property"
                    ],
                    "unknown": true,
                    "value": "properties",
                    "wantsValue": true,
                    "word": "properties"
                  },
                  {
                    "marker": "unknown",
                    "text": "greg",
                    "types": [
                      "object",
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "greg",
                    "word": "greg"
                  }
                ],
                "pullFromContext": true,
                "text": "the properties of greg",
                "touchedBy": [
                  "call31"
                ],
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": {
                  "marker": "list",
                  "value": [
                    "age: 23",
                    "profession: programmer"
                  ]
                },
                "wantsValue": true,
                "word": "properties"
              },
              "word": "are"
            },
            "text": "what are the properties of greg",
            "topLevel": true,
            "touchedBy": [
              "call30"
            ],
            "two": {
              "concept": true,
              "determiner": "the",
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "object": {
                "marker": "unknown",
                "text": "greg",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              },
              "objects": [
                {
                  "concept": true,
                  "determiner": "the",
                  "marker": "property",
                  "modifiers": [
                    "determiner"
                  ],
                  "pullFromContext": true,
                  "text": "the properties",
                  "types": [
                    "property"
                  ],
                  "unknown": true,
                  "value": "properties",
                  "wantsValue": true,
                  "word": "properties"
                },
                {
                  "marker": "unknown",
                  "text": "greg",
                  "types": [
                    "object",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                }
              ],
              "pullFromContext": true,
              "response": true,
              "text": "the properties of greg",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "properties",
              "wantsValue": true,
              "word": "properties"
            },
            "word": "are"
          },
          "paraphrases": "what are the properties of greg?",
          "responses": [
            "",
            "",
            "the properties of greg are age: 23 and profession: programmer"
          ]
        },
        {
          "context": {
            "default": true,
            "marker": "is",
            "one": {
              "concept": true,
              "determiner": "the",
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "object": {
                "marker": "unknown",
                "text": "greg",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              },
              "objects": [
                {
                  "concept": true,
                  "determiner": "the",
                  "marker": "property",
                  "modifiers": [
                    "determiner"
                  ],
                  "pullFromContext": true,
                  "text": "the profession",
                  "types": [
                    "property"
                  ],
                  "unknown": true,
                  "value": "profession",
                  "wantsValue": true,
                  "word": "profession"
                },
                {
                  "marker": "unknown",
                  "text": "greg",
                  "types": [
                    "object",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                }
              ],
              "pullFromContext": true,
              "response": true,
              "text": "the profession of greg",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "profession",
              "wantsValue": true,
              "word": "profession"
            },
            "text": "the profession of greg is programmer",
            "topLevel": true,
            "touchedBy": [
              "call16"
            ],
            "two": {
              "marker": "unknown",
              "response": true,
              "text": "programmer",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "programmer",
              "word": "programmer"
            },
            "word": "is"
          },
          "paraphrases": "the profession of greg is programmer",
          "responses": [
            "",
            "",
            "the properties of greg are age: 23 and profession: programmer"
          ]
        },
        {
          "context": {
            "default": true,
            "marker": "is",
            "one": {
              "concept": true,
              "determiner": "the",
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "object": {
                "marker": "unknown",
                "text": "greg",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              },
              "objects": [
                {
                  "concept": true,
                  "determiner": "the",
                  "marker": "property",
                  "modifiers": [
                    "determiner"
                  ],
                  "pullFromContext": true,
                  "text": "the age",
                  "types": [
                    "property"
                  ],
                  "unknown": true,
                  "value": "age",
                  "wantsValue": true,
                  "word": "age"
                },
                {
                  "marker": "unknown",
                  "text": "greg",
                  "types": [
                    "object",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                }
              ],
              "pullFromContext": true,
              "response": true,
              "text": "the age of greg",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "age",
              "wantsValue": true,
              "word": "age"
            },
            "text": "the age of greg is 23",
            "topLevel": true,
            "touchedBy": [
              "call2"
            ],
            "two": {
              "marker": "unknown",
              "response": true,
              "text": "23",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "23",
              "word": "23"
            },
            "word": "is"
          },
          "paraphrases": "the age of greg is 23",
          "responses": [
            "",
            "",
            "the properties of greg are age: 23 and profession: programmer"
          ]
        }
      ]
    },
    "paraphrases": [
      "the age of greg is 23",
      "the profession of greg is programmer",
      "what are the properties of greg?"
    ],
    "responses": [
      "",
      "",
      "the properties of greg are age: 23 and profession: programmer"
    ]
  },
  "the age of greg is 23 what is greg's age": {
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatable",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "infix"
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "postfix"
          }
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), query: ['what'], determined: true }",
          "id": "what",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: before[0], two: after[0] }",
          "id": "is",
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, ...context }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: 'a', modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, determined: true }",
          "hierarchy": [
            "queryable"
          ],
          "id": "it",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|has,have] ([property|]))"
        },
        {
          "pattern": "(<doesnt|doesnt,dont> ([have/0]))"
        },
        {
          "pattern": "(([queryable]) [is|is,are] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|is,are] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([what] ([whatable|])?)"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|does,do> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [] }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "default": true,
        "marker": "is",
        "one": {
          "concept": true,
          "determiner": "the",
          "marker": "property",
          "modifiers": [
            "determiner"
          ],
          "object": {
            "marker": "unknown",
            "text": "greg",
            "types": [
              "object",
              "unknown"
            ],
            "unknown": true,
            "value": "greg",
            "word": "greg"
          },
          "objects": [
            {
              "concept": true,
              "determiner": "the",
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "pullFromContext": true,
              "text": "the age",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "age",
              "wantsValue": true,
              "word": "age"
            },
            {
              "marker": "unknown",
              "text": "greg",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            }
          ],
          "pullFromContext": true,
          "response": true,
          "text": "the age of greg",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "age",
          "wantsValue": true,
          "word": "age"
        },
        "text": "the age of greg is 23",
        "topLevel": true,
        "touchedBy": [
          "call2"
        ],
        "two": {
          "marker": "unknown",
          "response": true,
          "text": "23",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "23",
          "word": "23"
        },
        "word": "is"
      },
      {
        "default": true,
        "marker": "is",
        "one": {
          "default": true,
          "determined": true,
          "marker": "what",
          "query": [
            "what"
          ],
          "response": true,
          "text": "what",
          "types": [
            "what"
          ],
          "word": "what"
        },
        "query": [
          "what"
        ],
        "response": {
          "default": true,
          "focusable": [
            "two",
            "one"
          ],
          "marker": "is",
          "one": {
            "evaluate": true,
            "marker": "property",
            "object": {
              "marker": "unknown",
              "text": "greg",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "objects": [
              {
                "marker": "property",
                "text": "age",
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": "age",
                "word": "age"
              },
              {
                "marker": "unknown",
                "text": "greg",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              }
            ],
            "text": "greg 's age",
            "types": [
              "property"
            ],
            "unknown": true,
            "value": "age",
            "word": "age"
          },
          "two": {
            "evaluateWasProcessed": true,
            "focus": true,
            "focusable": [
              "object[0]"
            ],
            "instance": true,
            "marker": "property",
            "objects": [
              {
                "marker": "property",
                "text": "age",
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": "age",
                "word": "age"
              },
              {
                "marker": "unknown",
                "text": "greg",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              }
            ],
            "text": "greg 's age",
            "touchedBy": [
              "call17"
            ],
            "types": [
              "property"
            ],
            "unknown": true,
            "value": {
              "marker": "unknown",
              "response": true,
              "text": "23",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "23",
              "word": "23"
            },
            "word": "age"
          },
          "word": "is"
        },
        "text": "what is greg 's age",
        "topLevel": true,
        "touchedBy": [
          "call16"
        ],
        "two": {
          "marker": "property",
          "object": {
            "marker": "unknown",
            "text": "greg",
            "types": [
              "object",
              "unknown"
            ],
            "unknown": true,
            "value": "greg",
            "word": "greg"
          },
          "objects": [
            {
              "marker": "property",
              "text": "age",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "age",
              "word": "age"
            },
            {
              "marker": "unknown",
              "text": "greg",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            }
          ],
          "response": true,
          "text": "greg 's age",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "age",
          "word": "age"
        },
        "word": "is"
      }
    ],
    "metadata": {
      "opChoices": [
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "what",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "possession",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              1
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "op": [
            "possession",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "possession",
              1
            ],
            [
              "propertyOf",
              0
            ]
          ]
        },
        {
          "op": [
            "property",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "property",
              0
            ],
            [
              "propertyOf",
              0
            ]
          ]
        },
        {
          "op": [
            "propertyOf",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ]
          ]
        },
        {
          "op": [
            "propertyOf",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ]
          ]
        },
        {
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "is",
              1
            ]
          ]
        },
        {
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        },
        {
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "namespaced": {
        "0": {
          "children": {
            "age": [
              "23"
            ]
          },
          "concepts": [
            "properties",
            "23",
            "age",
            "greg"
          ],
          "parents": {
            "23": [
              "age"
            ]
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "23": {
              },
              "age": {
              },
              "greg": {
                "age": {
                  "has": true,
                  "value": {
                    "marker": "unknown",
                    "response": true,
                    "text": "23",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "23",
                    "word": "23"
                  }
                }
              }
            }
          },
          "property": {
            "age": [
              {
                "marker": "unknown",
                "response": true,
                "text": "23",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "23",
                "word": "23"
              }
            ]
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "1": {
          "mentioned": [
            {
              "default": true,
              "determined": true,
              "marker": "what",
              "query": [
                "what"
              ],
              "response": true,
              "text": "what",
              "types": [
                "what"
              ],
              "word": "what"
            }
          ],
          "variables": {
          }
        },
        "2": {
        }
      },
      "processed": [
        {
          "context": {
            "default": true,
            "marker": "is",
            "one": {
              "default": true,
              "determined": true,
              "marker": "what",
              "query": [
                "what"
              ],
              "response": true,
              "text": "what",
              "types": [
                "what"
              ],
              "word": "what"
            },
            "query": [
              "what"
            ],
            "response": {
              "default": true,
              "focusable": [
                "two",
                "one"
              ],
              "marker": "is",
              "one": {
                "evaluate": true,
                "marker": "property",
                "object": {
                  "marker": "unknown",
                  "text": "greg",
                  "types": [
                    "object",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                },
                "objects": [
                  {
                    "marker": "property",
                    "text": "age",
                    "types": [
                      "property"
                    ],
                    "unknown": true,
                    "value": "age",
                    "word": "age"
                  },
                  {
                    "marker": "unknown",
                    "text": "greg",
                    "types": [
                      "object",
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "greg",
                    "word": "greg"
                  }
                ],
                "text": "greg 's age",
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": "age",
                "word": "age"
              },
              "two": {
                "evaluateWasProcessed": true,
                "focus": true,
                "focusable": [
                  "object[0]"
                ],
                "instance": true,
                "marker": "property",
                "objects": [
                  {
                    "marker": "property",
                    "text": "age",
                    "types": [
                      "property"
                    ],
                    "unknown": true,
                    "value": "age",
                    "word": "age"
                  },
                  {
                    "marker": "unknown",
                    "text": "greg",
                    "types": [
                      "object",
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "greg",
                    "word": "greg"
                  }
                ],
                "text": "greg 's age",
                "touchedBy": [
                  "call17"
                ],
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": {
                  "marker": "unknown",
                  "response": true,
                  "text": "23",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "23",
                  "word": "23"
                },
                "word": "age"
              },
              "word": "is"
            },
            "text": "what is greg 's age",
            "topLevel": true,
            "touchedBy": [
              "call16"
            ],
            "two": {
              "marker": "property",
              "object": {
                "marker": "unknown",
                "text": "greg",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              },
              "objects": [
                {
                  "marker": "property",
                  "text": "age",
                  "types": [
                    "property"
                  ],
                  "unknown": true,
                  "value": "age",
                  "word": "age"
                },
                {
                  "marker": "unknown",
                  "text": "greg",
                  "types": [
                    "object",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                }
              ],
              "response": true,
              "text": "greg 's age",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "age",
              "word": "age"
            },
            "word": "is"
          },
          "paraphrases": "what is greg's age?",
          "responses": [
            "",
            "greg's age is 23"
          ]
        },
        {
          "context": {
            "default": true,
            "marker": "is",
            "one": {
              "concept": true,
              "determiner": "the",
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "object": {
                "marker": "unknown",
                "text": "greg",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              },
              "objects": [
                {
                  "concept": true,
                  "determiner": "the",
                  "marker": "property",
                  "modifiers": [
                    "determiner"
                  ],
                  "pullFromContext": true,
                  "text": "the age",
                  "types": [
                    "property"
                  ],
                  "unknown": true,
                  "value": "age",
                  "wantsValue": true,
                  "word": "age"
                },
                {
                  "marker": "unknown",
                  "text": "greg",
                  "types": [
                    "object",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                }
              ],
              "pullFromContext": true,
              "response": true,
              "text": "the age of greg",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "age",
              "wantsValue": true,
              "word": "age"
            },
            "text": "the age of greg is 23",
            "topLevel": true,
            "touchedBy": [
              "call2"
            ],
            "two": {
              "marker": "unknown",
              "response": true,
              "text": "23",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "23",
              "word": "23"
            },
            "word": "is"
          },
          "paraphrases": "the age of greg is 23",
          "responses": [
            "",
            "greg's age is 23"
          ]
        }
      ]
    },
    "paraphrases": [
      "the age of greg is 23",
      "what is greg's age?"
    ],
    "responses": [
      "",
      "greg's age is 23"
    ]
  },
  "the age of greg is 23 what is the age of greg": {
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatable",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "infix"
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "postfix"
          }
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), query: ['what'], determined: true }",
          "id": "what",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: before[0], two: after[0] }",
          "id": "is",
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, ...context }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: 'a', modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, determined: true }",
          "hierarchy": [
            "queryable"
          ],
          "id": "it",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|has,have] ([property|]))"
        },
        {
          "pattern": "(<doesnt|doesnt,dont> ([have/0]))"
        },
        {
          "pattern": "(([queryable]) [is|is,are] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|is,are] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([what] ([whatable|])?)"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|does,do> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [] }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "default": true,
        "marker": "is",
        "one": {
          "concept": true,
          "determiner": "the",
          "marker": "property",
          "modifiers": [
            "determiner"
          ],
          "object": {
            "marker": "unknown",
            "text": "greg",
            "types": [
              "object",
              "unknown"
            ],
            "unknown": true,
            "value": "greg",
            "word": "greg"
          },
          "objects": [
            {
              "concept": true,
              "determiner": "the",
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "pullFromContext": true,
              "text": "the age",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "age",
              "wantsValue": true,
              "word": "age"
            },
            {
              "marker": "unknown",
              "text": "greg",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            }
          ],
          "pullFromContext": true,
          "response": true,
          "text": "the age of greg",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "age",
          "wantsValue": true,
          "word": "age"
        },
        "text": "the age of greg is 23",
        "topLevel": true,
        "touchedBy": [
          "call2"
        ],
        "two": {
          "marker": "unknown",
          "response": true,
          "text": "23",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "23",
          "word": "23"
        },
        "word": "is"
      },
      {
        "default": true,
        "marker": "is",
        "one": {
          "default": true,
          "determined": true,
          "marker": "what",
          "query": [
            "what"
          ],
          "response": true,
          "text": "what",
          "types": [
            "what"
          ],
          "word": "what"
        },
        "query": [
          "what"
        ],
        "response": {
          "default": true,
          "focusable": [
            "two",
            "one"
          ],
          "marker": "is",
          "one": {
            "concept": true,
            "determiner": "the",
            "evaluate": true,
            "marker": "property",
            "modifiers": [
              "determiner"
            ],
            "object": {
              "marker": "unknown",
              "text": "greg",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "objects": [
              {
                "concept": true,
                "determiner": "the",
                "marker": "property",
                "modifiers": [
                  "determiner"
                ],
                "pullFromContext": true,
                "text": "the age",
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": "age",
                "wantsValue": true,
                "word": "age"
              },
              {
                "marker": "unknown",
                "text": "greg",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              }
            ],
            "pullFromContext": true,
            "text": "the age of greg",
            "types": [
              "property"
            ],
            "unknown": true,
            "value": "age",
            "wantsValue": true,
            "word": "age"
          },
          "two": {
            "concept": true,
            "determiner": "the",
            "evaluateWasProcessed": true,
            "focus": true,
            "focusable": [
              "object[0]"
            ],
            "instance": true,
            "marker": "property",
            "modifiers": [
              "determiner"
            ],
            "objects": [
              {
                "concept": true,
                "determiner": "the",
                "marker": "property",
                "modifiers": [
                  "determiner"
                ],
                "pullFromContext": true,
                "text": "the age",
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": "age",
                "wantsValue": true,
                "word": "age"
              },
              {
                "marker": "unknown",
                "text": "greg",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              }
            ],
            "pullFromContext": true,
            "text": "the age of greg",
            "touchedBy": [
              "call17"
            ],
            "types": [
              "property"
            ],
            "unknown": true,
            "value": {
              "marker": "unknown",
              "response": true,
              "text": "23",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "23",
              "word": "23"
            },
            "wantsValue": true,
            "word": "age"
          },
          "word": "is"
        },
        "text": "what is the age of greg",
        "topLevel": true,
        "touchedBy": [
          "call16"
        ],
        "two": {
          "concept": true,
          "determiner": "the",
          "marker": "property",
          "modifiers": [
            "determiner"
          ],
          "object": {
            "marker": "unknown",
            "text": "greg",
            "types": [
              "object",
              "unknown"
            ],
            "unknown": true,
            "value": "greg",
            "word": "greg"
          },
          "objects": [
            {
              "concept": true,
              "determiner": "the",
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "pullFromContext": true,
              "text": "the age",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "age",
              "wantsValue": true,
              "word": "age"
            },
            {
              "marker": "unknown",
              "text": "greg",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            }
          ],
          "pullFromContext": true,
          "response": true,
          "text": "the age of greg",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "age",
          "wantsValue": true,
          "word": "age"
        },
        "word": "is"
      }
    ],
    "metadata": {
      "opChoices": [
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "what",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "op": [
            "propertyOf",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ]
          ]
        },
        {
          "op": [
            "propertyOf",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "op": [
            "propertyOf",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "op": [
            "propertyOf",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ]
          ]
        },
        {
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "is",
              1
            ]
          ]
        },
        {
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        },
        {
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "namespaced": {
        "0": {
          "children": {
            "age": [
              "23"
            ]
          },
          "concepts": [
            "properties",
            "23",
            "age",
            "greg"
          ],
          "parents": {
            "23": [
              "age"
            ]
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "23": {
              },
              "age": {
              },
              "greg": {
                "age": {
                  "has": true,
                  "value": {
                    "marker": "unknown",
                    "response": true,
                    "text": "23",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "23",
                    "word": "23"
                  }
                }
              }
            }
          },
          "property": {
            "age": [
              {
                "marker": "unknown",
                "response": true,
                "text": "23",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "23",
                "word": "23"
              }
            ]
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "1": {
          "mentioned": [
            {
              "default": true,
              "determined": true,
              "marker": "what",
              "query": [
                "what"
              ],
              "response": true,
              "text": "what",
              "types": [
                "what"
              ],
              "word": "what"
            }
          ],
          "variables": {
          }
        },
        "2": {
        }
      },
      "processed": [
        {
          "context": {
            "default": true,
            "marker": "is",
            "one": {
              "default": true,
              "determined": true,
              "marker": "what",
              "query": [
                "what"
              ],
              "response": true,
              "text": "what",
              "types": [
                "what"
              ],
              "word": "what"
            },
            "query": [
              "what"
            ],
            "response": {
              "default": true,
              "focusable": [
                "two",
                "one"
              ],
              "marker": "is",
              "one": {
                "concept": true,
                "determiner": "the",
                "evaluate": true,
                "marker": "property",
                "modifiers": [
                  "determiner"
                ],
                "object": {
                  "marker": "unknown",
                  "text": "greg",
                  "types": [
                    "object",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                },
                "objects": [
                  {
                    "concept": true,
                    "determiner": "the",
                    "marker": "property",
                    "modifiers": [
                      "determiner"
                    ],
                    "pullFromContext": true,
                    "text": "the age",
                    "types": [
                      "property"
                    ],
                    "unknown": true,
                    "value": "age",
                    "wantsValue": true,
                    "word": "age"
                  },
                  {
                    "marker": "unknown",
                    "text": "greg",
                    "types": [
                      "object",
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "greg",
                    "word": "greg"
                  }
                ],
                "pullFromContext": true,
                "text": "the age of greg",
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": "age",
                "wantsValue": true,
                "word": "age"
              },
              "two": {
                "concept": true,
                "determiner": "the",
                "evaluateWasProcessed": true,
                "focus": true,
                "focusable": [
                  "object[0]"
                ],
                "instance": true,
                "marker": "property",
                "modifiers": [
                  "determiner"
                ],
                "objects": [
                  {
                    "concept": true,
                    "determiner": "the",
                    "marker": "property",
                    "modifiers": [
                      "determiner"
                    ],
                    "pullFromContext": true,
                    "text": "the age",
                    "types": [
                      "property"
                    ],
                    "unknown": true,
                    "value": "age",
                    "wantsValue": true,
                    "word": "age"
                  },
                  {
                    "marker": "unknown",
                    "text": "greg",
                    "types": [
                      "object",
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "greg",
                    "word": "greg"
                  }
                ],
                "pullFromContext": true,
                "text": "the age of greg",
                "touchedBy": [
                  "call17"
                ],
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": {
                  "marker": "unknown",
                  "response": true,
                  "text": "23",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "23",
                  "word": "23"
                },
                "wantsValue": true,
                "word": "age"
              },
              "word": "is"
            },
            "text": "what is the age of greg",
            "topLevel": true,
            "touchedBy": [
              "call16"
            ],
            "two": {
              "concept": true,
              "determiner": "the",
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "object": {
                "marker": "unknown",
                "text": "greg",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              },
              "objects": [
                {
                  "concept": true,
                  "determiner": "the",
                  "marker": "property",
                  "modifiers": [
                    "determiner"
                  ],
                  "pullFromContext": true,
                  "text": "the age",
                  "types": [
                    "property"
                  ],
                  "unknown": true,
                  "value": "age",
                  "wantsValue": true,
                  "word": "age"
                },
                {
                  "marker": "unknown",
                  "text": "greg",
                  "types": [
                    "object",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                }
              ],
              "pullFromContext": true,
              "response": true,
              "text": "the age of greg",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "age",
              "wantsValue": true,
              "word": "age"
            },
            "word": "is"
          },
          "paraphrases": "what is the age of greg?",
          "responses": [
            "",
            "the age of greg is 23"
          ]
        },
        {
          "context": {
            "default": true,
            "marker": "is",
            "one": {
              "concept": true,
              "determiner": "the",
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "object": {
                "marker": "unknown",
                "text": "greg",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              },
              "objects": [
                {
                  "concept": true,
                  "determiner": "the",
                  "marker": "property",
                  "modifiers": [
                    "determiner"
                  ],
                  "pullFromContext": true,
                  "text": "the age",
                  "types": [
                    "property"
                  ],
                  "unknown": true,
                  "value": "age",
                  "wantsValue": true,
                  "word": "age"
                },
                {
                  "marker": "unknown",
                  "text": "greg",
                  "types": [
                    "object",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                }
              ],
              "pullFromContext": true,
              "response": true,
              "text": "the age of greg",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "age",
              "wantsValue": true,
              "word": "age"
            },
            "text": "the age of greg is 23",
            "topLevel": true,
            "touchedBy": [
              "call2"
            ],
            "two": {
              "marker": "unknown",
              "response": true,
              "text": "23",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "23",
              "word": "23"
            },
            "word": "is"
          },
          "paraphrases": "the age of greg is 23",
          "responses": [
            "",
            "the age of greg is 23"
          ]
        }
      ]
    },
    "paraphrases": [
      "the age of greg is 23",
      "what is the age of greg?"
    ],
    "responses": [
      "",
      "the age of greg is 23"
    ]
  },
  "the age of greg is 23\\nwhat is the age of greg": {
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatable",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "infix"
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "postfix"
          }
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), query: ['what'], determined: true }",
          "id": "what",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: before[0], two: after[0] }",
          "id": "is",
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, ...context }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: 'a', modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, determined: true }",
          "hierarchy": [
            "queryable"
          ],
          "id": "it",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|has,have] ([property|]))"
        },
        {
          "pattern": "(<doesnt|doesnt,dont> ([have/0]))"
        },
        {
          "pattern": "(([queryable]) [is|is,are] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|is,are] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([what] ([whatable|])?)"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|does,do> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [] }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "default": true,
        "marker": "is",
        "one": {
          "concept": true,
          "determiner": "the",
          "marker": "property",
          "modifiers": [
            "determiner"
          ],
          "object": {
            "marker": "unknown",
            "text": "greg",
            "types": [
              "object",
              "unknown"
            ],
            "unknown": true,
            "value": "greg",
            "word": "greg"
          },
          "objects": [
            {
              "concept": true,
              "determiner": "the",
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "pullFromContext": true,
              "text": "the age",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "age",
              "wantsValue": true,
              "word": "age"
            },
            {
              "marker": "unknown",
              "text": "greg",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            }
          ],
          "pullFromContext": true,
          "response": true,
          "text": "the age of greg",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "age",
          "wantsValue": true,
          "word": "age"
        },
        "text": "the age of greg is 23",
        "topLevel": true,
        "touchedBy": [
          "call2"
        ],
        "two": {
          "marker": "unknown",
          "response": true,
          "text": "23",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "23",
          "word": "23"
        },
        "word": "is"
      },
      {
        "default": true,
        "marker": "is",
        "one": {
          "default": true,
          "determined": true,
          "marker": "what",
          "query": [
            "what"
          ],
          "response": true,
          "text": "what",
          "types": [
            "what"
          ],
          "word": "what"
        },
        "query": [
          "what"
        ],
        "response": {
          "default": true,
          "focusable": [
            "two",
            "one"
          ],
          "marker": "is",
          "one": {
            "concept": true,
            "determiner": "the",
            "evaluate": true,
            "marker": "property",
            "modifiers": [
              "determiner"
            ],
            "object": {
              "marker": "unknown",
              "text": "greg",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "objects": [
              {
                "concept": true,
                "determiner": "the",
                "marker": "property",
                "modifiers": [
                  "determiner"
                ],
                "pullFromContext": true,
                "text": "the age",
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": "age",
                "wantsValue": true,
                "word": "age"
              },
              {
                "marker": "unknown",
                "text": "greg",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              }
            ],
            "pullFromContext": true,
            "text": "the age of greg",
            "types": [
              "property"
            ],
            "unknown": true,
            "value": "age",
            "wantsValue": true,
            "word": "age"
          },
          "two": {
            "concept": true,
            "determiner": "the",
            "evaluateWasProcessed": true,
            "focus": true,
            "focusable": [
              "object[0]"
            ],
            "instance": true,
            "marker": "property",
            "modifiers": [
              "determiner"
            ],
            "objects": [
              {
                "concept": true,
                "determiner": "the",
                "marker": "property",
                "modifiers": [
                  "determiner"
                ],
                "pullFromContext": true,
                "text": "the age",
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": "age",
                "wantsValue": true,
                "word": "age"
              },
              {
                "marker": "unknown",
                "text": "greg",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              }
            ],
            "pullFromContext": true,
            "text": "the age of greg",
            "touchedBy": [
              "call3"
            ],
            "types": [
              "property"
            ],
            "unknown": true,
            "value": {
              "marker": "unknown",
              "response": true,
              "text": "23",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "23",
              "word": "23"
            },
            "wantsValue": true,
            "word": "age"
          },
          "word": "is"
        },
        "text": "what is the age of greg",
        "topLevel": true,
        "touchedBy": [
          "call2"
        ],
        "two": {
          "concept": true,
          "determiner": "the",
          "marker": "property",
          "modifiers": [
            "determiner"
          ],
          "object": {
            "marker": "unknown",
            "text": "greg",
            "types": [
              "object",
              "unknown"
            ],
            "unknown": true,
            "value": "greg",
            "word": "greg"
          },
          "objects": [
            {
              "concept": true,
              "determiner": "the",
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "pullFromContext": true,
              "text": "the age",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "age",
              "wantsValue": true,
              "word": "age"
            },
            {
              "marker": "unknown",
              "text": "greg",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            }
          ],
          "pullFromContext": true,
          "response": true,
          "text": "the age of greg",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "age",
          "wantsValue": true,
          "word": "age"
        },
        "word": "is"
      }
    ],
    "metadata": {
      "opChoices": [
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "op": [
            "propertyOf",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ]
          ]
        },
        {
          "op": [
            "propertyOf",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ]
          ]
        },
        {
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "what",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "op": [
            "propertyOf",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ]
          ]
        },
        {
          "op": [
            "propertyOf",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ]
          ]
        },
        {
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "namespaced": {
        "0": {
          "children": {
            "age": [
              "23"
            ]
          },
          "concepts": [
            "properties",
            "23",
            "age",
            "greg"
          ],
          "parents": {
            "23": [
              "age"
            ]
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
              "23": {
              },
              "age": {
              },
              "greg": {
                "age": {
                  "has": true,
                  "value": {
                    "marker": "unknown",
                    "response": true,
                    "text": "23",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "23",
                    "word": "23"
                  }
                }
              }
            }
          },
          "property": {
            "age": [
              {
                "marker": "unknown",
                "response": true,
                "text": "23",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "23",
                "word": "23"
              }
            ]
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "1": {
          "mentioned": [
            {
              "default": true,
              "determined": true,
              "marker": "what",
              "query": [
                "what"
              ],
              "response": true,
              "text": "what",
              "types": [
                "what"
              ],
              "word": "what"
            }
          ],
          "variables": {
          }
        },
        "2": {
        }
      },
      "processed": [
        {
          "context": {
            "default": true,
            "marker": "is",
            "one": {
              "default": true,
              "determined": true,
              "marker": "what",
              "query": [
                "what"
              ],
              "response": true,
              "text": "what",
              "types": [
                "what"
              ],
              "word": "what"
            },
            "query": [
              "what"
            ],
            "response": {
              "default": true,
              "focusable": [
                "two",
                "one"
              ],
              "marker": "is",
              "one": {
                "concept": true,
                "determiner": "the",
                "evaluate": true,
                "marker": "property",
                "modifiers": [
                  "determiner"
                ],
                "object": {
                  "marker": "unknown",
                  "text": "greg",
                  "types": [
                    "object",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                },
                "objects": [
                  {
                    "concept": true,
                    "determiner": "the",
                    "marker": "property",
                    "modifiers": [
                      "determiner"
                    ],
                    "pullFromContext": true,
                    "text": "the age",
                    "types": [
                      "property"
                    ],
                    "unknown": true,
                    "value": "age",
                    "wantsValue": true,
                    "word": "age"
                  },
                  {
                    "marker": "unknown",
                    "text": "greg",
                    "types": [
                      "object",
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "greg",
                    "word": "greg"
                  }
                ],
                "pullFromContext": true,
                "text": "the age of greg",
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": "age",
                "wantsValue": true,
                "word": "age"
              },
              "two": {
                "concept": true,
                "determiner": "the",
                "evaluateWasProcessed": true,
                "focus": true,
                "focusable": [
                  "object[0]"
                ],
                "instance": true,
                "marker": "property",
                "modifiers": [
                  "determiner"
                ],
                "objects": [
                  {
                    "concept": true,
                    "determiner": "the",
                    "marker": "property",
                    "modifiers": [
                      "determiner"
                    ],
                    "pullFromContext": true,
                    "text": "the age",
                    "types": [
                      "property"
                    ],
                    "unknown": true,
                    "value": "age",
                    "wantsValue": true,
                    "word": "age"
                  },
                  {
                    "marker": "unknown",
                    "text": "greg",
                    "types": [
                      "object",
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "greg",
                    "word": "greg"
                  }
                ],
                "pullFromContext": true,
                "text": "the age of greg",
                "touchedBy": [
                  "call3"
                ],
                "types": [
                  "property"
                ],
                "unknown": true,
                "value": {
                  "marker": "unknown",
                  "response": true,
                  "text": "23",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "23",
                  "word": "23"
                },
                "wantsValue": true,
                "word": "age"
              },
              "word": "is"
            },
            "text": "what is the age of greg",
            "topLevel": true,
            "touchedBy": [
              "call2"
            ],
            "two": {
              "concept": true,
              "determiner": "the",
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "object": {
                "marker": "unknown",
                "text": "greg",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              },
              "objects": [
                {
                  "concept": true,
                  "determiner": "the",
                  "marker": "property",
                  "modifiers": [
                    "determiner"
                  ],
                  "pullFromContext": true,
                  "text": "the age",
                  "types": [
                    "property"
                  ],
                  "unknown": true,
                  "value": "age",
                  "wantsValue": true,
                  "word": "age"
                },
                {
                  "marker": "unknown",
                  "text": "greg",
                  "types": [
                    "object",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                }
              ],
              "pullFromContext": true,
              "response": true,
              "text": "the age of greg",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "age",
              "wantsValue": true,
              "word": "age"
            },
            "word": "is"
          },
          "paraphrases": "what is the age of greg?",
          "responses": [
            "the age of greg is 23"
          ]
        },
        {
          "context": {
            "default": true,
            "marker": "is",
            "one": {
              "concept": true,
              "determiner": "the",
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "object": {
                "marker": "unknown",
                "text": "greg",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              },
              "objects": [
                {
                  "concept": true,
                  "determiner": "the",
                  "marker": "property",
                  "modifiers": [
                    "determiner"
                  ],
                  "pullFromContext": true,
                  "text": "the age",
                  "types": [
                    "property"
                  ],
                  "unknown": true,
                  "value": "age",
                  "wantsValue": true,
                  "word": "age"
                },
                {
                  "marker": "unknown",
                  "text": "greg",
                  "types": [
                    "object",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                }
              ],
              "pullFromContext": true,
              "response": true,
              "text": "the age of greg",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "age",
              "wantsValue": true,
              "word": "age"
            },
            "text": "the age of greg is 23",
            "topLevel": true,
            "touchedBy": [
              "call2"
            ],
            "two": {
              "marker": "unknown",
              "response": true,
              "text": "23",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "23",
              "word": "23"
            },
            "word": "is"
          },
          "paraphrases": "the age of greg is 23",
          "responses": [
            ""
          ]
        }
      ]
    },
    "paraphrases": [
      "the age of greg is 23",
      "what is the age of greg?"
    ],
    "responses": [
      "",
      "the age of greg is 23"
    ]
  },
  "the name of greg is greg greg is readonly": {
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatable",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "infix"
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "postfix"
          }
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), query: ['what'], determined: true }",
          "id": "what",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: before[0], two: after[0] }",
          "id": "is",
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, ...context }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: 'a', modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, determined: true }",
          "hierarchy": [
            "queryable"
          ],
          "id": "it",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|has,have] ([property|]))"
        },
        {
          "pattern": "(<doesnt|doesnt,dont> ([have/0]))"
        },
        {
          "pattern": "(([queryable]) [is|is,are] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|is,are] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([what] ([whatable|])?)"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|does,do> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [] }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "default": true,
        "marker": "is",
        "one": {
          "concept": true,
          "determiner": "the",
          "marker": "property",
          "modifiers": [
            "determiner"
          ],
          "object": {
            "marker": "unknown",
            "text": "greg",
            "types": [
              "object",
              "unknown"
            ],
            "unknown": true,
            "value": "greg",
            "word": "greg"
          },
          "objects": [
            {
              "concept": true,
              "determiner": "the",
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "pullFromContext": true,
              "text": "the name",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "name",
              "wantsValue": true,
              "word": "name"
            },
            {
              "marker": "unknown",
              "text": "greg",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            }
          ],
          "pullFromContext": true,
          "response": true,
          "text": "the name of greg",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "name",
          "wantsValue": true,
          "word": "name"
        },
        "text": "the name of greg is greg",
        "topLevel": true,
        "touchedBy": [
          "call2"
        ],
        "two": {
          "marker": "unknown",
          "response": true,
          "text": "greg",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "greg",
          "word": "greg"
        },
        "word": "is"
      },
      {
        "default": true,
        "marker": "is",
        "one": {
          "marker": "unknown",
          "response": true,
          "text": "greg",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "greg",
          "word": "greg"
        },
        "text": "greg is readonly",
        "topLevel": true,
        "touchedBy": [
          "call16"
        ],
        "two": {
          "default": true,
          "marker": "readonly",
          "response": true,
          "text": "readonly",
          "types": [
            "readonly"
          ],
          "word": "readonly"
        },
        "word": "is"
      }
    ],
    "metadata": {
      "opChoices": [
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "readonly",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "readonly",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "readonly",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "readonly",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "readonly",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "op": [
            "readonly",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "readonly",
              0
            ]
          ]
        },
        {
          "op": [
            "propertyOf",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ]
          ]
        },
        {
          "op": [
            "propertyOf",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ]
          ]
        },
        {
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "is",
              1
            ]
          ]
        },
        {
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        },
        {
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "namespaced": {
        "0": {
          "children": {
            "name": [
              "greg"
            ]
          },
          "concepts": [
            "properties",
            "greg",
            "name"
          ],
          "parents": {
            "greg": [
              "name"
            ]
          },
          "properties": {
            "handlers": {
              "greg": {
              }
            },
            "initHandlers": [
            ],
            "root": {
              "greg": {
                "name": {
                  "has": true,
                  "value": {
                    "marker": "unknown",
                    "response": true,
                    "text": "greg",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "greg",
                    "word": "greg"
                  }
                }
              },
              "name": {
              }
            }
          },
          "property": {
            "name": [
              {
                "marker": "unknown",
                "response": true,
                "text": "greg",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              }
            ]
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "1": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "2": {
        }
      },
      "processed": [
        {
          "context": {
            "default": true,
            "marker": "is",
            "one": {
              "marker": "unknown",
              "response": true,
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "text": "greg is readonly",
            "topLevel": true,
            "touchedBy": [
              "call16"
            ],
            "two": {
              "default": true,
              "marker": "readonly",
              "response": true,
              "text": "readonly",
              "types": [
                "readonly"
              ],
              "word": "readonly"
            },
            "word": "is"
          },
          "paraphrases": "greg is readonly",
          "responses": [
            "",
            ""
          ]
        },
        {
          "context": {
            "default": true,
            "marker": "is",
            "one": {
              "concept": true,
              "determiner": "the",
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "object": {
                "marker": "unknown",
                "text": "greg",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              },
              "objects": [
                {
                  "concept": true,
                  "determiner": "the",
                  "marker": "property",
                  "modifiers": [
                    "determiner"
                  ],
                  "pullFromContext": true,
                  "text": "the name",
                  "types": [
                    "property"
                  ],
                  "unknown": true,
                  "value": "name",
                  "wantsValue": true,
                  "word": "name"
                },
                {
                  "marker": "unknown",
                  "text": "greg",
                  "types": [
                    "object",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                }
              ],
              "pullFromContext": true,
              "response": true,
              "text": "the name of greg",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "name",
              "wantsValue": true,
              "word": "name"
            },
            "text": "the name of greg is greg",
            "topLevel": true,
            "touchedBy": [
              "call2"
            ],
            "two": {
              "marker": "unknown",
              "response": true,
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "word": "is"
          },
          "paraphrases": "the name of greg is greg",
          "responses": [
            "",
            ""
          ]
        }
      ]
    },
    "paraphrases": [
      "the name of greg is greg",
      "greg is readonly"
    ],
    "responses": [
      "",
      ""
    ]
  },
  "the name of greg is greg greg is readonly the name of greg is fred": {
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatable",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "infix"
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "postfix"
          }
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), query: ['what'], determined: true }",
          "id": "what",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: before[0], two: after[0] }",
          "id": "is",
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, ...context }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: 'a', modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, determined: true }",
          "hierarchy": [
            "queryable"
          ],
          "id": "it",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|has,have] ([property|]))"
        },
        {
          "pattern": "(<doesnt|doesnt,dont> ([have/0]))"
        },
        {
          "pattern": "(([queryable]) [is|is,are] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|is,are] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([what] ([whatable|])?)"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|does,do> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [] }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "default": true,
        "marker": "is",
        "one": {
          "concept": true,
          "determiner": "the",
          "marker": "property",
          "modifiers": [
            "determiner"
          ],
          "object": {
            "marker": "unknown",
            "text": "greg",
            "types": [
              "object",
              "unknown"
            ],
            "unknown": true,
            "value": "greg",
            "word": "greg"
          },
          "objects": [
            {
              "concept": true,
              "determiner": "the",
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "pullFromContext": true,
              "text": "the name",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "name",
              "wantsValue": true,
              "word": "name"
            },
            {
              "marker": "unknown",
              "text": "greg",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            }
          ],
          "pullFromContext": true,
          "response": true,
          "text": "the name of greg",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "name",
          "wantsValue": true,
          "word": "name"
        },
        "text": "the name of greg is greg",
        "topLevel": true,
        "touchedBy": [
          "call2"
        ],
        "two": {
          "marker": "unknown",
          "response": true,
          "text": "greg",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "greg",
          "word": "greg"
        },
        "word": "is"
      },
      {
        "default": true,
        "marker": "is",
        "one": {
          "marker": "unknown",
          "response": true,
          "text": "greg",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "greg",
          "word": "greg"
        },
        "text": "greg is readonly",
        "topLevel": true,
        "touchedBy": [
          "call16"
        ],
        "two": {
          "default": true,
          "marker": "readonly",
          "response": true,
          "text": "readonly",
          "types": [
            "readonly"
          ],
          "word": "readonly"
        },
        "word": "is"
      },
      {
        "default": true,
        "marker": "is",
        "one": {
          "concept": true,
          "determiner": "the",
          "marker": "property",
          "modifiers": [
            "determiner"
          ],
          "object": {
            "marker": "unknown",
            "text": "greg",
            "types": [
              "object",
              "unknown"
            ],
            "unknown": true,
            "value": "greg",
            "word": "greg"
          },
          "objects": [
            {
              "concept": true,
              "determiner": "the",
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "pullFromContext": true,
              "text": "the name",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "name",
              "wantsValue": true,
              "word": "name"
            },
            {
              "marker": "unknown",
              "text": "greg",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            }
          ],
          "pullFromContext": true,
          "response": true,
          "text": "the name of greg",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "name",
          "wantsValue": true,
          "word": "name"
        },
        "response": [
          {
            "marker": "yesno",
            "paraphrase": true,
            "value": false
          },
          {
            "default": true,
            "marker": "is",
            "one": {
              "concept": true,
              "determiner": "the",
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "object": {
                "marker": "unknown",
                "paraphrase": true,
                "text": "object1",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              },
              "objects": [
                {
                  "concept": true,
                  "determiner": "the",
                  "marker": "property",
                  "modifiers": [
                    "determiner"
                  ],
                  "paraphrase": true,
                  "pullFromContext": true,
                  "text": "the property1",
                  "types": [
                    "property"
                  ],
                  "unknown": true,
                  "value": "name",
                  "wantsValue": true,
                  "word": "name"
                },
                {
                  "marker": "unknown",
                  "paraphrase": true,
                  "text": "object1",
                  "types": [
                    "object",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                }
              ],
              "paraphrase": true,
              "pullFromContext": true,
              "response": true,
              "text": "the property1 of object1",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "name",
              "wantsValue": true,
              "word": "name"
            },
            "paraphrase": true,
            "text": "the property1 of object1 is value1",
            "topLevel": true,
            "touchedBy": [
              "call2"
            ],
            "two": {
              "marker": "unknown",
              "response": true,
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "word": "is"
          }
        ],
        "text": "the name of greg is fred",
        "topLevel": true,
        "touchedBy": [
          "call26"
        ],
        "two": {
          "marker": "unknown",
          "response": true,
          "text": "fred",
          "types": [
            "unknown"
          ],
          "unknown": true,
          "value": "fred",
          "word": "fred"
        },
        "word": "is"
      }
    ],
    "metadata": {
      "opChoices": [
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "readonly",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "readonly",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "readonly",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "readonly",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "readonly",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "readonly",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "readonly",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ]
          ]
        },
        {
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "readonly",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "readonly",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "op": [
            "readonly",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "readonly",
              0
            ]
          ]
        },
        {
          "op": [
            "propertyOf",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ]
          ]
        },
        {
          "op": [
            "propertyOf",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "op": [
            "propertyOf",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "op": [
            "propertyOf",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ]
          ]
        },
        {
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "is",
              1
            ]
          ]
        },
        {
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "is",
              1
            ]
          ]
        },
        {
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        },
        {
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        },
        {
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "namespaced": {
        "0": {
          "children": {
            "name": [
              "greg"
            ]
          },
          "concepts": [
            "properties",
            "greg",
            "name"
          ],
          "parents": {
            "greg": [
              "name"
            ]
          },
          "properties": {
            "handlers": {
              "greg": {
              }
            },
            "initHandlers": [
            ],
            "root": {
              "greg": {
                "name": {
                  "has": true,
                  "value": {
                    "marker": "unknown",
                    "response": true,
                    "text": "greg",
                    "types": [
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "greg",
                    "word": "greg"
                  }
                }
              },
              "name": {
              }
            }
          },
          "property": {
            "name": [
              {
                "marker": "unknown",
                "response": true,
                "text": "greg",
                "types": [
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              }
            ]
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "1": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "2": {
        }
      },
      "processed": [
        {
          "context": {
            "default": true,
            "marker": "is",
            "one": {
              "concept": true,
              "determiner": "the",
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "object": {
                "marker": "unknown",
                "text": "greg",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              },
              "objects": [
                {
                  "concept": true,
                  "determiner": "the",
                  "marker": "property",
                  "modifiers": [
                    "determiner"
                  ],
                  "pullFromContext": true,
                  "text": "the name",
                  "types": [
                    "property"
                  ],
                  "unknown": true,
                  "value": "name",
                  "wantsValue": true,
                  "word": "name"
                },
                {
                  "marker": "unknown",
                  "text": "greg",
                  "types": [
                    "object",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                }
              ],
              "pullFromContext": true,
              "response": true,
              "text": "the name of greg",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "name",
              "wantsValue": true,
              "word": "name"
            },
            "response": [
              {
                "marker": "yesno",
                "paraphrase": true,
                "value": false
              },
              {
                "default": true,
                "marker": "is",
                "one": {
                  "concept": true,
                  "determiner": "the",
                  "marker": "property",
                  "modifiers": [
                    "determiner"
                  ],
                  "object": {
                    "marker": "unknown",
                    "paraphrase": true,
                    "text": "object1",
                    "types": [
                      "object",
                      "unknown"
                    ],
                    "unknown": true,
                    "value": "greg",
                    "word": "greg"
                  },
                  "objects": [
                    {
                      "concept": true,
                      "determiner": "the",
                      "marker": "property",
                      "modifiers": [
                        "determiner"
                      ],
                      "paraphrase": true,
                      "pullFromContext": true,
                      "text": "the property1",
                      "types": [
                        "property"
                      ],
                      "unknown": true,
                      "value": "name",
                      "wantsValue": true,
                      "word": "name"
                    },
                    {
                      "marker": "unknown",
                      "paraphrase": true,
                      "text": "object1",
                      "types": [
                        "object",
                        "unknown"
                      ],
                      "unknown": true,
                      "value": "greg",
                      "word": "greg"
                    }
                  ],
                  "paraphrase": true,
                  "pullFromContext": true,
                  "response": true,
                  "text": "the property1 of object1",
                  "types": [
                    "property"
                  ],
                  "unknown": true,
                  "value": "name",
                  "wantsValue": true,
                  "word": "name"
                },
                "paraphrase": true,
                "text": "the property1 of object1 is value1",
                "topLevel": true,
                "touchedBy": [
                  "call2"
                ],
                "two": {
                  "marker": "unknown",
                  "response": true,
                  "text": "greg",
                  "types": [
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                },
                "word": "is"
              }
            ],
            "text": "the name of greg is fred",
            "topLevel": true,
            "touchedBy": [
              "call26"
            ],
            "two": {
              "marker": "unknown",
              "response": true,
              "text": "fred",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "fred",
              "word": "fred"
            },
            "word": "is"
          },
          "paraphrases": "the name of greg is fred",
          "responses": [
            "",
            "",
            "no the name of greg is greg"
          ]
        },
        {
          "context": {
            "default": true,
            "marker": "is",
            "one": {
              "marker": "unknown",
              "response": true,
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "text": "greg is readonly",
            "topLevel": true,
            "touchedBy": [
              "call16"
            ],
            "two": {
              "default": true,
              "marker": "readonly",
              "response": true,
              "text": "readonly",
              "types": [
                "readonly"
              ],
              "word": "readonly"
            },
            "word": "is"
          },
          "paraphrases": "greg is readonly",
          "responses": [
            "",
            "",
            "no the name of greg is greg"
          ]
        },
        {
          "context": {
            "default": true,
            "marker": "is",
            "one": {
              "concept": true,
              "determiner": "the",
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "object": {
                "marker": "unknown",
                "text": "greg",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              },
              "objects": [
                {
                  "concept": true,
                  "determiner": "the",
                  "marker": "property",
                  "modifiers": [
                    "determiner"
                  ],
                  "pullFromContext": true,
                  "text": "the name",
                  "types": [
                    "property"
                  ],
                  "unknown": true,
                  "value": "name",
                  "wantsValue": true,
                  "word": "name"
                },
                {
                  "marker": "unknown",
                  "text": "greg",
                  "types": [
                    "object",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                }
              ],
              "pullFromContext": true,
              "response": true,
              "text": "the name of greg",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "name",
              "wantsValue": true,
              "word": "name"
            },
            "text": "the name of greg is greg",
            "topLevel": true,
            "touchedBy": [
              "call2"
            ],
            "two": {
              "marker": "unknown",
              "response": true,
              "text": "greg",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            },
            "word": "is"
          },
          "paraphrases": "the name of greg is greg",
          "responses": [
            "",
            "",
            "no the name of greg is greg"
          ]
        }
      ]
    },
    "paraphrases": [
      "the name of greg is greg",
      "greg is readonly",
      "the name of greg is fred"
    ],
    "responses": [
      "",
      "",
      "no the name of greg is greg"
    ]
  },
  "the property": {
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatable",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "infix"
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "postfix"
          }
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), query: ['what'], determined: true }",
          "id": "what",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: before[0], two: after[0] }",
          "id": "is",
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, ...context }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: 'a', modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, determined: true }",
          "hierarchy": [
            "queryable"
          ],
          "id": "it",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|has,have] ([property|]))"
        },
        {
          "pattern": "(<doesnt|doesnt,dont> ([have/0]))"
        },
        {
          "pattern": "(([queryable]) [is|is,are] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|is,are] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([what] ([whatable|])?)"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|does,do> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [] }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "concept": true,
        "default": true,
        "determiner": "the",
        "marker": "property",
        "modifiers": [
          "determiner"
        ],
        "pullFromContext": true,
        "text": "the property",
        "topLevel": true,
        "types": [
          "property"
        ],
        "wantsValue": true,
        "word": "property"
      }
    ],
    "metadata": {
      "opChoices": [
        {
          "op": [
            "property",
            0
          ],
          "ops": [
            [
              "property",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "the",
              0
            ]
          ]
        }
      ]
    },
    "objects": {
      "namespaced": {
        "0": {
          "children": {
          },
          "concepts": [
            "properties"
          ],
          "parents": {
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
            }
          },
          "property": {
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "1": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "2": {
        }
      },
      "processed": [
        {
          "context": {
            "concept": true,
            "default": true,
            "determiner": "the",
            "marker": "property",
            "modifiers": [
              "determiner"
            ],
            "pullFromContext": true,
            "text": "the property",
            "topLevel": true,
            "types": [
              "property"
            ],
            "wantsValue": true,
            "word": "property"
          },
          "paraphrases": "the property",
          "responses": [
            ""
          ]
        }
      ]
    },
    "paraphrases": [
      "the property"
    ],
    "responses": [
      ""
    ]
  },
  "the property of object": {
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatable",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "infix"
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "postfix"
          }
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), query: ['what'], determined: true }",
          "id": "what",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: before[0], two: after[0] }",
          "id": "is",
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, ...context }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: 'a', modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, determined: true }",
          "hierarchy": [
            "queryable"
          ],
          "id": "it",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|has,have] ([property|]))"
        },
        {
          "pattern": "(<doesnt|doesnt,dont> ([have/0]))"
        },
        {
          "pattern": "(([queryable]) [is|is,are] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|is,are] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([what] ([whatable|])?)"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|does,do> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [] }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "concept": true,
        "default": true,
        "determiner": "the",
        "marker": "property",
        "modifiers": [
          "determiner"
        ],
        "object": {
          "default": true,
          "marker": "object",
          "text": "object",
          "types": [
            "object"
          ],
          "word": "object"
        },
        "objects": [
          {
            "concept": true,
            "default": true,
            "determiner": "the",
            "marker": "property",
            "modifiers": [
              "determiner"
            ],
            "pullFromContext": true,
            "text": "the property",
            "types": [
              "property"
            ],
            "wantsValue": true,
            "word": "property"
          },
          {
            "default": true,
            "marker": "object",
            "text": "object",
            "types": [
              "object"
            ],
            "word": "object"
          }
        ],
        "pullFromContext": true,
        "text": "the property of object",
        "topLevel": true,
        "types": [
          "property"
        ],
        "wantsValue": true,
        "word": "property"
      }
    ],
    "metadata": {
      "opChoices": [
        {
          "op": [
            "property",
            0
          ],
          "ops": [
            [
              "object",
              0
            ],
            [
              "property",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "op": [
            "object",
            0
          ],
          "ops": [
            [
              "object",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "op": [
            "propertyOf",
            0
          ],
          "ops": [
            [
              "propertyOf",
              0
            ]
          ]
        },
        {
          "op": [
            "propertyOf",
            1
          ],
          "ops": [
            [
              "propertyOf",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "namespaced": {
        "0": {
          "children": {
          },
          "concepts": [
            "properties"
          ],
          "parents": {
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
            }
          },
          "property": {
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "1": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "2": {
        }
      },
      "processed": [
        {
          "context": {
            "concept": true,
            "default": true,
            "determiner": "the",
            "marker": "property",
            "modifiers": [
              "determiner"
            ],
            "object": {
              "default": true,
              "marker": "object",
              "text": "object",
              "types": [
                "object"
              ],
              "word": "object"
            },
            "objects": [
              {
                "concept": true,
                "default": true,
                "determiner": "the",
                "marker": "property",
                "modifiers": [
                  "determiner"
                ],
                "pullFromContext": true,
                "text": "the property",
                "types": [
                  "property"
                ],
                "wantsValue": true,
                "word": "property"
              },
              {
                "default": true,
                "marker": "object",
                "text": "object",
                "types": [
                  "object"
                ],
                "word": "object"
              }
            ],
            "pullFromContext": true,
            "text": "the property of object",
            "topLevel": true,
            "types": [
              "property"
            ],
            "wantsValue": true,
            "word": "property"
          },
          "paraphrases": "the property of object",
          "responses": [
            ""
          ]
        }
      ]
    },
    "paraphrases": [
      "the property of object"
    ],
    "responses": [
      ""
    ]
  },
  "the property of the object": {
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatable",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "infix"
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "postfix"
          }
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), query: ['what'], determined: true }",
          "id": "what",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: before[0], two: after[0] }",
          "id": "is",
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, ...context }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: 'a', modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, determined: true }",
          "hierarchy": [
            "queryable"
          ],
          "id": "it",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|has,have] ([property|]))"
        },
        {
          "pattern": "(<doesnt|doesnt,dont> ([have/0]))"
        },
        {
          "pattern": "(([queryable]) [is|is,are] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|is,are] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([what] ([whatable|])?)"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|does,do> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [] }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "concept": true,
        "default": true,
        "determiner": "the",
        "marker": "property",
        "modifiers": [
          "determiner"
        ],
        "object": {
          "concept": true,
          "default": true,
          "determiner": "the",
          "marker": "object",
          "modifiers": [
            "determiner"
          ],
          "pullFromContext": true,
          "text": "the object",
          "types": [
            "object"
          ],
          "wantsValue": true,
          "word": "object"
        },
        "objects": [
          {
            "concept": true,
            "default": true,
            "determiner": "the",
            "marker": "property",
            "modifiers": [
              "determiner"
            ],
            "pullFromContext": true,
            "text": "the property",
            "types": [
              "property"
            ],
            "wantsValue": true,
            "word": "property"
          },
          {
            "concept": true,
            "default": true,
            "determiner": "the",
            "marker": "object",
            "modifiers": [
              "determiner"
            ],
            "pullFromContext": true,
            "text": "the object",
            "types": [
              "object"
            ],
            "wantsValue": true,
            "word": "object"
          }
        ],
        "pullFromContext": true,
        "text": "the property of the object",
        "topLevel": true,
        "types": [
          "property"
        ],
        "wantsValue": true,
        "word": "property"
      }
    ],
    "metadata": {
      "opChoices": [
        {
          "op": [
            "property",
            0
          ],
          "ops": [
            [
              "object",
              0
            ],
            [
              "property",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "op": [
            "object",
            0
          ],
          "ops": [
            [
              "object",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "op": [
            "propertyOf",
            0
          ],
          "ops": [
            [
              "propertyOf",
              0
            ]
          ]
        },
        {
          "op": [
            "propertyOf",
            1
          ],
          "ops": [
            [
              "propertyOf",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "namespaced": {
        "0": {
          "children": {
          },
          "concepts": [
            "properties"
          ],
          "parents": {
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
            }
          },
          "property": {
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "1": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "2": {
        }
      },
      "processed": [
        {
          "context": {
            "concept": true,
            "default": true,
            "determiner": "the",
            "marker": "property",
            "modifiers": [
              "determiner"
            ],
            "object": {
              "concept": true,
              "default": true,
              "determiner": "the",
              "marker": "object",
              "modifiers": [
                "determiner"
              ],
              "pullFromContext": true,
              "text": "the object",
              "types": [
                "object"
              ],
              "wantsValue": true,
              "word": "object"
            },
            "objects": [
              {
                "concept": true,
                "default": true,
                "determiner": "the",
                "marker": "property",
                "modifiers": [
                  "determiner"
                ],
                "pullFromContext": true,
                "text": "the property",
                "types": [
                  "property"
                ],
                "wantsValue": true,
                "word": "property"
              },
              {
                "concept": true,
                "default": true,
                "determiner": "the",
                "marker": "object",
                "modifiers": [
                  "determiner"
                ],
                "pullFromContext": true,
                "text": "the object",
                "types": [
                  "object"
                ],
                "wantsValue": true,
                "word": "object"
              }
            ],
            "pullFromContext": true,
            "text": "the property of the object",
            "topLevel": true,
            "types": [
              "property"
            ],
            "wantsValue": true,
            "word": "property"
          },
          "paraphrases": "the property of the object",
          "responses": [
            ""
          ]
        }
      ]
    },
    "paraphrases": [
      "the property of the object"
    ],
    "responses": [
      ""
    ]
  },
  "what is the age of greg": {
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatable",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "infix"
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "postfix"
          }
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), query: ['what'], determined: true }",
          "id": "what",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: before[0], two: after[0] }",
          "id": "is",
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, ...context }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: 'a', modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, determined: true }",
          "hierarchy": [
            "queryable"
          ],
          "id": "it",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|has,have] ([property|]))"
        },
        {
          "pattern": "(<doesnt|doesnt,dont> ([have/0]))"
        },
        {
          "pattern": "(([queryable]) [is|is,are] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|is,are] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([what] ([whatable|])?)"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|does,do> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [] }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "default": true,
        "marker": "is",
        "one": {
          "default": true,
          "determined": true,
          "marker": "what",
          "query": [
            "what"
          ],
          "response": true,
          "text": "what",
          "types": [
            "what"
          ],
          "word": "what"
        },
        "query": [
          "what"
        ],
        "response": {
          "verbatim": "What \"greg\" means is unknown"
        },
        "text": "what is the age of greg",
        "topLevel": true,
        "touchedBy": [
          "call2"
        ],
        "two": {
          "concept": true,
          "determiner": "the",
          "marker": "property",
          "modifiers": [
            "determiner"
          ],
          "object": {
            "marker": "unknown",
            "text": "greg",
            "types": [
              "object",
              "unknown"
            ],
            "unknown": true,
            "value": "greg",
            "word": "greg"
          },
          "objects": [
            {
              "concept": true,
              "determiner": "the",
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "pullFromContext": true,
              "text": "the age",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "age",
              "wantsValue": true,
              "word": "age"
            },
            {
              "marker": "unknown",
              "text": "greg",
              "types": [
                "object",
                "unknown"
              ],
              "unknown": true,
              "value": "greg",
              "word": "greg"
            }
          ],
          "pullFromContext": true,
          "response": true,
          "text": "the age of greg",
          "types": [
            "property"
          ],
          "unknown": true,
          "value": "age",
          "wantsValue": true,
          "word": "age"
        },
        "word": "is"
      }
    ],
    "metadata": {
      "opChoices": [
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "unknown",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "unknown",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "what",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "op": [
            "propertyOf",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ]
          ]
        },
        {
          "op": [
            "propertyOf",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ]
          ]
        },
        {
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "namespaced": {
        "0": {
          "children": {
          },
          "concepts": [
            "properties"
          ],
          "parents": {
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
            }
          },
          "property": {
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "1": {
          "mentioned": [
            {
              "default": true,
              "determined": true,
              "marker": "what",
              "query": [
                "what"
              ],
              "response": true,
              "text": "what",
              "types": [
                "what"
              ],
              "word": "what"
            }
          ],
          "variables": {
          }
        },
        "2": {
        }
      },
      "processed": [
        {
          "context": {
            "default": true,
            "marker": "is",
            "one": {
              "default": true,
              "determined": true,
              "marker": "what",
              "query": [
                "what"
              ],
              "response": true,
              "text": "what",
              "types": [
                "what"
              ],
              "word": "what"
            },
            "query": [
              "what"
            ],
            "response": {
              "verbatim": "What \"greg\" means is unknown"
            },
            "text": "what is the age of greg",
            "topLevel": true,
            "touchedBy": [
              "call2"
            ],
            "two": {
              "concept": true,
              "determiner": "the",
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "object": {
                "marker": "unknown",
                "text": "greg",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "greg",
                "word": "greg"
              },
              "objects": [
                {
                  "concept": true,
                  "determiner": "the",
                  "marker": "property",
                  "modifiers": [
                    "determiner"
                  ],
                  "pullFromContext": true,
                  "text": "the age",
                  "types": [
                    "property"
                  ],
                  "unknown": true,
                  "value": "age",
                  "wantsValue": true,
                  "word": "age"
                },
                {
                  "marker": "unknown",
                  "text": "greg",
                  "types": [
                    "object",
                    "unknown"
                  ],
                  "unknown": true,
                  "value": "greg",
                  "word": "greg"
                }
              ],
              "pullFromContext": true,
              "response": true,
              "text": "the age of greg",
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "age",
              "wantsValue": true,
              "word": "age"
            },
            "word": "is"
          },
          "paraphrases": "what is the age of greg?",
          "responses": [
            "What \"greg\" means is unknown"
          ]
        }
      ]
    },
    "paraphrases": [
      "what is the age of greg?"
    ],
    "responses": [
      "What \"greg\" means is unknown"
    ]
  },
  "what is the property of object": {
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatable",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "infix"
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "postfix"
          }
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), query: ['what'], determined: true }",
          "id": "what",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: before[0], two: after[0] }",
          "id": "is",
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, ...context }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: 'a', modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, determined: true }",
          "hierarchy": [
            "queryable"
          ],
          "id": "it",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|has,have] ([property|]))"
        },
        {
          "pattern": "(<doesnt|doesnt,dont> ([have/0]))"
        },
        {
          "pattern": "(([queryable]) [is|is,are] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|is,are] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([what] ([whatable|])?)"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|does,do> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [] }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "default": true,
        "marker": "is",
        "one": {
          "default": true,
          "determined": true,
          "marker": "what",
          "query": [
            "what"
          ],
          "response": true,
          "text": "what",
          "types": [
            "what"
          ],
          "word": "what"
        },
        "query": [
          "what"
        ],
        "response": {
          "verbatim": "There is no property the property of object"
        },
        "text": "what is the property of object",
        "topLevel": true,
        "touchedBy": [
          "call2"
        ],
        "two": {
          "concept": true,
          "default": true,
          "determiner": "the",
          "marker": "property",
          "modifiers": [
            "determiner"
          ],
          "object": {
            "default": true,
            "marker": "object",
            "text": "object",
            "types": [
              "object"
            ],
            "word": "object"
          },
          "objects": [
            {
              "concept": true,
              "default": true,
              "determiner": "the",
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "pullFromContext": true,
              "text": "the property",
              "types": [
                "property"
              ],
              "wantsValue": true,
              "word": "property"
            },
            {
              "default": true,
              "marker": "object",
              "text": "object",
              "types": [
                "object"
              ],
              "word": "object"
            }
          ],
          "pullFromContext": true,
          "response": true,
          "text": "the property of object",
          "types": [
            "property"
          ],
          "wantsValue": true,
          "word": "property"
        },
        "word": "is"
      }
    ],
    "metadata": {
      "opChoices": [
        {
          "op": [
            "property",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "object",
              0
            ],
            [
              "property",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "object",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "object",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "what",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ],
            [
              "what",
              0
            ]
          ]
        },
        {
          "op": [
            "the",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ],
            [
              "the",
              0
            ]
          ]
        },
        {
          "op": [
            "propertyOf",
            0
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              0
            ]
          ]
        },
        {
          "op": [
            "propertyOf",
            1
          ],
          "ops": [
            [
              "is",
              0
            ],
            [
              "propertyOf",
              1
            ]
          ]
        },
        {
          "op": [
            "is",
            0
          ],
          "ops": [
            [
              "is",
              0
            ]
          ]
        },
        {
          "op": [
            "is",
            1
          ],
          "ops": [
            [
              "is",
              1
            ]
          ]
        }
      ]
    },
    "objects": {
      "namespaced": {
        "0": {
          "children": {
          },
          "concepts": [
            "properties"
          ],
          "parents": {
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
            }
          },
          "property": {
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "1": {
          "mentioned": [
            {
              "default": true,
              "determined": true,
              "marker": "what",
              "query": [
                "what"
              ],
              "response": true,
              "text": "what",
              "types": [
                "what"
              ],
              "word": "what"
            }
          ],
          "variables": {
          }
        },
        "2": {
        }
      },
      "processed": [
        {
          "context": {
            "default": true,
            "marker": "is",
            "one": {
              "default": true,
              "determined": true,
              "marker": "what",
              "query": [
                "what"
              ],
              "response": true,
              "text": "what",
              "types": [
                "what"
              ],
              "word": "what"
            },
            "query": [
              "what"
            ],
            "response": {
              "verbatim": "There is no property the property of object"
            },
            "text": "what is the property of object",
            "topLevel": true,
            "touchedBy": [
              "call2"
            ],
            "two": {
              "concept": true,
              "default": true,
              "determiner": "the",
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "object": {
                "default": true,
                "marker": "object",
                "text": "object",
                "types": [
                  "object"
                ],
                "word": "object"
              },
              "objects": [
                {
                  "concept": true,
                  "default": true,
                  "determiner": "the",
                  "marker": "property",
                  "modifiers": [
                    "determiner"
                  ],
                  "pullFromContext": true,
                  "text": "the property",
                  "types": [
                    "property"
                  ],
                  "wantsValue": true,
                  "word": "property"
                },
                {
                  "default": true,
                  "marker": "object",
                  "text": "object",
                  "types": [
                    "object"
                  ],
                  "word": "object"
                }
              ],
              "pullFromContext": true,
              "response": true,
              "text": "the property of object",
              "types": [
                "property"
              ],
              "wantsValue": true,
              "word": "property"
            },
            "word": "is"
          },
          "paraphrases": "what is the property of object?",
          "responses": [
            "There is no property the property of object"
          ]
        }
      ]
    },
    "paraphrases": [
      "what is the property of object?"
    ],
    "responses": [
      "There is no property the property of object"
    ]
  },
  "whose property": {
    "config": {
      "bridges": [
        {
          "bridge": "{ ...next(operator) }",
          "id": "hierarchyAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), modifier: before[0], concept: after[0] }",
          "id": "modifies",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "readonly",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "concept",
          "level": 0
        },
        {
          "bridge": "{ ...context, negation: true }*",
          "id": "doesnt",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], property: after[0], do: { left: 'object', right: 'property' } }",
          "id": "have",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "have",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "property",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "object",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), object: before[0], objects: before }",
          "id": "possession",
          "inverted": true,
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator.object, objects: append(default(after[0].objects, after), operator.objects), marker: operator('property', 0) }",
          "id": "possession",
          "inverted": true,
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), object: after[0], objects: after }",
          "id": "propertyOf",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], object: operator.object, objects: append(default(before[0].objects, before), operator.objects) }",
          "id": "propertyOf",
          "level": 1
        },
        {
          "bridge": "{ ...after[0], query: true, whose: \"whose\", modifiers: append([\"whose\"], after[0].modifiers)}",
          "id": "whose",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], object: operator, objects: [after[0], operator] }",
          "id": "objectPrefix",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "debug23",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "whatable",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "list",
          "level": 0,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "infix"
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "list",
          "level": 1,
          "selector": {
            "match": "same",
            "passthrough": true,
            "type": "postfix"
          }
        },
        {
          "bridge": "{ ...next(operator), type: after[0] }",
          "id": "be",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "briefOrWordy",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "notAble",
          "level": 0
        },
        {
          "bridge": "{ ...after, negated: true }",
          "id": "not",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "yesno",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator), unknown: true }",
          "id": "unknown",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), query: ['what'], determined: true }",
          "id": "what",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "queryable",
          "level": 0
        },
        {
          "bridge": "{ ...before[0], query: [before.marker] }",
          "id": "questionMark",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), one: before[0], two: after[0] }",
          "id": "is",
          "level": 0,
          "queryBridge": "{ ...next(operator), one: after[0], two: after[1], query: true }"
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "is",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 1
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "canBeDoQuestion",
          "level": 2
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "doesAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), before: before[0] }",
          "id": "doesAble",
          "level": 1
        },
        {
          "bridge": "{ query: true, ...context }*",
          "id": "does",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: true, concept: true, wantsValue: true, determiner: \"the\", modifiers: append([\"determiner\"], after[0].modifiers)}",
          "id": "the",
          "level": 0
        },
        {
          "bridge": "{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: 'a', modifiers: append(['determiner'], after[0].modifiers) }",
          "id": "a",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "theAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), pullFromContext: true, determined: true }",
          "hierarchy": [
            "queryable"
          ],
          "id": "it",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), value: append(before, after) }",
          "id": "orList",
          "level": 0,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true,
            "right": [
              {
                "marker": "orAble"
              }
            ]
          }
        },
        {
          "bridge": "{ ...operator, value: append(before, operator.value) }",
          "id": "orList",
          "level": 1,
          "selector": {
            "left": [
              {
                "marker": "orAble"
              }
            ],
            "passthrough": true
          }
        },
        {
          "bridge": "{ ...next(operator), from: before[0], to: after[0] }",
          "id": "means",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), antecedant: after[0], consequence: after[1].consequence }",
          "id": "if",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator), consequence: after[0] }",
          "id": "then",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "ifAble",
          "level": 0
        },
        {
          "bridge": "{ ...next(operator) }",
          "id": "orAble",
          "level": 0
        }
      ],
      "operators": [
        {
          "pattern": "([hierarchyAble|])"
        },
        {
          "pattern": "(([property]) <([propertyOf|of] ([object]))>)"
        },
        {
          "pattern": "(<whose> ([property]))"
        },
        {
          "pattern": "([concept])"
        },
        {
          "pattern": "((modifier) [modifies] (concept))"
        },
        {
          "pattern": "([readonly])"
        },
        {
          "pattern": "(<objectPrefix|> ([property]))"
        },
        {
          "pattern": "(<(([object]) [possession|])> ([property|]))"
        },
        {
          "pattern": "(([object|]) [have|has,have] ([property|]))"
        },
        {
          "pattern": "(<doesnt|doesnt,dont> ([have/0]))"
        },
        {
          "pattern": "(([queryable]) [is|is,are] ([queryable|]))"
        },
        {
          "pattern": "([is:queryBridge|is,are] ([queryable]) ([queryable]))"
        },
        {
          "pattern": "([it])"
        },
        {
          "pattern": "([what] ([whatable|])?)"
        },
        {
          "pattern": "(<the|> ([theAble|]))"
        },
        {
          "pattern": "(<a|a,an> ([theAble|]))"
        },
        {
          "pattern": "([unknown])"
        },
        {
          "pattern": "([not] ([notAble|]))"
        },
        {
          "pattern": "([be] ([briefOrWordy|]))"
        },
        {
          "pattern": "([([canBeQuestion])])"
        },
        {
          "pattern": "(([canBeQuestion/1,2]) <questionMark|>)"
        },
        {
          "pattern": "(([what]) [(<does> ([doesAble|]))])"
        },
        {
          "pattern": "([canBeDoQuestion])"
        },
        {
          "pattern": "(<does|does,do> ([canBeDoQuestion/0,1]))"
        },
        {
          "pattern": "(([theAble|]) [list|and] ([theAble|]))"
        },
        {
          "pattern": "([yesno|])"
        },
        {
          "pattern": "([debug23])"
        },
        {
          "pattern": "((phrase) [means] (phrase))"
        },
        {
          "pattern": "([if] ([ifAble]) ([then] ([ifAble])))"
        },
        {
          "pattern": "(([orAble|]) [orList|or] ([orAble|]))"
        }
      ],
      "words": {
        " 's": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "<<possession>>": [
          {
            "id": "possession",
            "initial": "{ value: 'possession' }"
          }
        ],
        "?": [
          {
            "id": "questionMark",
            "initial": "{}"
          }
        ],
        "brief": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'brief' }"
          }
        ],
        "have": [
          {
            "id": "have",
            "initial": "{ doesable: true }"
          }
        ],
        "no": [
          {
            "id": "yesno",
            "initial": "{ value: false }"
          }
        ],
        "the": [
          {
            "id": "the",
            "initial": "{ modifiers: [] }"
          }
        ],
        "who": [
          {
            "id": "what",
            "initial": "{ modifiers: [] }"
          }
        ],
        "wordy": [
          {
            "id": "briefOrWordy",
            "initial": "{ value: 'wordy' }"
          }
        ],
        "yes": [
          {
            "id": "yesno",
            "initial": "{ value: true }"
          }
        ]
      }
    },
    "contexts": [
      {
        "default": true,
        "marker": "property",
        "modifiers": [
          "whose"
        ],
        "query": true,
        "text": "whose property",
        "topLevel": true,
        "types": [
          "property"
        ],
        "whose": "whose",
        "word": "property"
      }
    ],
    "metadata": {
      "opChoices": [
        {
          "op": [
            "property",
            0
          ],
          "ops": [
            [
              "property",
              0
            ],
            [
              "whose",
              0
            ]
          ]
        },
        {
          "op": [
            "whose",
            0
          ],
          "ops": [
            [
              "whose",
              0
            ]
          ]
        }
      ]
    },
    "objects": {
      "namespaced": {
        "0": {
          "children": {
          },
          "concepts": [
            "properties"
          ],
          "parents": {
          },
          "properties": {
            "handlers": {
            },
            "initHandlers": [
            ],
            "root": {
            }
          },
          "property": {
          },
          "relations": [
          ],
          "valueToWords": {
          }
        },
        "1": {
          "mentioned": [
          ],
          "variables": {
          }
        },
        "2": {
        }
      },
      "processed": [
        {
          "context": {
            "default": true,
            "marker": "property",
            "modifiers": [
              "whose"
            ],
            "query": true,
            "text": "whose property",
            "topLevel": true,
            "types": [
              "property"
            ],
            "whose": "whose",
            "word": "property"
          },
          "paraphrases": "whose property",
          "responses": [
            ""
          ]
        }
      ]
    },
    "paraphrases": [
      "whose property"
    ],
    "responses": [
      ""
    ]
  }
}