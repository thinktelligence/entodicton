{
  "queries": [
    "pistols rifles grenades mines and shotguns are weapons",
    "a weapon is equipable"
  ],
  "resultss": [
    {
      "hierarchy": [
        [
          "a",
          "articlePOS"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "isEd",
          "isEd"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "isEd"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "number"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ]
      ],
      "logs": [
        "Undefined word 'pistols'",
        "Undefined word 'rifles'",
        "Undefined word 'grenades'",
        "Undefined word 'mines'",
        "Undefined word 'shotguns'",
        "Undefined word 'weapons'",
        "Applying implicit\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 6}, text: pistols, value: pistols, word: pistols})\n\n\n",
        "Applying implicit\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 13}, text: rifles, value: rifles, word: rifles})\n\n\n",
        "Applying implicit\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 22}, text: grenades, value: grenades, word: grenades})\n\n\n",
        "Applying implicit\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 24, 'end': 28}, text: mines, value: mines, word: mines})\n\n\n",
        "Applying implicit\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/0, PASS, None, evaluator(Bridge('{ ...next(operator), value: append(before, after) }')), variables({}) bridge(bridge)), range: {'start': 30, 'end': 32}, text: and, word: and})\n\n\n",
        "Applying implicit\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 34, 'end': 41}, text: shotguns, value: shotguns, word: shotguns})\n\n\n",
        "Applying implicit\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 43, 'end': 45}, text: are, word: are})\n\n\n",
        "Applying implicit\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 47, 'end': 53}, text: weapons, value: weapons, word: weapons})\n\n\n",
        "Applying implicit\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['unknown', 'object', 'theAble', 'hierarchyAble', 'number', 'queryable', 'notAble']}) bridge(bridge)), range: {'start': 24, 'end': 41}, text: mines and shotguns, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 24, 'end': 28}, text: mines, value: mines, word: mines}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 34, 'end': 41}, text: shotguns, value: shotguns, word: shotguns})], word: and})\n\n\n",
        "Applying implicit\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['unknown', 'object', 'theAble', 'hierarchyAble', 'number', 'queryable', 'notAble']}) bridge(bridge)), range: {'start': 15, 'end': 41}, text: grenades mines and shotguns, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 22}, text: grenades, value: grenades, word: grenades}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 24, 'end': 28}, text: mines, value: mines, word: mines}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 34, 'end': 41}, text: shotguns, value: shotguns, word: shotguns})], word: and})\n\n\n",
        "Applying implicit\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['unknown', 'object', 'theAble', 'hierarchyAble', 'number', 'queryable', 'notAble']}) bridge(bridge)), range: {'start': 8, 'end': 41}, text: rifles grenades mines and shotguns, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 13}, text: rifles, value: rifles, word: rifles}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 22}, text: grenades, value: grenades, word: grenades}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 24, 'end': 28}, text: mines, value: mines, word: mines}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 34, 'end': 41}, text: shotguns, value: shotguns, word: shotguns})], word: and})\n\n\n",
        "Applying implicit\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['unknown', 'object', 'theAble', 'hierarchyAble', 'number', 'queryable', 'notAble']}) bridge(bridge)), range: {'start': 0, 'end': 41}, text: pistols rifles grenades mines and shotguns, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 6}, text: pistols, value: pistols, word: pistols}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 13}, text: rifles, value: rifles, word: rifles}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 22}, text: grenades, value: grenades, word: grenades}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 24, 'end': 28}, text: mines, value: mines, word: mines}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 34, 'end': 41}, text: shotguns, value: shotguns, word: shotguns})], word: and})\n\n\n",
        "Counter == 5. Applying Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['unknown', 'object', 'theAble', 'hierarchyAble', 'number', 'queryable', 'notAble']}) bridge(bridge)) failed due to the matchers [Type(variable: 'type')] not being present",
        "Applying implicit\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['unknown', 'object', 'theAble', 'hierarchyAble', 'number', 'queryable', 'notAble']}) bridge(bridge)), range: {'start': 0, 'end': 41}, value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 6}, text: pistols, unknown: True, value: pistols, word: pistols}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 13}, text: rifles, unknown: True, value: rifles, word: rifles}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 22}, text: grenades, unknown: True, value: grenades, word: grenades}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 24, 'end': 28}, text: mines, unknown: True, value: mines, word: mines}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 34, 'end': 41}, text: shotguns, unknown: True, value: shotguns, word: shotguns})]})\n\n\n",
        "Counter == 6. Applying Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['unknown', 'object', 'theAble', 'hierarchyAble', 'number', 'queryable', 'notAble']}) bridge(bridge)) failed due to the matchers [Type(variable: 'type')] not being present",
        "Applying implicit\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 47, 'end': 53}, text: weapons, unknown: True, value: weapons, word: weapons})\n\n\n",
        "Counter == 7. Applying Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['unknown', 'object', 'theAble', 'hierarchyAble', 'number', 'queryable', 'notAble']}) bridge(bridge)) failed due to the matchers [Type(variable: 'type')] not being present",
        "Applying implicit\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['unknown', 'object', 'theAble', 'hierarchyAble', 'number', 'queryable', 'notAble']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 53}, types: ['unknown'], value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 6}, text: pistols, unknown: True, value: pistols, word: pistols}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 13}, text: rifles, unknown: True, value: rifles, word: rifles}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 22}, text: grenades, unknown: True, value: grenades, word: grenades}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 24, 'end': 28}, text: mines, unknown: True, value: mines, word: mines}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 34, 'end': 41}, text: shotguns, unknown: True, value: shotguns, word: shotguns})]}), range: {'start': 0, 'end': 53}, text:  are weapons, two: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 47, 'end': 53}, text: weapons, types: ['unknown'], unknown: True, value: weapons, word: weapons}), word: are})\n\n\n",
        "Applying implicit\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/2, None, evaluator(None), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['unknown', 'object', 'theAble', 'hierarchyAble', 'number', 'queryable', 'notAble']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 53}, types: ['unknown'], value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 6}, text: pistols, unknown: True, value: pistols, word: pistols}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 13}, text: rifles, unknown: True, value: rifles, word: rifles}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 22}, text: grenades, unknown: True, value: grenades, word: grenades}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 24, 'end': 28}, text: mines, unknown: True, value: mines, word: mines}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 34, 'end': 41}, text: shotguns, unknown: True, value: shotguns, word: shotguns})]}), range: {'start': 0, 'end': 53}, text:  are weapons, two: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 47, 'end': 53}, text: weapons, types: ['unknown'], unknown: True, value: weapons, word: weapons}), word: are})\n\n\n",
        "Op choices were: [(('list', 0), [('is', 0), ('list', 0), ('unknown', 0)]), (('list', 1), [('is', 0), ('list', 1), ('unknown', 0)]), (('list', 1), [('is', 0), ('list', 1), ('unknown', 0)]), (('list', 1), [('is', 0), ('list', 1), ('unknown', 0)]), (('list', 1), [('is', 0), ('list', 1), ('unknown', 0)]), (('list', 1), [('is', 0), ('list', 1), ('unknown', 0)]), (('list', 1), [('is', 0), ('list', 1), ('unknown', 0), ('unknown', 1)]), (('unknown', 0), [('is', 0), ('list', 1), ('unknown', 0), ('unknown', 1)]), (('list', 1), [('is', 0), ('list', 1), ('unknown', 1)]), (('is', 0), [('is', 0), ('list', 1), ('unknown', 1)]), (('is', 1), [('is', 1)])]",
        "Contexts used for choosing operators (if the wrong choices were made update the priories array. Put the expected choice at the end of the list): \n  Context for choosing the operator list/0 was [['is', 0], ['list', 0], ['unknown', 0]]\n  Context for choosing the operator list/1 was [['is', 0], ['list', 1], ['unknown', 0]]\n  Context for choosing the operator list/1 was [['is', 0], ['list', 1], ['unknown', 0]]\n  Context for choosing the operator list/1 was [['is', 0], ['list', 1], ['unknown', 0]]\n  Context for choosing the operator list/1 was [['is', 0], ['list', 1], ['unknown', 0]]\n  Context for choosing the operator list/1 was [['is', 0], ['list', 1], ['unknown', 0]]\n  Context for choosing the operator list/1 was [['is', 0], ['list', 1], ['unknown', 0], ['unknown', 1]]\n  Context for choosing the operator unknown/0 was [['is', 0], ['list', 1], ['unknown', 0], ['unknown', 1]]\n  Context for choosing the operator list/1 was [['is', 0], ['list', 1], ['unknown', 1]]\n  Context for choosing the operator is/0 was [['is', 0], ['list', 1], ['unknown', 1]]\n  Context for choosing the operator is/1 was [['is', 1]]",
        "Associations made with probabilities (each group is a choice point. if the wrong choices were made update the associations list): \n  Group 0\n    0.6000000000000001 - [['list', 0], ['unknown', 0], \">>>>2 ['is', 0] <<<<2\", ['unknown', 0]]\n      (('unknown', 0), ('is', 0), ('unknown', 0))\n    0.4 - [['list', 0], ['unknown', 0], \">>>>2 ['isEd', 0] <<<<2\", ['unknown', 0]]\n      (('list', 0), ('unknown', 0))\n      (('unknown', 0), ('isEd', 0))\n  Group 1\n    0.5 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 0), ('isEd', 0))\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 0), ('is', 0), ('unknown', 0))\n  Group 2\n    0.5 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 0), ('isEd', 0))\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 0), ('is', 0), ('unknown', 0))\n  Group 3\n    0.5 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 0), ('isEd', 0))\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 0), ('is', 0), ('unknown', 0))\n  Group 4\n    0.5 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 0), ('isEd', 0))\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 0), ('is', 0), ('unknown', 0))\n  Group 5\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 1), ('is', 0), ('unknown', 0))\n    0.5 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 1), ('isEd', 0))\n  Group 6\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 1), ('is', 0), ('unknown', 1))\n    0.6666666666666666 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 1), ('isEd', 0))\n      (('isEd', 0), ('unknown', 1))"
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "list",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "list",
                0
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "list",
                1
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "list",
                1
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "list",
                1
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "list",
                1
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "list",
                1
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "list",
                1
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                1
              ]
            ]
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "list",
                1
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                1
              ]
            ]
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "list",
                1
              ],
              [
                "unknown",
                1
              ]
            ]
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "list",
                1
              ],
              [
                "unknown",
                1
              ]
            ]
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ]
          }
        ]
      },
      "trace": "undefined",
      "contexts": [
        {
          "number": "many",
          "text": " are weapons",
          "marker": "is",
          "word": "are",
          "range": {
            "start": 0,
            "end": 53
          },
          "one": {
            "number": "many",
            "marker": "list",
            "value": [
              {
                "marker": "unknown",
                "range": {
                  "start": 0,
                  "end": 6
                },
                "word": "pistols",
                "text": "pistols",
                "value": "pistols",
                "unknown": true
              },
              {
                "marker": "unknown",
                "range": {
                  "start": 8,
                  "end": 13
                },
                "word": "rifles",
                "text": "rifles",
                "value": "rifles",
                "unknown": true
              },
              {
                "marker": "unknown",
                "range": {
                  "start": 15,
                  "end": 22
                },
                "word": "grenades",
                "text": "grenades",
                "value": "grenades",
                "unknown": true
              },
              {
                "marker": "unknown",
                "range": {
                  "start": 24,
                  "end": 28
                },
                "word": "mines",
                "text": "mines",
                "value": "mines",
                "unknown": true
              },
              {
                "marker": "unknown",
                "range": {
                  "start": 34,
                  "end": 41
                },
                "word": "shotguns",
                "text": "shotguns",
                "value": "shotguns",
                "unknown": true
              }
            ],
            "range": {
              "start": 0,
              "end": 53
            },
            "types": [
              "list",
              "unknown"
            ]
          },
          "two": {
            "marker": "unknown",
            "range": {
              "start": 47,
              "end": 53
            },
            "word": "weapons",
            "text": "weapons",
            "value": "weapons",
            "unknown": true,
            "types": [
              "unknown"
            ],
            "concept": true
          },
          "topLevel": true,
          "touchedBy": [
            "call2"
          ]
        }
      ],
      "generated": [
        "pistols, rifles, grenades, mines and shotguns are weapons"
      ],
      "paraphrases": [
        "pistols, rifles, grenades, mines and shotguns are weapons"
      ],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "version": "7.5.0-beta.30",
      "query": "pistols rifles grenades mines and shotguns are weapons",
      "key": {
        "query": "pistols rifles grenades mines and shotguns are weapons"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "grenade",
          "hierarchyAble"
        ],
        [
          "grenade",
          "isEdee"
        ],
        [
          "grenade",
          "isEder"
        ],
        [
          "grenade",
          "object"
        ],
        [
          "grenade",
          "property"
        ],
        [
          "grenade",
          "queryable"
        ],
        [
          "grenade",
          "theAble"
        ],
        [
          "grenade",
          "weapon"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "isEd",
          "isEd"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "mine",
          "hierarchyAble"
        ],
        [
          "mine",
          "isEdee"
        ],
        [
          "mine",
          "isEder"
        ],
        [
          "mine",
          "object"
        ],
        [
          "mine",
          "property"
        ],
        [
          "mine",
          "queryable"
        ],
        [
          "mine",
          "theAble"
        ],
        [
          "mine",
          "weapon"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "pistol",
          "hierarchyAble"
        ],
        [
          "pistol",
          "isEdee"
        ],
        [
          "pistol",
          "isEder"
        ],
        [
          "pistol",
          "object"
        ],
        [
          "pistol",
          "property"
        ],
        [
          "pistol",
          "queryable"
        ],
        [
          "pistol",
          "theAble"
        ],
        [
          "pistol",
          "weapon"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "isEd"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "rifle",
          "hierarchyAble"
        ],
        [
          "rifle",
          "isEdee"
        ],
        [
          "rifle",
          "isEder"
        ],
        [
          "rifle",
          "object"
        ],
        [
          "rifle",
          "property"
        ],
        [
          "rifle",
          "queryable"
        ],
        [
          "rifle",
          "theAble"
        ],
        [
          "rifle",
          "weapon"
        ],
        [
          "shotgun",
          "hierarchyAble"
        ],
        [
          "shotgun",
          "isEdee"
        ],
        [
          "shotgun",
          "isEder"
        ],
        [
          "shotgun",
          "object"
        ],
        [
          "shotgun",
          "property"
        ],
        [
          "shotgun",
          "queryable"
        ],
        [
          "shotgun",
          "theAble"
        ],
        [
          "shotgun",
          "weapon"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "number"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "weapon",
          "hierarchyAble"
        ],
        [
          "weapon",
          "isEdee"
        ],
        [
          "weapon",
          "isEder"
        ],
        [
          "weapon",
          "object"
        ],
        [
          "weapon",
          "property"
        ],
        [
          "weapon",
          "queryable"
        ],
        [
          "weapon",
          "theAble"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ]
      ],
      "logs": [
        "Undefined word 'equipable'",
        "Applying implicit\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(a/0, PASS, None, evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: 'a', modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 0}, text: a, word: a})\n\n\n",
        "Applying implicit\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(weapon/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, range: {'start': 2, 'end': 7}, text: weapon, value: weapon, word: weapon})\n\n\n",
        "Applying implicit\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: one, range: {'start': 9, 'end': 10}, text: is, word: is})\n\n\n",
        "Applying implicit\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 20}, text: equipable, value: equipable, word: equipable})\n\n\n",
        "Applying implicit\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 20}, text: equipable, unknown: True, value: equipable, word: equipable})\n\n\n",
        "Applying implicit\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/2, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 12, 'end': 20}, text: equipable, unknown: True, value: equipable, word: equipable})\n\n\n",
        "Applying implicit\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(weapon/1, None, evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 2, 'end': 7}, text: weapon, value: weapon, word: weapon})\n\n\n",
        "Applying implicit\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({concept: True, determiner: a, marker: Operator(weapon/1, None, evaluator(None), variables({}) bridge(bridge)), modifiers: ['determiner'], number: one, pullFromContext: False, range: {'start': 0, 'end': 7}, text: a weapon, types: ['weapon'], value: weapon, wantsValue: True, word: weapon})\n\n\n",
        "Applying implicit\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, one: Context({concept: True, determiner: a, marker: Operator(weapon/1, None, evaluator(None), variables({}) bridge(bridge)), modifiers: ['determiner'], number: one, pullFromContext: False, range: {'start': 0, 'end': 20}, text: a weapon, types: ['weapon', 'weapon'], value: weapon, wantsValue: True, word: weapon}), range: {'start': 0, 'end': 20}, text: a weapon is equipable, two: Context({marker: Operator(unknown/2, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 12, 'end': 20}, text: equipable, types: ['unknown'], unknown: True, value: equipable, word: equipable}), word: is})\n\n\n",
        "Applying implicit\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/2, None, evaluator(None), variables({}) bridge(bridge)), number: one, one: Context({concept: True, determiner: a, marker: Operator(weapon/1, None, evaluator(None), variables({}) bridge(bridge)), modifiers: ['determiner'], number: one, pullFromContext: False, range: {'start': 0, 'end': 20}, text: a weapon, types: ['weapon', 'weapon'], value: weapon, wantsValue: True, word: weapon}), range: {'start': 0, 'end': 20}, text: a weapon is equipable, two: Context({marker: Operator(unknown/2, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 12, 'end': 20}, text: equipable, types: ['unknown'], unknown: True, value: equipable, word: equipable}), word: is})\n\n\n",
        "Op choices were: [(('unknown', 0), [('a', 0), ('is', 0), ('unknown', 0), ('weapon', 0)]), (('unknown', 1), [('a', 0), ('is', 0), ('unknown', 1), ('weapon', 0)]), (('weapon', 0), [('a', 0), ('is', 0), ('weapon', 0)]), (('a', 0), [('a', 0), ('is', 0)]), (('is', 0), [('is', 0)]), (('is', 1), [('is', 1)])]",
        "Contexts used for choosing operators (if the wrong choices were made update the priories array. Put the expected choice at the end of the list): \n  Context for choosing the operator unknown/0 was [['a', 0], ['is', 0], ['unknown', 0], ['weapon', 0]]\n  Context for choosing the operator unknown/1 was [['a', 0], ['is', 0], ['unknown', 1], ['weapon', 0]]\n  Context for choosing the operator weapon/0 was [['a', 0], ['is', 0], ['weapon', 0]]\n  Context for choosing the operator a/0 was [['a', 0], ['is', 0]]\n  Context for choosing the operator is/0 was [['is', 0]]\n  Context for choosing the operator is/1 was [['is', 1]]",
        "Associations made with probabilities (each group is a choice point. if the wrong choices were made update the associations list): \n  Group 0\n    0.5 - [['weapon', 0], \">>>>1 ['isEd', 0] <<<<1\", ['unknown', 0]]\n      (('weapon', 0), ('isEd', 0))\n    1.0 - [['weapon', 0], \">>>>1 ['is', 0] <<<<1\", ['unknown', 0]]\n      (('weapon', 0), ('is', 0), ('unknown', 0))\n  Group 1\n    0.6666666666666666 - [['weapon', 0], \">>>>1 ['isEd', 0] <<<<1\", ['unknown', 0]]\n      (('weapon', 0), ('isEd', 0))\n      (('isEd', 0), ('unknown', 1))\n    1.0 - [['weapon', 0], \">>>>1 ['is', 0] <<<<1\", ['unknown', 0]]\n      (('weapon', 0), ('is', 0), ('unknown', 1))\n  Group 2\n    0.6666666666666666 - [['weapon', 0], \">>>>1 ['isEd', 0] <<<<1\", ['unknown', 0]]\n      (('weapon', 0), ('isEd', 0))\n      (('isEd', 0), ('unknown', 1))\n    1.0 - [['weapon', 0], \">>>>1 ['is', 0] <<<<1\", ['unknown', 0]]\n      (('weapon', 0), ('is', 0), ('unknown', 1))\n  Group 3\n    0.6666666666666666 - [['weapon', 0], \">>>>1 ['isEd', 0] <<<<1\", ['unknown', 0]]\n      (('weapon', 0), ('isEd', 0))\n      (('isEd', 0), ('unknown', 1))\n    1.0 - [['weapon', 0], \">>>>1 ['is', 0] <<<<1\", ['unknown', 0]]\n      (('weapon', 0), ('is', 0), ('unknown', 1))\n  Group 4\n    0.6666666666666666 - [['weapon', 0], \">>>>1 ['isEd', 0] <<<<1\", ['unknown', 0]]\n      (('weapon', 0), ('isEd', 0))\n      (('isEd', 0), ('unknown', 1))\n    1.0 - [['weapon', 0], \">>>>1 ['is', 0] <<<<1\", ['unknown', 0]]\n      (('weapon', 0), ('is', 0), ('unknown', 1))"
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "a",
                0
              ],
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "weapon",
                0
              ]
            ]
          },
          {
            "op": [
              "unknown",
              1
            ],
            "ops": [
              [
                "a",
                0
              ],
              [
                "is",
                0
              ],
              [
                "unknown",
                1
              ],
              [
                "weapon",
                0
              ]
            ]
          },
          {
            "op": [
              "weapon",
              0
            ],
            "ops": [
              [
                "a",
                0
              ],
              [
                "is",
                0
              ],
              [
                "weapon",
                0
              ]
            ]
          },
          {
            "op": [
              "a",
              0
            ],
            "ops": [
              [
                "a",
                0
              ],
              [
                "is",
                0
              ]
            ]
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ]
            ]
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ]
          }
        ]
      },
      "trace": "undefined",
      "contexts": [
        {
          "number": "one",
          "text": "a weapon is equipable",
          "marker": "is",
          "word": "is",
          "range": {
            "start": 0,
            "end": 20
          },
          "one": {
            "number": "one",
            "value": "weapon",
            "text": "a weapon",
            "marker": "weapon",
            "word": "weapon",
            "range": {
              "start": 0,
              "end": 20
            },
            "types": [
              "weapon"
            ],
            "pullFromContext": false,
            "concept": true,
            "wantsValue": true,
            "determiner": "a",
            "modifiers": [
              "determiner"
            ]
          },
          "two": {
            "marker": "unknown",
            "range": {
              "start": 12,
              "end": 20
            },
            "word": "equipable",
            "text": "equipable",
            "value": "equipable",
            "unknown": true,
            "types": [
              "unknown"
            ],
            "concept": true
          },
          "topLevel": true,
          "touchedBy": [
            "call2"
          ]
        }
      ],
      "generated": [
        "a weapon is equipable"
      ],
      "paraphrases": [
        "a weapon is equipable"
      ],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "a",
            0
          ],
          [
            "is",
            0
          ]
        ],
        [
          [
            "a",
            0
          ],
          [
            "is",
            0
          ],
          [
            "unknown",
            0
          ],
          [
            "weapon",
            0
          ]
        ],
        [
          [
            "a",
            0
          ],
          [
            "is",
            0
          ],
          [
            "unknown",
            1
          ],
          [
            "weapon",
            0
          ]
        ],
        [
          [
            "a",
            0
          ],
          [
            "is",
            0
          ],
          [
            "weapon",
            0
          ]
        ]
      ],
      "version": "7.5.0-beta.30",
      "query": "a weapon is equipable",
      "key": {
        "query": "a weapon is equipable"
      }
    }
  ],
  "fragments": [],
  "semantics": [],
  "associations": [
    [
      [
        "a",
        0
      ],
      [
        "is",
        0
      ]
    ],
    [
      [
        "a",
        0
      ],
      [
        "is",
        0
      ],
      [
        "unknown",
        0
      ],
      [
        "weapon",
        0
      ]
    ],
    [
      [
        "a",
        0
      ],
      [
        "is",
        0
      ],
      [
        "unknown",
        1
      ],
      [
        "weapon",
        0
      ]
    ],
    [
      [
        "a",
        0
      ],
      [
        "is",
        0
      ],
      [
        "weapon",
        0
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ],
      [
        "unknown",
        1
      ]
    ]
  ]
}