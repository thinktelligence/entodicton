{
  "queries": [
    "pistols rifles grenades mines and shotguns are weapons",
    "mines and grenades are explosives",
    "explosives are weapons",
    "pistols rifles and shotguns are firearms",
    "firearms are weapons",
    "hats armor and suits are clothes",
    "a weapon is equipable",
    "clothes are wearable",
    "food is edible",
    "drinks are drinkable",
    "meat is food",
    "vegetables and fruit are food",
    "cola and pop are drinks",
    "medicine and stimpaks are takeable",
    "item modifies properties",
    "damage luck hp rads value ap charisma range and accuracy are item properties"
  ],
  "resultss": [
    {
      "hierarchy": [
        [
          "a",
          "articlePOS"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "condition",
          "condition"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "highest",
          "condition"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "isEd",
          "isEd"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "lowest",
          "condition"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "isEd"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ]
      ],
      "logs": [
        "Undefined word 'pistols'",
        "Undefined word 'rifles'",
        "Undefined word 'grenades'",
        "Undefined word 'mines'",
        "Undefined word 'shotguns'",
        "Undefined word 'weapons'",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 6}, text: pistols, value: pistols, word: pistols})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 13}, text: rifles, value: rifles, word: rifles})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 22}, text: grenades, value: grenades, word: grenades})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 24, 'end': 28}, text: mines, value: mines, word: mines})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/0, PASS, None, evaluator(Bridge('{ ...next(operator), value: append(before, after) }')), variables({}) bridge(bridge)), range: {'start': 30, 'end': 32}, text: and, word: and})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 34, 'end': 41}, text: shotguns, value: shotguns, word: shotguns})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 43, 'end': 45}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 47, 'end': 53}, text: weapons, value: weapons, word: weapons})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 6}, text: pistols, value: pistols, word: pistols})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 13}, text: rifles, value: rifles, word: rifles})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 22}, text: grenades, value: grenades, word: grenades})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 24, 'end': 28}, text: mines, value: mines, word: mines})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/0, PASS, None, evaluator(Bridge('{ ...next(operator), value: append(before, after) }')), variables({}) bridge(bridge)), range: {'start': 30, 'end': 32}, text: and, word: and})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 34, 'end': 41}, text: shotguns, value: shotguns, word: shotguns})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 43, 'end': 45}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 47, 'end': 53}, text: weapons, value: weapons, word: weapons})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 6}, text: pistols, value: pistols, word: pistols})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 13}, text: rifles, value: rifles, word: rifles})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 22}, text: grenades, value: grenades, word: grenades})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 24, 'end': 41}, text: mines and shotguns, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 24, 'end': 28}, text: mines, value: mines, word: mines}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 34, 'end': 41}, text: shotguns, value: shotguns, word: shotguns})], word: and})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 43, 'end': 45}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 47, 'end': 53}, text: weapons, value: weapons, word: weapons})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 6}, text: pistols, value: pistols, word: pistols})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 13}, text: rifles, value: rifles, word: rifles})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 22}, text: grenades, value: grenades, word: grenades})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 24, 'end': 41}, text: mines and shotguns, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 24, 'end': 28}, text: mines, value: mines, word: mines}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 34, 'end': 41}, text: shotguns, value: shotguns, word: shotguns})], word: and})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 43, 'end': 45}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 47, 'end': 53}, text: weapons, value: weapons, word: weapons})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 6}, text: pistols, value: pistols, word: pistols})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 13}, text: rifles, value: rifles, word: rifles})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 15, 'end': 41}, text: grenades mines and shotguns, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 22}, text: grenades, value: grenades, word: grenades}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 24, 'end': 28}, text: mines, value: mines, word: mines}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 34, 'end': 41}, text: shotguns, value: shotguns, word: shotguns})], word: and})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 43, 'end': 45}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 47, 'end': 53}, text: weapons, value: weapons, word: weapons})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 6}, text: pistols, value: pistols, word: pistols})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 13}, text: rifles, value: rifles, word: rifles})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 15, 'end': 41}, text: grenades mines and shotguns, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 22}, text: grenades, value: grenades, word: grenades}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 24, 'end': 28}, text: mines, value: mines, word: mines}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 34, 'end': 41}, text: shotguns, value: shotguns, word: shotguns})], word: and})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 43, 'end': 45}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 47, 'end': 53}, text: weapons, value: weapons, word: weapons})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 6}, text: pistols, value: pistols, word: pistols})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 8, 'end': 41}, text: rifles grenades mines and shotguns, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 13}, text: rifles, value: rifles, word: rifles}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 22}, text: grenades, value: grenades, word: grenades}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 24, 'end': 28}, text: mines, value: mines, word: mines}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 34, 'end': 41}, text: shotguns, value: shotguns, word: shotguns})], word: and})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 43, 'end': 45}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 47, 'end': 53}, text: weapons, value: weapons, word: weapons})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 6}, text: pistols, value: pistols, word: pistols})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 8, 'end': 41}, text: rifles grenades mines and shotguns, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 13}, text: rifles, value: rifles, word: rifles}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 22}, text: grenades, value: grenades, word: grenades}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 24, 'end': 28}, text: mines, value: mines, word: mines}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 34, 'end': 41}, text: shotguns, value: shotguns, word: shotguns})], word: and})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 43, 'end': 45}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 47, 'end': 53}, text: weapons, value: weapons, word: weapons})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 41}, text: pistols rifles grenades mines and shotguns, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 6}, text: pistols, value: pistols, word: pistols}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 13}, text: rifles, value: rifles, word: rifles}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 22}, text: grenades, value: grenades, word: grenades}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 24, 'end': 28}, text: mines, value: mines, word: mines}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 34, 'end': 41}, text: shotguns, value: shotguns, word: shotguns})], word: and})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 43, 'end': 45}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 47, 'end': 53}, text: weapons, value: weapons, word: weapons})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 41}, text: pistols rifles grenades mines and shotguns, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 6}, text: pistols, value: pistols, word: pistols}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 13}, text: rifles, value: rifles, word: rifles}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 22}, text: grenades, value: grenades, word: grenades}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 24, 'end': 28}, text: mines, value: mines, word: mines}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 34, 'end': 41}, text: shotguns, value: shotguns, word: shotguns})], word: and})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 43, 'end': 45}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 47, 'end': 53}, text: weapons, value: weapons, word: weapons})\n\n\n",
        "Counter == 5. Applying Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)) failed due to the matchers [Type(variable: 'type')] not being present",
        "Applying implicit. Counter 6\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 41}, value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 6}, text: pistols, unknown: True, value: pistols, word: pistols}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 13}, text: rifles, unknown: True, value: rifles, word: rifles}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 22}, text: grenades, unknown: True, value: grenades, word: grenades}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 24, 'end': 28}, text: mines, unknown: True, value: mines, word: mines}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 34, 'end': 41}, text: shotguns, unknown: True, value: shotguns, word: shotguns})]})\n\n\n",
        "Applying implicit. Counter 6\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 43, 'end': 45}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 6\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 47, 'end': 53}, text: weapons, value: weapons, word: weapons})\n\n\n",
        "Applying implicit. Counter 6\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 41}, value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 6}, text: pistols, unknown: True, value: pistols, word: pistols}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 13}, text: rifles, unknown: True, value: rifles, word: rifles}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 22}, text: grenades, unknown: True, value: grenades, word: grenades}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 24, 'end': 28}, text: mines, unknown: True, value: mines, word: mines}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 34, 'end': 41}, text: shotguns, unknown: True, value: shotguns, word: shotguns})]})\n\n\n",
        "Applying implicit. Counter 6\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 43, 'end': 45}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 6\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 47, 'end': 53}, text: weapons, value: weapons, word: weapons})\n\n\n",
        "Counter == 6. Applying Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)) failed due to the matchers [Type(variable: 'type')] not being present",
        "Applying implicit. Counter 7\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 41}, value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 6}, text: pistols, unknown: True, value: pistols, word: pistols}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 13}, text: rifles, unknown: True, value: rifles, word: rifles}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 22}, text: grenades, unknown: True, value: grenades, word: grenades}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 24, 'end': 28}, text: mines, unknown: True, value: mines, word: mines}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 34, 'end': 41}, text: shotguns, unknown: True, value: shotguns, word: shotguns})]})\n\n\n",
        "Applying implicit. Counter 7\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 43, 'end': 45}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 7\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 47, 'end': 53}, text: weapons, unknown: True, value: weapons, word: weapons})\n\n\n",
        "Applying implicit. Counter 7\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 41}, value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 6}, text: pistols, unknown: True, value: pistols, word: pistols}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 13}, text: rifles, unknown: True, value: rifles, word: rifles}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 22}, text: grenades, unknown: True, value: grenades, word: grenades}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 24, 'end': 28}, text: mines, unknown: True, value: mines, word: mines}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 34, 'end': 41}, text: shotguns, unknown: True, value: shotguns, word: shotguns})]})\n\n\n",
        "Applying implicit. Counter 7\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 43, 'end': 45}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 7\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 47, 'end': 53}, text: weapons, unknown: True, value: weapons, word: weapons})\n\n\n",
        "Counter == 7. Applying Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)) failed due to the matchers [Type(variable: 'type')] not being present",
        "Applying implicit. Counter 8\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 53}, types: ['unknown'], value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 6}, text: pistols, unknown: True, value: pistols, word: pistols}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 13}, text: rifles, unknown: True, value: rifles, word: rifles}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 22}, text: grenades, unknown: True, value: grenades, word: grenades}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 24, 'end': 28}, text: mines, unknown: True, value: mines, word: mines}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 34, 'end': 41}, text: shotguns, unknown: True, value: shotguns, word: shotguns})]}), range: {'start': 0, 'end': 53}, text:  are weapons, two: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 47, 'end': 53}, text: weapons, types: ['unknown'], unknown: True, value: weapons, word: weapons}), word: are})\n\n\n",
        "Applying implicit. Counter 8\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 53}, types: ['unknown'], value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 6}, text: pistols, unknown: True, value: pistols, word: pistols}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 13}, text: rifles, unknown: True, value: rifles, word: rifles}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 22}, text: grenades, unknown: True, value: grenades, word: grenades}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 24, 'end': 28}, text: mines, unknown: True, value: mines, word: mines}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 34, 'end': 41}, text: shotguns, unknown: True, value: shotguns, word: shotguns})]}), range: {'start': 0, 'end': 53}, text:  are weapons, two: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 47, 'end': 53}, text: weapons, types: ['unknown'], unknown: True, value: weapons, word: weapons}), word: are})\n\n\n",
        "Applying implicit. Counter 9\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/2, None, evaluator(None), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 53}, types: ['unknown'], value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 6}, text: pistols, unknown: True, value: pistols, word: pistols}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 13}, text: rifles, unknown: True, value: rifles, word: rifles}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 22}, text: grenades, unknown: True, value: grenades, word: grenades}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 24, 'end': 28}, text: mines, unknown: True, value: mines, word: mines}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 34, 'end': 41}, text: shotguns, unknown: True, value: shotguns, word: shotguns})]}), range: {'start': 0, 'end': 53}, text:  are weapons, two: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 47, 'end': 53}, text: weapons, types: ['unknown'], unknown: True, value: weapons, word: weapons}), word: are})\n\n\n",
        "Applying implicit. Counter 9\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/2, None, evaluator(None), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 53}, types: ['unknown'], value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 6}, text: pistols, unknown: True, value: pistols, word: pistols}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 13}, text: rifles, unknown: True, value: rifles, word: rifles}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 22}, text: grenades, unknown: True, value: grenades, word: grenades}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 24, 'end': 28}, text: mines, unknown: True, value: mines, word: mines}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 34, 'end': 41}, text: shotguns, unknown: True, value: shotguns, word: shotguns})]}), range: {'start': 0, 'end': 53}, text:  are weapons, two: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 47, 'end': 53}, text: weapons, types: ['unknown'], unknown: True, value: weapons, word: weapons}), word: are})\n\n\n",
        "Op choices were: [(('list', 0), [('is', 0), ('unknown', 0)], 1), (('list', 1), [('is', 0), ('unknown', 0)], 2), (('list', 1), [('is', 0), ('unknown', 0)], 3), (('list', 1), [('is', 0), ('unknown', 0)], 4), (('list', 1), [('is', 0), ('unknown', 0)], 5), (('list', 1), [('is', 0), ('unknown', 0)], 5), (('list', 1), [('is', 0), ('unknown', 0), ('unknown', 1)], 6), (('unknown', 0), [('is', 0), ('unknown', 0), ('unknown', 1)], 6), (('list', 1), [('is', 0), ('unknown', 1)], 7), (('is', 0), [('is', 0), ('unknown', 1)], 7), (('is', 1), [('is', 1)], 8)]",
        "Contexts used for choosing operators (if the wrong choices were made update the priorities array. Put the expected choice at the end of the list. you can check for loops in the priorities by adding the -cl flag and running a query): \n  Context for choosing the operator list/0 was [['is', 0], ['unknown', 0]]. Counter 1\n  Context for choosing the operator list/1 was [['is', 0], ['unknown', 0]]. Counter 2\n  Context for choosing the operator list/1 was [['is', 0], ['unknown', 0]]. Counter 3\n  Context for choosing the operator list/1 was [['is', 0], ['unknown', 0]]. Counter 4\n  Context for choosing the operator list/1 was [['is', 0], ['unknown', 0]]. Counter 5\n  Context for choosing the operator list/1 was [['is', 0], ['unknown', 0]]. Counter 5\n  Context for choosing the operator list/1 was [['is', 0], ['unknown', 0], ['unknown', 1]]. Counter 6\n  Context for choosing the operator unknown/0 was [['is', 0], ['unknown', 0], ['unknown', 1]]. Counter 6\n  Context for choosing the operator list/1 was [['is', 0], ['unknown', 1]]. Counter 7\n  Context for choosing the operator is/0 was [['is', 0], ['unknown', 1]]. Counter 7\n  Context for choosing the operator is/1 was [['is', 1]]. Counter 8",
        "Associations made with probabilities (each group is a choice point. if the wrong choices were made update the associations list): \n  Group 0\n    0.4 - [['list', 0], ['unknown', 0], \">>>>2 ['isEd', 0] <<<<2\", ['unknown', 0]]\n      (('list', 0), ('unknown', 0))\n      (('unknown', 0), ('isEd', 0))\n    0.6000000000000001 - [['list', 0], ['unknown', 0], \">>>>2 ['is', 0] <<<<2\", ['unknown', 0]]\n      (('unknown', 0), ('is', 0), ('unknown', 0))\n  Group 1\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 0), ('is', 0), ('unknown', 0))\n    0.5 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 0), ('isEd', 0))\n  Group 2\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 0), ('is', 0), ('unknown', 0))\n    0.5 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 0), ('isEd', 0))\n  Group 3\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 0), ('is', 0), ('unknown', 0))\n    0.5 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 0), ('isEd', 0))\n  Group 4\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 0), ('is', 0), ('unknown', 0))\n    0.5 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 0), ('isEd', 0))\n  Group 5\n    0.5 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 1), ('isEd', 0))\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 1), ('is', 0), ('unknown', 0))\n  Group 6\n    0.6666666666666666 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 1), ('isEd', 0))\n      (('isEd', 0), ('unknown', 1))\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 1), ('is', 0), ('unknown', 1))"
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "list",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 5
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 5
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 6
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 6
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 7
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 7
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ],
            "counter": 8
          }
        ]
      },
      "trace": "undefined",
      "contexts": [
        {
          "number": "many",
          "text": " are weapons",
          "marker": "is",
          "word": "are",
          "range": {
            "start": 0,
            "end": 53
          },
          "one": {
            "number": "many",
            "marker": "list",
            "value": [
              {
                "marker": "unknown",
                "range": {
                  "start": 0,
                  "end": 6
                },
                "word": "pistols",
                "text": "pistols",
                "value": "pistols",
                "unknown": true
              },
              {
                "marker": "unknown",
                "range": {
                  "start": 8,
                  "end": 13
                },
                "word": "rifles",
                "text": "rifles",
                "value": "rifles",
                "unknown": true
              },
              {
                "marker": "unknown",
                "range": {
                  "start": 15,
                  "end": 22
                },
                "word": "grenades",
                "text": "grenades",
                "value": "grenades",
                "unknown": true
              },
              {
                "marker": "unknown",
                "range": {
                  "start": 24,
                  "end": 28
                },
                "word": "mines",
                "text": "mines",
                "value": "mines",
                "unknown": true
              },
              {
                "marker": "unknown",
                "range": {
                  "start": 34,
                  "end": 41
                },
                "word": "shotguns",
                "text": "shotguns",
                "value": "shotguns",
                "unknown": true
              }
            ],
            "range": {
              "start": 0,
              "end": 53
            },
            "types": [
              "list",
              "unknown"
            ]
          },
          "two": {
            "marker": "unknown",
            "range": {
              "start": 47,
              "end": 53
            },
            "word": "weapons",
            "text": "weapons",
            "value": "weapons",
            "unknown": true,
            "types": [
              "unknown"
            ],
            "concept": true
          },
          "topLevel": true,
          "touchedBy": [
            "call2"
          ]
        }
      ],
      "generated": [
        "pistols, rifles, grenades, mines and shotguns are weapons"
      ],
      "paraphrases": [
        "pistols, rifles, grenades, mines and shotguns are weapons"
      ],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "version": "7.5.0-beta.49",
      "query": "pistols rifles grenades mines and shotguns are weapons",
      "key": {
        "query": "pistols rifles grenades mines and shotguns are weapons"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "condition",
          "condition"
        ],
        [
          "grenade",
          "hierarchyAble"
        ],
        [
          "grenade",
          "isEdee"
        ],
        [
          "grenade",
          "isEder"
        ],
        [
          "grenade",
          "object"
        ],
        [
          "grenade",
          "property"
        ],
        [
          "grenade",
          "queryable"
        ],
        [
          "grenade",
          "theAble"
        ],
        [
          "grenade",
          "weapon"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "highest",
          "condition"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "isEd",
          "isEd"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "lowest",
          "condition"
        ],
        [
          "mine",
          "hierarchyAble"
        ],
        [
          "mine",
          "isEdee"
        ],
        [
          "mine",
          "isEder"
        ],
        [
          "mine",
          "object"
        ],
        [
          "mine",
          "property"
        ],
        [
          "mine",
          "queryable"
        ],
        [
          "mine",
          "theAble"
        ],
        [
          "mine",
          "weapon"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "pistol",
          "hierarchyAble"
        ],
        [
          "pistol",
          "isEdee"
        ],
        [
          "pistol",
          "isEder"
        ],
        [
          "pistol",
          "object"
        ],
        [
          "pistol",
          "property"
        ],
        [
          "pistol",
          "queryable"
        ],
        [
          "pistol",
          "theAble"
        ],
        [
          "pistol",
          "weapon"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "isEd"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "rifle",
          "hierarchyAble"
        ],
        [
          "rifle",
          "isEdee"
        ],
        [
          "rifle",
          "isEder"
        ],
        [
          "rifle",
          "object"
        ],
        [
          "rifle",
          "property"
        ],
        [
          "rifle",
          "queryable"
        ],
        [
          "rifle",
          "theAble"
        ],
        [
          "rifle",
          "weapon"
        ],
        [
          "shotgun",
          "hierarchyAble"
        ],
        [
          "shotgun",
          "isEdee"
        ],
        [
          "shotgun",
          "isEder"
        ],
        [
          "shotgun",
          "object"
        ],
        [
          "shotgun",
          "property"
        ],
        [
          "shotgun",
          "queryable"
        ],
        [
          "shotgun",
          "theAble"
        ],
        [
          "shotgun",
          "weapon"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "weapon",
          "hierarchyAble"
        ],
        [
          "weapon",
          "isEdee"
        ],
        [
          "weapon",
          "isEder"
        ],
        [
          "weapon",
          "object"
        ],
        [
          "weapon",
          "property"
        ],
        [
          "weapon",
          "queryable"
        ],
        [
          "weapon",
          "theAble"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ]
      ],
      "logs": [
        "Undefined word 'explosives'",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(mine/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 4}, text: mines, value: mine, word: mines})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/0, PASS, None, evaluator(Bridge('{ ...next(operator), value: append(before, after) }')), variables({}) bridge(bridge)), range: {'start': 6, 'end': 8}, text: and, word: and})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(grenade/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 10, 'end': 17}, text: grenades, value: grenade, word: grenades})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 19, 'end': 21}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 23, 'end': 32}, text: explosives, value: explosives, word: explosives})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(mine/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 4}, text: mines, value: mine, word: mines})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/0, PASS, None, evaluator(Bridge('{ ...next(operator), value: append(before, after) }')), variables({}) bridge(bridge)), range: {'start': 6, 'end': 8}, text: and, word: and})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(grenade/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 10, 'end': 17}, text: grenades, value: grenade, word: grenades})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 19, 'end': 21}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 23, 'end': 32}, text: explosives, value: explosives, word: explosives})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'property', 'isEder', 'unknown', 'object', 'isEdee', 'notAble', 'hierarchyAble', 'queryable', 'weapon', 'grenade']}) bridge(bridge)), range: {'start': 0, 'end': 17}, text: mines and grenades, types: [], value: [Context({marker: Operator(mine/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 4}, text: mines, value: mine, word: mines}), Context({marker: Operator(grenade/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 10, 'end': 17}, text: grenades, value: grenade, word: grenades})], word: and})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 19, 'end': 21}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 23, 'end': 32}, text: explosives, value: explosives, word: explosives})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'property', 'isEder', 'unknown', 'object', 'isEdee', 'notAble', 'hierarchyAble', 'queryable', 'weapon', 'grenade']}) bridge(bridge)), range: {'start': 0, 'end': 17}, text: mines and grenades, types: [], value: [Context({marker: Operator(mine/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 4}, text: mines, value: mine, word: mines}), Context({marker: Operator(grenade/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 10, 'end': 17}, text: grenades, value: grenade, word: grenades})], word: and})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 19, 'end': 21}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 23, 'end': 32}, text: explosives, value: explosives, word: explosives})\n\n\n",
        "Counter == 2. Applying Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'property', 'isEder', 'unknown', 'object', 'isEdee', 'notAble', 'hierarchyAble', 'queryable', 'weapon', 'grenade']}) bridge(bridge)) failed due to the matchers [Type(variable: 'type')] not being present",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'property', 'isEder', 'unknown', 'object', 'isEdee', 'notAble', 'hierarchyAble', 'queryable', 'weapon', 'grenade']}) bridge(bridge)), range: {'start': 0, 'end': 17}, text: mines and grenades, types: [], value: [Context({marker: Operator(mine/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 4}, text: mines, value: mine, word: mines}), Context({marker: Operator(grenade/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 10, 'end': 17}, text: grenades, value: grenade, word: grenades})], word: and})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 19, 'end': 21}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 23, 'end': 32}, text: explosives, unknown: True, value: explosives, word: explosives})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'property', 'isEder', 'unknown', 'object', 'isEdee', 'notAble', 'hierarchyAble', 'queryable', 'weapon', 'grenade']}) bridge(bridge)), range: {'start': 0, 'end': 17}, text: mines and grenades, types: [], value: [Context({marker: Operator(mine/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 4}, text: mines, value: mine, word: mines}), Context({marker: Operator(grenade/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 10, 'end': 17}, text: grenades, value: grenade, word: grenades})], word: and})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 19, 'end': 21}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 23, 'end': 32}, text: explosives, unknown: True, value: explosives, word: explosives})\n\n\n",
        "Counter == 3. Applying Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'property', 'isEder', 'unknown', 'object', 'isEdee', 'notAble', 'hierarchyAble', 'queryable', 'weapon', 'grenade']}) bridge(bridge)) failed due to the matchers [Type(variable: 'type')] not being present",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'property', 'isEder', 'unknown', 'object', 'isEdee', 'notAble', 'hierarchyAble', 'queryable', 'weapon', 'grenade']}) bridge(bridge)), range: {'start': 0, 'end': 17}, value: [Context({marker: Operator(mine/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 4}, text: mines, value: mine, word: mines}), Context({marker: Operator(grenade/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 10, 'end': 17}, text: grenades, value: grenade, word: grenades})]})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 19, 'end': 21}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 23, 'end': 32}, text: explosives, unknown: True, value: explosives, word: explosives})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'property', 'isEder', 'unknown', 'object', 'isEdee', 'notAble', 'hierarchyAble', 'queryable', 'weapon', 'grenade']}) bridge(bridge)), range: {'start': 0, 'end': 17}, value: [Context({marker: Operator(mine/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 4}, text: mines, value: mine, word: mines}), Context({marker: Operator(grenade/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 10, 'end': 17}, text: grenades, value: grenade, word: grenades})]})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 19, 'end': 21}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 23, 'end': 32}, text: explosives, unknown: True, value: explosives, word: explosives})\n\n\n",
        "Counter == 4. Applying Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'property', 'isEder', 'unknown', 'object', 'isEdee', 'notAble', 'hierarchyAble', 'queryable', 'weapon', 'grenade']}) bridge(bridge)) failed due to the matchers [Type(variable: 'type')] not being present",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'property', 'isEder', 'unknown', 'object', 'isEdee', 'notAble', 'hierarchyAble', 'queryable', 'weapon', 'grenade']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 32}, types: ['mine'], value: [Context({marker: Operator(mine/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 4}, text: mines, value: mine, word: mines}), Context({marker: Operator(grenade/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 10, 'end': 17}, text: grenades, value: grenade, word: grenades})]}), range: {'start': 0, 'end': 32}, text:  are explosives, two: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 23, 'end': 32}, text: explosives, types: ['unknown'], unknown: True, value: explosives, word: explosives}), word: are})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'property', 'isEder', 'unknown', 'object', 'isEdee', 'notAble', 'hierarchyAble', 'queryable', 'weapon', 'grenade']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 32}, types: ['mine'], value: [Context({marker: Operator(mine/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 4}, text: mines, value: mine, word: mines}), Context({marker: Operator(grenade/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 10, 'end': 17}, text: grenades, value: grenade, word: grenades})]}), range: {'start': 0, 'end': 32}, text:  are explosives, two: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 23, 'end': 32}, text: explosives, types: ['unknown'], unknown: True, value: explosives, word: explosives}), word: are})\n\n\n",
        "Applying implicit. Counter 6\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/2, None, evaluator(None), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'property', 'isEder', 'unknown', 'object', 'isEdee', 'notAble', 'hierarchyAble', 'queryable', 'weapon', 'grenade']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 32}, types: ['mine'], value: [Context({marker: Operator(mine/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 4}, text: mines, value: mine, word: mines}), Context({marker: Operator(grenade/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 10, 'end': 17}, text: grenades, value: grenade, word: grenades})]}), range: {'start': 0, 'end': 32}, text:  are explosives, two: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 23, 'end': 32}, text: explosives, types: ['unknown'], unknown: True, value: explosives, word: explosives}), word: are})\n\n\n",
        "Applying implicit. Counter 6\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/2, None, evaluator(None), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'property', 'isEder', 'unknown', 'object', 'isEdee', 'notAble', 'hierarchyAble', 'queryable', 'weapon', 'grenade']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 32}, types: ['mine'], value: [Context({marker: Operator(mine/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 4}, text: mines, value: mine, word: mines}), Context({marker: Operator(grenade/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 10, 'end': 17}, text: grenades, value: grenade, word: grenades})]}), range: {'start': 0, 'end': 32}, text:  are explosives, two: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 23, 'end': 32}, text: explosives, types: ['unknown'], unknown: True, value: explosives, word: explosives}), word: are})\n\n\n",
        "Op choices were: [(('list', 0), [('grenade', 0), ('is', 0), ('mine', 0), ('unknown', 0)], 1), (('list', 1), [('is', 0), ('mine', 0), ('unknown', 0)], 2), (('unknown', 0), [('is', 0), ('mine', 0), ('unknown', 0)], 2), (('list', 1), [('is', 0), ('mine', 0), ('unknown', 1)], 3), (('list', 1), [('is', 0), ('mine', 0), ('unknown', 1)], 3), (('list', 1), [('is', 0), ('unknown', 1)], 4), (('is', 0), [('is', 0), ('unknown', 1)], 4), (('is', 1), [('is', 1)], 5)]",
        "Contexts used for choosing operators (if the wrong choices were made update the priorities array. Put the expected choice at the end of the list. you can check for loops in the priorities by adding the -cl flag and running a query): \n  Context for choosing the operator list/0 was [['grenade', 0], ['is', 0], ['mine', 0], ['unknown', 0]]. Counter 1\n  Context for choosing the operator list/1 was [['is', 0], ['mine', 0], ['unknown', 0]]. Counter 2\n  Context for choosing the operator unknown/0 was [['is', 0], ['mine', 0], ['unknown', 0]]. Counter 2\n  Context for choosing the operator list/1 was [['is', 0], ['mine', 0], ['unknown', 1]]. Counter 3\n  Context for choosing the operator list/1 was [['is', 0], ['mine', 0], ['unknown', 1]]. Counter 3\n  Context for choosing the operator list/1 was [['is', 0], ['unknown', 1]]. Counter 4\n  Context for choosing the operator is/0 was [['is', 0], ['unknown', 1]]. Counter 4\n  Context for choosing the operator is/1 was [['is', 1]]. Counter 5",
        "Associations made with probabilities (each group is a choice point. if the wrong choices were made update the associations list): "
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "list",
              0
            ],
            "ops": [
              [
                "grenade",
                0
              ],
              [
                "is",
                0
              ],
              [
                "mine",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "mine",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "mine",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "mine",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "mine",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ],
            "counter": 5
          }
        ]
      },
      "trace": "undefined",
      "contexts": [
        {
          "number": "many",
          "text": " are explosives",
          "marker": "is",
          "word": "are",
          "range": {
            "start": 0,
            "end": 32
          },
          "one": {
            "number": "many",
            "marker": "list",
            "value": [
              {
                "value": "mine",
                "number": "many",
                "text": "mines",
                "marker": "mine",
                "word": "mines",
                "range": {
                  "start": 0,
                  "end": 4
                }
              },
              {
                "value": "grenade",
                "number": "many",
                "text": "grenades",
                "marker": "grenade",
                "word": "grenades",
                "range": {
                  "start": 10,
                  "end": 17
                }
              }
            ],
            "range": {
              "start": 0,
              "end": 32
            },
            "types": [
              "list",
              "mine"
            ]
          },
          "two": {
            "marker": "unknown",
            "range": {
              "start": 23,
              "end": 32
            },
            "word": "explosives",
            "text": "explosives",
            "value": "explosives",
            "unknown": true,
            "types": [
              "unknown"
            ],
            "concept": true
          },
          "topLevel": true,
          "touchedBy": [
            "call2"
          ]
        }
      ],
      "generated": [
        "mines and grenades are explosives"
      ],
      "paraphrases": [
        "mines and grenades are explosives"
      ],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "grenade",
            0
          ],
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "mine",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "version": "7.5.0-beta.49",
      "query": "mines and grenades are explosives",
      "key": {
        "query": "mines and grenades are explosives"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "condition",
          "condition"
        ],
        [
          "explosive",
          "hierarchyAble"
        ],
        [
          "explosive",
          "isEdee"
        ],
        [
          "explosive",
          "isEder"
        ],
        [
          "explosive",
          "object"
        ],
        [
          "explosive",
          "property"
        ],
        [
          "explosive",
          "queryable"
        ],
        [
          "explosive",
          "theAble"
        ],
        [
          "grenade",
          "explosive"
        ],
        [
          "grenade",
          "hierarchyAble"
        ],
        [
          "grenade",
          "isEdee"
        ],
        [
          "grenade",
          "isEder"
        ],
        [
          "grenade",
          "object"
        ],
        [
          "grenade",
          "property"
        ],
        [
          "grenade",
          "queryable"
        ],
        [
          "grenade",
          "theAble"
        ],
        [
          "grenade",
          "weapon"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "highest",
          "condition"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "isEd",
          "isEd"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "lowest",
          "condition"
        ],
        [
          "mine",
          "explosive"
        ],
        [
          "mine",
          "hierarchyAble"
        ],
        [
          "mine",
          "isEdee"
        ],
        [
          "mine",
          "isEder"
        ],
        [
          "mine",
          "object"
        ],
        [
          "mine",
          "property"
        ],
        [
          "mine",
          "queryable"
        ],
        [
          "mine",
          "theAble"
        ],
        [
          "mine",
          "weapon"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "pistol",
          "hierarchyAble"
        ],
        [
          "pistol",
          "isEdee"
        ],
        [
          "pistol",
          "isEder"
        ],
        [
          "pistol",
          "object"
        ],
        [
          "pistol",
          "property"
        ],
        [
          "pistol",
          "queryable"
        ],
        [
          "pistol",
          "theAble"
        ],
        [
          "pistol",
          "weapon"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "isEd"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "rifle",
          "hierarchyAble"
        ],
        [
          "rifle",
          "isEdee"
        ],
        [
          "rifle",
          "isEder"
        ],
        [
          "rifle",
          "object"
        ],
        [
          "rifle",
          "property"
        ],
        [
          "rifle",
          "queryable"
        ],
        [
          "rifle",
          "theAble"
        ],
        [
          "rifle",
          "weapon"
        ],
        [
          "shotgun",
          "hierarchyAble"
        ],
        [
          "shotgun",
          "isEdee"
        ],
        [
          "shotgun",
          "isEder"
        ],
        [
          "shotgun",
          "object"
        ],
        [
          "shotgun",
          "property"
        ],
        [
          "shotgun",
          "queryable"
        ],
        [
          "shotgun",
          "theAble"
        ],
        [
          "shotgun",
          "weapon"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "weapon",
          "hierarchyAble"
        ],
        [
          "weapon",
          "isEdee"
        ],
        [
          "weapon",
          "isEder"
        ],
        [
          "weapon",
          "object"
        ],
        [
          "weapon",
          "property"
        ],
        [
          "weapon",
          "queryable"
        ],
        [
          "weapon",
          "theAble"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ]
      ],
      "logs": [
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(explosive/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 9}, text: explosives, value: explosive, word: explosives})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 11, 'end': 13}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(weapon/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 15, 'end': 21}, text: weapons, value: weapon, word: weapons})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(explosive/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 9}, text: explosives, value: explosive, word: explosives})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 11, 'end': 13}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(weapon/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 15, 'end': 21}, text: weapons, value: weapon, word: weapons})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(explosive/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 9}, text: explosives, value: explosive, word: explosives})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 11, 'end': 13}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(weapon/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 15, 'end': 21}, text: weapons, value: weapon, word: weapons})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(explosive/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 9}, text: explosives, value: explosive, word: explosives})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 11, 'end': 13}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(weapon/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 15, 'end': 21}, text: weapons, value: weapon, word: weapons})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(explosive/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 9}, text: explosives, value: explosive, word: explosives})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 11, 'end': 13}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(weapon/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 15, 'end': 21}, text: weapons, value: weapon, word: weapons})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(explosive/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 9}, text: explosives, value: explosive, word: explosives})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 11, 'end': 13}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(weapon/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 15, 'end': 21}, text: weapons, value: weapon, word: weapons})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(explosive/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 21}, text: explosives, types: ['explosive'], value: explosive, word: explosives}), range: {'start': 0, 'end': 21}, text: explosives are weapons, two: Context({marker: Operator(weapon/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 15, 'end': 21}, text: weapons, types: ['weapon'], value: weapon, word: weapons}), word: are})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(explosive/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 21}, text: explosives, types: ['explosive'], value: explosive, word: explosives}), range: {'start': 0, 'end': 21}, text: explosives are weapons, two: Context({marker: Operator(weapon/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 15, 'end': 21}, text: weapons, types: ['weapon'], value: weapon, word: weapons}), word: are})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/2, None, evaluator(None), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(explosive/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 21}, text: explosives, types: ['explosive'], value: explosive, word: explosives}), range: {'start': 0, 'end': 21}, text: explosives are weapons, two: Context({marker: Operator(weapon/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 15, 'end': 21}, text: weapons, types: ['weapon'], value: weapon, word: weapons}), word: are})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/2, None, evaluator(None), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(explosive/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 21}, text: explosives, types: ['explosive'], value: explosive, word: explosives}), range: {'start': 0, 'end': 21}, text: explosives are weapons, two: Context({marker: Operator(weapon/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 15, 'end': 21}, text: weapons, types: ['weapon'], value: weapon, word: weapons}), word: are})\n\n\n",
        "Op choices were: [(('explosive', 0), [('explosive', 0), ('is', 0), ('weapon', 0)], 1), (('weapon', 0), [('is', 0), ('weapon', 0)], 2), (('is', 0), [('is', 0)], 3), (('is', 1), [('is', 1)], 4)]",
        "Contexts used for choosing operators (if the wrong choices were made update the priorities array. Put the expected choice at the end of the list. you can check for loops in the priorities by adding the -cl flag and running a query): \n  Context for choosing the operator explosive/0 was [['explosive', 0], ['is', 0], ['weapon', 0]]. Counter 1\n  Context for choosing the operator weapon/0 was [['is', 0], ['weapon', 0]]. Counter 2\n  Context for choosing the operator is/0 was [['is', 0]]. Counter 3\n  Context for choosing the operator is/1 was [['is', 1]]. Counter 4",
        "Associations made with probabilities (each group is a choice point. if the wrong choices were made update the associations list): \n  Group 0\n    1.0 - [['explosive', 0], \">>>>1 ['is', 0] <<<<1\", ['weapon', 0]]\n      (('explosive', 0), ('is', 0), ('weapon', 0))\n    1.0 - [['explosive', 0], \">>>>1 ['isEd', 0] <<<<1\", ['weapon', 0]]\n      (('explosive', 0), ('isEd', 0), ('weapon', 0))\n  Group 1\n    1.0 - [['explosive', 0], \">>>>1 ['is', 0] <<<<1\", ['weapon', 0]]\n      (('explosive', 0), ('is', 0), ('weapon', 0))\n    1.0 - [['explosive', 0], \">>>>1 ['isEd', 0] <<<<1\", ['weapon', 0]]\n      (('explosive', 0), ('isEd', 0), ('weapon', 0))\n  Group 2\n    1.0 - [['explosive', 0], \">>>>1 ['is', 0] <<<<1\", ['weapon', 0]]\n      (('explosive', 0), ('is', 0), ('weapon', 0))\n    1.0 - [['explosive', 0], \">>>>1 ['isEd', 0] <<<<1\", ['weapon', 0]]\n      (('explosive', 0), ('isEd', 0), ('weapon', 0))"
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "explosive",
              0
            ],
            "ops": [
              [
                "explosive",
                0
              ],
              [
                "is",
                0
              ],
              [
                "weapon",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "weapon",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "weapon",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ],
            "counter": 4
          }
        ]
      },
      "trace": "undefined",
      "contexts": [
        {
          "number": "many",
          "text": "explosives are weapons",
          "marker": "is",
          "word": "are",
          "range": {
            "start": 0,
            "end": 21
          },
          "one": {
            "number": "many",
            "value": "explosive",
            "text": "explosives",
            "marker": "explosive",
            "word": "explosives",
            "range": {
              "start": 0,
              "end": 21
            },
            "types": [
              "explosive"
            ]
          },
          "two": {
            "value": "weapon",
            "number": "many",
            "text": "weapons",
            "marker": "weapon",
            "word": "weapons",
            "range": {
              "start": 15,
              "end": 21
            },
            "types": [
              "weapon"
            ],
            "concept": true
          },
          "topLevel": true,
          "touchedBy": [
            "call2"
          ]
        }
      ],
      "generated": [
        "explosives are weapons"
      ],
      "paraphrases": [
        "explosives are weapons"
      ],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "explosive",
            0
          ],
          [
            "is",
            0
          ],
          [
            "weapon",
            0
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "weapon",
            0
          ]
        ]
      ],
      "version": "7.5.0-beta.49",
      "query": "explosives are weapons",
      "key": {
        "query": "explosives are weapons"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "condition",
          "condition"
        ],
        [
          "explosive",
          "hierarchyAble"
        ],
        [
          "explosive",
          "isEdee"
        ],
        [
          "explosive",
          "isEder"
        ],
        [
          "explosive",
          "object"
        ],
        [
          "explosive",
          "property"
        ],
        [
          "explosive",
          "queryable"
        ],
        [
          "explosive",
          "theAble"
        ],
        [
          "explosive",
          "weapon"
        ],
        [
          "grenade",
          "explosive"
        ],
        [
          "grenade",
          "hierarchyAble"
        ],
        [
          "grenade",
          "isEdee"
        ],
        [
          "grenade",
          "isEder"
        ],
        [
          "grenade",
          "object"
        ],
        [
          "grenade",
          "property"
        ],
        [
          "grenade",
          "queryable"
        ],
        [
          "grenade",
          "theAble"
        ],
        [
          "grenade",
          "weapon"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "highest",
          "condition"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "isEd",
          "isEd"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "lowest",
          "condition"
        ],
        [
          "mine",
          "explosive"
        ],
        [
          "mine",
          "hierarchyAble"
        ],
        [
          "mine",
          "isEdee"
        ],
        [
          "mine",
          "isEder"
        ],
        [
          "mine",
          "object"
        ],
        [
          "mine",
          "property"
        ],
        [
          "mine",
          "queryable"
        ],
        [
          "mine",
          "theAble"
        ],
        [
          "mine",
          "weapon"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "pistol",
          "hierarchyAble"
        ],
        [
          "pistol",
          "isEdee"
        ],
        [
          "pistol",
          "isEder"
        ],
        [
          "pistol",
          "object"
        ],
        [
          "pistol",
          "property"
        ],
        [
          "pistol",
          "queryable"
        ],
        [
          "pistol",
          "theAble"
        ],
        [
          "pistol",
          "weapon"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "isEd"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "rifle",
          "hierarchyAble"
        ],
        [
          "rifle",
          "isEdee"
        ],
        [
          "rifle",
          "isEder"
        ],
        [
          "rifle",
          "object"
        ],
        [
          "rifle",
          "property"
        ],
        [
          "rifle",
          "queryable"
        ],
        [
          "rifle",
          "theAble"
        ],
        [
          "rifle",
          "weapon"
        ],
        [
          "shotgun",
          "hierarchyAble"
        ],
        [
          "shotgun",
          "isEdee"
        ],
        [
          "shotgun",
          "isEder"
        ],
        [
          "shotgun",
          "object"
        ],
        [
          "shotgun",
          "property"
        ],
        [
          "shotgun",
          "queryable"
        ],
        [
          "shotgun",
          "theAble"
        ],
        [
          "shotgun",
          "weapon"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "weapon",
          "hierarchyAble"
        ],
        [
          "weapon",
          "isEdee"
        ],
        [
          "weapon",
          "isEder"
        ],
        [
          "weapon",
          "object"
        ],
        [
          "weapon",
          "property"
        ],
        [
          "weapon",
          "queryable"
        ],
        [
          "weapon",
          "theAble"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ]
      ],
      "logs": [
        "Undefined word 'firearms'",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(pistol/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 6}, text: pistols, value: pistol, word: pistols})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(rifle/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 8, 'end': 13}, text: rifles, value: rifle, word: rifles})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/0, PASS, None, evaluator(Bridge('{ ...next(operator), value: append(before, after) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 17}, text: and, word: and})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(shotgun/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 19, 'end': 26}, text: shotguns, value: shotgun, word: shotguns})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 28, 'end': 30}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 32, 'end': 39}, text: firearms, value: firearms, word: firearms})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(pistol/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 6}, text: pistols, value: pistol, word: pistols})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(rifle/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 8, 'end': 13}, text: rifles, value: rifle, word: rifles})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/0, PASS, None, evaluator(Bridge('{ ...next(operator), value: append(before, after) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 17}, text: and, word: and})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(shotgun/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 19, 'end': 26}, text: shotguns, value: shotgun, word: shotguns})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 28, 'end': 30}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 32, 'end': 39}, text: firearms, value: firearms, word: firearms})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(pistol/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 6}, text: pistols, value: pistol, word: pistols})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'property', 'isEder', 'unknown', 'object', 'isEdee', 'notAble', 'hierarchyAble', 'queryable', 'shotgun', 'weapon']}) bridge(bridge)), range: {'start': 8, 'end': 26}, text: rifles and shotguns, types: [], value: [Context({marker: Operator(rifle/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 8, 'end': 13}, text: rifles, value: rifle, word: rifles}), Context({marker: Operator(shotgun/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 19, 'end': 26}, text: shotguns, value: shotgun, word: shotguns})], word: and})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 28, 'end': 30}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 32, 'end': 39}, text: firearms, value: firearms, word: firearms})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(pistol/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 6}, text: pistols, value: pistol, word: pistols})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'property', 'isEder', 'unknown', 'object', 'isEdee', 'notAble', 'hierarchyAble', 'queryable', 'shotgun', 'weapon']}) bridge(bridge)), range: {'start': 8, 'end': 26}, text: rifles and shotguns, types: [], value: [Context({marker: Operator(rifle/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 8, 'end': 13}, text: rifles, value: rifle, word: rifles}), Context({marker: Operator(shotgun/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 19, 'end': 26}, text: shotguns, value: shotgun, word: shotguns})], word: and})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 28, 'end': 30}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 32, 'end': 39}, text: firearms, value: firearms, word: firearms})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'property', 'isEder', 'unknown', 'object', 'isEdee', 'notAble', 'hierarchyAble', 'queryable', 'shotgun', 'weapon']}) bridge(bridge)), range: {'start': 0, 'end': 26}, text: pistols rifles and shotguns, types: [], value: [Context({marker: Operator(pistol/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 6}, text: pistols, value: pistol, word: pistols}), Context({marker: Operator(rifle/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 8, 'end': 13}, text: rifles, value: rifle, word: rifles}), Context({marker: Operator(shotgun/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 19, 'end': 26}, text: shotguns, value: shotgun, word: shotguns})], word: and})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 28, 'end': 30}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 32, 'end': 39}, text: firearms, value: firearms, word: firearms})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'property', 'isEder', 'unknown', 'object', 'isEdee', 'notAble', 'hierarchyAble', 'queryable', 'shotgun', 'weapon']}) bridge(bridge)), range: {'start': 0, 'end': 26}, text: pistols rifles and shotguns, types: [], value: [Context({marker: Operator(pistol/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 6}, text: pistols, value: pistol, word: pistols}), Context({marker: Operator(rifle/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 8, 'end': 13}, text: rifles, value: rifle, word: rifles}), Context({marker: Operator(shotgun/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 19, 'end': 26}, text: shotguns, value: shotgun, word: shotguns})], word: and})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 28, 'end': 30}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 32, 'end': 39}, text: firearms, value: firearms, word: firearms})\n\n\n",
        "Counter == 3. Applying Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'property', 'isEder', 'unknown', 'object', 'isEdee', 'notAble', 'hierarchyAble', 'queryable', 'shotgun', 'weapon']}) bridge(bridge)) failed due to the matchers [Type(variable: 'type')] not being present",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'property', 'isEder', 'unknown', 'object', 'isEdee', 'notAble', 'hierarchyAble', 'queryable', 'shotgun', 'weapon']}) bridge(bridge)), range: {'start': 0, 'end': 26}, text: pistols rifles and shotguns, types: [], value: [Context({marker: Operator(pistol/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 6}, text: pistols, value: pistol, word: pistols}), Context({marker: Operator(rifle/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 8, 'end': 13}, text: rifles, value: rifle, word: rifles}), Context({marker: Operator(shotgun/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 19, 'end': 26}, text: shotguns, value: shotgun, word: shotguns})], word: and})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 28, 'end': 30}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 32, 'end': 39}, text: firearms, unknown: True, value: firearms, word: firearms})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'property', 'isEder', 'unknown', 'object', 'isEdee', 'notAble', 'hierarchyAble', 'queryable', 'shotgun', 'weapon']}) bridge(bridge)), range: {'start': 0, 'end': 26}, text: pistols rifles and shotguns, types: [], value: [Context({marker: Operator(pistol/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 6}, text: pistols, value: pistol, word: pistols}), Context({marker: Operator(rifle/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 8, 'end': 13}, text: rifles, value: rifle, word: rifles}), Context({marker: Operator(shotgun/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 19, 'end': 26}, text: shotguns, value: shotgun, word: shotguns})], word: and})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 28, 'end': 30}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 32, 'end': 39}, text: firearms, unknown: True, value: firearms, word: firearms})\n\n\n",
        "Counter == 4. Applying Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'property', 'isEder', 'unknown', 'object', 'isEdee', 'notAble', 'hierarchyAble', 'queryable', 'shotgun', 'weapon']}) bridge(bridge)) failed due to the matchers [Type(variable: 'type')] not being present",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'property', 'isEder', 'unknown', 'object', 'isEdee', 'notAble', 'hierarchyAble', 'queryable', 'shotgun', 'weapon']}) bridge(bridge)), range: {'start': 0, 'end': 26}, value: [Context({marker: Operator(pistol/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 6}, text: pistols, value: pistol, word: pistols}), Context({marker: Operator(rifle/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 8, 'end': 13}, text: rifles, value: rifle, word: rifles}), Context({marker: Operator(shotgun/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 19, 'end': 26}, text: shotguns, value: shotgun, word: shotguns})]})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 28, 'end': 30}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 32, 'end': 39}, text: firearms, unknown: True, value: firearms, word: firearms})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'property', 'isEder', 'unknown', 'object', 'isEdee', 'notAble', 'hierarchyAble', 'queryable', 'shotgun', 'weapon']}) bridge(bridge)), range: {'start': 0, 'end': 26}, value: [Context({marker: Operator(pistol/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 6}, text: pistols, value: pistol, word: pistols}), Context({marker: Operator(rifle/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 8, 'end': 13}, text: rifles, value: rifle, word: rifles}), Context({marker: Operator(shotgun/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 19, 'end': 26}, text: shotguns, value: shotgun, word: shotguns})]})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 28, 'end': 30}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 32, 'end': 39}, text: firearms, unknown: True, value: firearms, word: firearms})\n\n\n",
        "Counter == 5. Applying Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'property', 'isEder', 'unknown', 'object', 'isEdee', 'notAble', 'hierarchyAble', 'queryable', 'shotgun', 'weapon']}) bridge(bridge)) failed due to the matchers [Type(variable: 'type')] not being present",
        "Applying implicit. Counter 6\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'property', 'isEder', 'unknown', 'object', 'isEdee', 'notAble', 'hierarchyAble', 'queryable', 'shotgun', 'weapon']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 39}, types: ['pistol'], value: [Context({marker: Operator(pistol/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 6}, text: pistols, value: pistol, word: pistols}), Context({marker: Operator(rifle/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 8, 'end': 13}, text: rifles, value: rifle, word: rifles}), Context({marker: Operator(shotgun/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 19, 'end': 26}, text: shotguns, value: shotgun, word: shotguns})]}), range: {'start': 0, 'end': 39}, text:  are firearms, two: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 32, 'end': 39}, text: firearms, types: ['unknown'], unknown: True, value: firearms, word: firearms}), word: are})\n\n\n",
        "Applying implicit. Counter 6\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'property', 'isEder', 'unknown', 'object', 'isEdee', 'notAble', 'hierarchyAble', 'queryable', 'shotgun', 'weapon']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 39}, types: ['pistol'], value: [Context({marker: Operator(pistol/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 6}, text: pistols, value: pistol, word: pistols}), Context({marker: Operator(rifle/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 8, 'end': 13}, text: rifles, value: rifle, word: rifles}), Context({marker: Operator(shotgun/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 19, 'end': 26}, text: shotguns, value: shotgun, word: shotguns})]}), range: {'start': 0, 'end': 39}, text:  are firearms, two: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 32, 'end': 39}, text: firearms, types: ['unknown'], unknown: True, value: firearms, word: firearms}), word: are})\n\n\n",
        "Applying implicit. Counter 7\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/2, None, evaluator(None), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'property', 'isEder', 'unknown', 'object', 'isEdee', 'notAble', 'hierarchyAble', 'queryable', 'shotgun', 'weapon']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 39}, types: ['pistol'], value: [Context({marker: Operator(pistol/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 6}, text: pistols, value: pistol, word: pistols}), Context({marker: Operator(rifle/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 8, 'end': 13}, text: rifles, value: rifle, word: rifles}), Context({marker: Operator(shotgun/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 19, 'end': 26}, text: shotguns, value: shotgun, word: shotguns})]}), range: {'start': 0, 'end': 39}, text:  are firearms, two: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 32, 'end': 39}, text: firearms, types: ['unknown'], unknown: True, value: firearms, word: firearms}), word: are})\n\n\n",
        "Applying implicit. Counter 7\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/2, None, evaluator(None), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'property', 'isEder', 'unknown', 'object', 'isEdee', 'notAble', 'hierarchyAble', 'queryable', 'shotgun', 'weapon']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 39}, types: ['pistol'], value: [Context({marker: Operator(pistol/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 6}, text: pistols, value: pistol, word: pistols}), Context({marker: Operator(rifle/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 8, 'end': 13}, text: rifles, value: rifle, word: rifles}), Context({marker: Operator(shotgun/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 19, 'end': 26}, text: shotguns, value: shotgun, word: shotguns})]}), range: {'start': 0, 'end': 39}, text:  are firearms, two: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 32, 'end': 39}, text: firearms, types: ['unknown'], unknown: True, value: firearms, word: firearms}), word: are})\n\n\n",
        "Op choices were: [(('list', 0), [('is', 0), ('pistol', 0), ('rifle', 0), ('shotgun', 0), ('unknown', 0)], 1), (('list', 1), [('is', 0), ('pistol', 0), ('rifle', 0), ('unknown', 0)], 2), (('list', 1), [('is', 0), ('pistol', 0), ('unknown', 0)], 3), (('unknown', 0), [('is', 0), ('pistol', 0), ('unknown', 0)], 3), (('list', 1), [('is', 0), ('pistol', 0), ('unknown', 1)], 4), (('list', 1), [('is', 0), ('pistol', 0), ('unknown', 1)], 4), (('list', 1), [('is', 0), ('unknown', 1)], 5), (('is', 0), [('is', 0), ('unknown', 1)], 5), (('is', 1), [('is', 1)], 6)]",
        "Contexts used for choosing operators (if the wrong choices were made update the priorities array. Put the expected choice at the end of the list. you can check for loops in the priorities by adding the -cl flag and running a query): \n  Context for choosing the operator list/0 was [['is', 0], ['pistol', 0], ['rifle', 0], ['shotgun', 0], ['unknown', 0]]. Counter 1\n  Context for choosing the operator list/1 was [['is', 0], ['pistol', 0], ['rifle', 0], ['unknown', 0]]. Counter 2\n  Context for choosing the operator list/1 was [['is', 0], ['pistol', 0], ['unknown', 0]]. Counter 3\n  Context for choosing the operator unknown/0 was [['is', 0], ['pistol', 0], ['unknown', 0]]. Counter 3\n  Context for choosing the operator list/1 was [['is', 0], ['pistol', 0], ['unknown', 1]]. Counter 4\n  Context for choosing the operator list/1 was [['is', 0], ['pistol', 0], ['unknown', 1]]. Counter 4\n  Context for choosing the operator list/1 was [['is', 0], ['unknown', 1]]. Counter 5\n  Context for choosing the operator is/0 was [['is', 0], ['unknown', 1]]. Counter 5\n  Context for choosing the operator is/1 was [['is', 1]]. Counter 6",
        "Associations made with probabilities (each group is a choice point. if the wrong choices were made update the associations list): "
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "list",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "pistol",
                0
              ],
              [
                "rifle",
                0
              ],
              [
                "shotgun",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "pistol",
                0
              ],
              [
                "rifle",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "pistol",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "pistol",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "pistol",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "pistol",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 5
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 5
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ],
            "counter": 6
          }
        ]
      },
      "trace": "undefined",
      "contexts": [
        {
          "number": "many",
          "text": " are firearms",
          "marker": "is",
          "word": "are",
          "range": {
            "start": 0,
            "end": 39
          },
          "one": {
            "number": "many",
            "marker": "list",
            "value": [
              {
                "value": "pistol",
                "number": "many",
                "text": "pistols",
                "marker": "pistol",
                "word": "pistols",
                "range": {
                  "start": 0,
                  "end": 6
                }
              },
              {
                "value": "rifle",
                "number": "many",
                "text": "rifles",
                "marker": "rifle",
                "word": "rifles",
                "range": {
                  "start": 8,
                  "end": 13
                }
              },
              {
                "value": "shotgun",
                "number": "many",
                "text": "shotguns",
                "marker": "shotgun",
                "word": "shotguns",
                "range": {
                  "start": 19,
                  "end": 26
                }
              }
            ],
            "range": {
              "start": 0,
              "end": 39
            },
            "types": [
              "list",
              "pistol"
            ]
          },
          "two": {
            "marker": "unknown",
            "range": {
              "start": 32,
              "end": 39
            },
            "word": "firearms",
            "text": "firearms",
            "value": "firearms",
            "unknown": true,
            "types": [
              "unknown"
            ],
            "concept": true
          },
          "topLevel": true,
          "touchedBy": [
            "call2"
          ]
        }
      ],
      "generated": [
        "pistols, rifles and shotguns are firearms"
      ],
      "paraphrases": [
        "pistols, rifles and shotguns are firearms"
      ],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "pistol",
            0
          ],
          [
            "rifle",
            0
          ],
          [
            "shotgun",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ],
          [
            "pistol",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "version": "7.5.0-beta.49",
      "query": "pistols rifles and shotguns are firearms",
      "key": {
        "query": "pistols rifles and shotguns are firearms"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "condition",
          "condition"
        ],
        [
          "explosive",
          "hierarchyAble"
        ],
        [
          "explosive",
          "isEdee"
        ],
        [
          "explosive",
          "isEder"
        ],
        [
          "explosive",
          "object"
        ],
        [
          "explosive",
          "property"
        ],
        [
          "explosive",
          "queryable"
        ],
        [
          "explosive",
          "theAble"
        ],
        [
          "explosive",
          "weapon"
        ],
        [
          "firearm",
          "hierarchyAble"
        ],
        [
          "firearm",
          "isEdee"
        ],
        [
          "firearm",
          "isEder"
        ],
        [
          "firearm",
          "object"
        ],
        [
          "firearm",
          "property"
        ],
        [
          "firearm",
          "queryable"
        ],
        [
          "firearm",
          "theAble"
        ],
        [
          "grenade",
          "explosive"
        ],
        [
          "grenade",
          "hierarchyAble"
        ],
        [
          "grenade",
          "isEdee"
        ],
        [
          "grenade",
          "isEder"
        ],
        [
          "grenade",
          "object"
        ],
        [
          "grenade",
          "property"
        ],
        [
          "grenade",
          "queryable"
        ],
        [
          "grenade",
          "theAble"
        ],
        [
          "grenade",
          "weapon"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "highest",
          "condition"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "isEd",
          "isEd"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "lowest",
          "condition"
        ],
        [
          "mine",
          "explosive"
        ],
        [
          "mine",
          "hierarchyAble"
        ],
        [
          "mine",
          "isEdee"
        ],
        [
          "mine",
          "isEder"
        ],
        [
          "mine",
          "object"
        ],
        [
          "mine",
          "property"
        ],
        [
          "mine",
          "queryable"
        ],
        [
          "mine",
          "theAble"
        ],
        [
          "mine",
          "weapon"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "pistol",
          "firearm"
        ],
        [
          "pistol",
          "hierarchyAble"
        ],
        [
          "pistol",
          "isEdee"
        ],
        [
          "pistol",
          "isEder"
        ],
        [
          "pistol",
          "object"
        ],
        [
          "pistol",
          "property"
        ],
        [
          "pistol",
          "queryable"
        ],
        [
          "pistol",
          "theAble"
        ],
        [
          "pistol",
          "weapon"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "isEd"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "rifle",
          "firearm"
        ],
        [
          "rifle",
          "hierarchyAble"
        ],
        [
          "rifle",
          "isEdee"
        ],
        [
          "rifle",
          "isEder"
        ],
        [
          "rifle",
          "object"
        ],
        [
          "rifle",
          "property"
        ],
        [
          "rifle",
          "queryable"
        ],
        [
          "rifle",
          "theAble"
        ],
        [
          "rifle",
          "weapon"
        ],
        [
          "shotgun",
          "firearm"
        ],
        [
          "shotgun",
          "hierarchyAble"
        ],
        [
          "shotgun",
          "isEdee"
        ],
        [
          "shotgun",
          "isEder"
        ],
        [
          "shotgun",
          "object"
        ],
        [
          "shotgun",
          "property"
        ],
        [
          "shotgun",
          "queryable"
        ],
        [
          "shotgun",
          "theAble"
        ],
        [
          "shotgun",
          "weapon"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "weapon",
          "hierarchyAble"
        ],
        [
          "weapon",
          "isEdee"
        ],
        [
          "weapon",
          "isEder"
        ],
        [
          "weapon",
          "object"
        ],
        [
          "weapon",
          "property"
        ],
        [
          "weapon",
          "queryable"
        ],
        [
          "weapon",
          "theAble"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ]
      ],
      "logs": [
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(firearm/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 7}, text: firearms, value: firearm, word: firearms})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 9, 'end': 11}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(weapon/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 13, 'end': 19}, text: weapons, value: weapon, word: weapons})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(firearm/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 7}, text: firearms, value: firearm, word: firearms})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 9, 'end': 11}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(weapon/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 13, 'end': 19}, text: weapons, value: weapon, word: weapons})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(firearm/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 7}, text: firearms, value: firearm, word: firearms})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 9, 'end': 11}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(weapon/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 13, 'end': 19}, text: weapons, value: weapon, word: weapons})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(firearm/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 7}, text: firearms, value: firearm, word: firearms})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 9, 'end': 11}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(weapon/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 13, 'end': 19}, text: weapons, value: weapon, word: weapons})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(firearm/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 7}, text: firearms, value: firearm, word: firearms})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 9, 'end': 11}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(weapon/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 13, 'end': 19}, text: weapons, value: weapon, word: weapons})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(firearm/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 7}, text: firearms, value: firearm, word: firearms})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 9, 'end': 11}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(weapon/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 13, 'end': 19}, text: weapons, value: weapon, word: weapons})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(firearm/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 19}, text: firearms, types: ['firearm'], value: firearm, word: firearms}), range: {'start': 0, 'end': 19}, text: firearms are weapons, two: Context({marker: Operator(weapon/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 13, 'end': 19}, text: weapons, types: ['weapon'], value: weapon, word: weapons}), word: are})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(firearm/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 19}, text: firearms, types: ['firearm'], value: firearm, word: firearms}), range: {'start': 0, 'end': 19}, text: firearms are weapons, two: Context({marker: Operator(weapon/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 13, 'end': 19}, text: weapons, types: ['weapon'], value: weapon, word: weapons}), word: are})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/2, None, evaluator(None), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(firearm/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 19}, text: firearms, types: ['firearm'], value: firearm, word: firearms}), range: {'start': 0, 'end': 19}, text: firearms are weapons, two: Context({marker: Operator(weapon/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 13, 'end': 19}, text: weapons, types: ['weapon'], value: weapon, word: weapons}), word: are})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/2, None, evaluator(None), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(firearm/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 19}, text: firearms, types: ['firearm'], value: firearm, word: firearms}), range: {'start': 0, 'end': 19}, text: firearms are weapons, two: Context({marker: Operator(weapon/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 13, 'end': 19}, text: weapons, types: ['weapon'], value: weapon, word: weapons}), word: are})\n\n\n",
        "Op choices were: [(('firearm', 0), [('firearm', 0), ('is', 0), ('weapon', 0)], 1), (('weapon', 0), [('is', 0), ('weapon', 0)], 2), (('is', 0), [('is', 0)], 3), (('is', 1), [('is', 1)], 4)]",
        "Contexts used for choosing operators (if the wrong choices were made update the priorities array. Put the expected choice at the end of the list. you can check for loops in the priorities by adding the -cl flag and running a query): \n  Context for choosing the operator firearm/0 was [['firearm', 0], ['is', 0], ['weapon', 0]]. Counter 1\n  Context for choosing the operator weapon/0 was [['is', 0], ['weapon', 0]]. Counter 2\n  Context for choosing the operator is/0 was [['is', 0]]. Counter 3\n  Context for choosing the operator is/1 was [['is', 1]]. Counter 4",
        "Associations made with probabilities (each group is a choice point. if the wrong choices were made update the associations list): \n  Group 0\n    1.0 - [['firearm', 0], \">>>>1 ['is', 0] <<<<1\", ['weapon', 0]]\n      (('firearm', 0), ('is', 0), ('weapon', 0))\n    1.0 - [['firearm', 0], \">>>>1 ['isEd', 0] <<<<1\", ['weapon', 0]]\n      (('firearm', 0), ('isEd', 0), ('weapon', 0))\n  Group 1\n    1.0 - [['firearm', 0], \">>>>1 ['is', 0] <<<<1\", ['weapon', 0]]\n      (('firearm', 0), ('is', 0), ('weapon', 0))\n    1.0 - [['firearm', 0], \">>>>1 ['isEd', 0] <<<<1\", ['weapon', 0]]\n      (('firearm', 0), ('isEd', 0), ('weapon', 0))\n  Group 2\n    1.0 - [['firearm', 0], \">>>>1 ['is', 0] <<<<1\", ['weapon', 0]]\n      (('firearm', 0), ('is', 0), ('weapon', 0))\n    1.0 - [['firearm', 0], \">>>>1 ['isEd', 0] <<<<1\", ['weapon', 0]]\n      (('firearm', 0), ('isEd', 0), ('weapon', 0))"
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "firearm",
              0
            ],
            "ops": [
              [
                "firearm",
                0
              ],
              [
                "is",
                0
              ],
              [
                "weapon",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "weapon",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "weapon",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ],
            "counter": 4
          }
        ]
      },
      "trace": "undefined",
      "contexts": [
        {
          "number": "many",
          "text": "firearms are weapons",
          "marker": "is",
          "word": "are",
          "range": {
            "start": 0,
            "end": 19
          },
          "one": {
            "number": "many",
            "value": "firearm",
            "text": "firearms",
            "marker": "firearm",
            "word": "firearms",
            "range": {
              "start": 0,
              "end": 19
            },
            "types": [
              "firearm"
            ]
          },
          "two": {
            "value": "weapon",
            "number": "many",
            "text": "weapons",
            "marker": "weapon",
            "word": "weapons",
            "range": {
              "start": 13,
              "end": 19
            },
            "types": [
              "weapon"
            ],
            "concept": true
          },
          "topLevel": true,
          "touchedBy": [
            "call2"
          ]
        }
      ],
      "generated": [
        "firearms are weapons"
      ],
      "paraphrases": [
        "firearms are weapons"
      ],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "firearm",
            0
          ],
          [
            "is",
            0
          ],
          [
            "weapon",
            0
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "weapon",
            0
          ]
        ]
      ],
      "version": "7.5.0-beta.49",
      "query": "firearms are weapons",
      "key": {
        "query": "firearms are weapons"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "condition",
          "condition"
        ],
        [
          "explosive",
          "hierarchyAble"
        ],
        [
          "explosive",
          "isEdee"
        ],
        [
          "explosive",
          "isEder"
        ],
        [
          "explosive",
          "object"
        ],
        [
          "explosive",
          "property"
        ],
        [
          "explosive",
          "queryable"
        ],
        [
          "explosive",
          "theAble"
        ],
        [
          "explosive",
          "weapon"
        ],
        [
          "firearm",
          "hierarchyAble"
        ],
        [
          "firearm",
          "isEdee"
        ],
        [
          "firearm",
          "isEder"
        ],
        [
          "firearm",
          "object"
        ],
        [
          "firearm",
          "property"
        ],
        [
          "firearm",
          "queryable"
        ],
        [
          "firearm",
          "theAble"
        ],
        [
          "firearm",
          "weapon"
        ],
        [
          "grenade",
          "explosive"
        ],
        [
          "grenade",
          "hierarchyAble"
        ],
        [
          "grenade",
          "isEdee"
        ],
        [
          "grenade",
          "isEder"
        ],
        [
          "grenade",
          "object"
        ],
        [
          "grenade",
          "property"
        ],
        [
          "grenade",
          "queryable"
        ],
        [
          "grenade",
          "theAble"
        ],
        [
          "grenade",
          "weapon"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "highest",
          "condition"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "isEd",
          "isEd"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "lowest",
          "condition"
        ],
        [
          "mine",
          "explosive"
        ],
        [
          "mine",
          "hierarchyAble"
        ],
        [
          "mine",
          "isEdee"
        ],
        [
          "mine",
          "isEder"
        ],
        [
          "mine",
          "object"
        ],
        [
          "mine",
          "property"
        ],
        [
          "mine",
          "queryable"
        ],
        [
          "mine",
          "theAble"
        ],
        [
          "mine",
          "weapon"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "pistol",
          "firearm"
        ],
        [
          "pistol",
          "hierarchyAble"
        ],
        [
          "pistol",
          "isEdee"
        ],
        [
          "pistol",
          "isEder"
        ],
        [
          "pistol",
          "object"
        ],
        [
          "pistol",
          "property"
        ],
        [
          "pistol",
          "queryable"
        ],
        [
          "pistol",
          "theAble"
        ],
        [
          "pistol",
          "weapon"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "isEd"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "rifle",
          "firearm"
        ],
        [
          "rifle",
          "hierarchyAble"
        ],
        [
          "rifle",
          "isEdee"
        ],
        [
          "rifle",
          "isEder"
        ],
        [
          "rifle",
          "object"
        ],
        [
          "rifle",
          "property"
        ],
        [
          "rifle",
          "queryable"
        ],
        [
          "rifle",
          "theAble"
        ],
        [
          "rifle",
          "weapon"
        ],
        [
          "shotgun",
          "firearm"
        ],
        [
          "shotgun",
          "hierarchyAble"
        ],
        [
          "shotgun",
          "isEdee"
        ],
        [
          "shotgun",
          "isEder"
        ],
        [
          "shotgun",
          "object"
        ],
        [
          "shotgun",
          "property"
        ],
        [
          "shotgun",
          "queryable"
        ],
        [
          "shotgun",
          "theAble"
        ],
        [
          "shotgun",
          "weapon"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "weapon",
          "hierarchyAble"
        ],
        [
          "weapon",
          "isEdee"
        ],
        [
          "weapon",
          "isEder"
        ],
        [
          "weapon",
          "object"
        ],
        [
          "weapon",
          "property"
        ],
        [
          "weapon",
          "queryable"
        ],
        [
          "weapon",
          "theAble"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ]
      ],
      "logs": [
        "Undefined word 'hats'",
        "Undefined word 'armor'",
        "Undefined word 'suits'",
        "Undefined word 'clothes'",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: hats, value: hats, word: hats})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 5, 'end': 9}, text: armor, value: armor, word: armor})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/0, PASS, None, evaluator(Bridge('{ ...next(operator), value: append(before, after) }')), variables({}) bridge(bridge)), range: {'start': 11, 'end': 13}, text: and, word: and})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 19}, text: suits, value: suits, word: suits})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 21, 'end': 23}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 25, 'end': 31}, text: clothes, value: clothes, word: clothes})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: hats, value: hats, word: hats})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 5, 'end': 9}, text: armor, value: armor, word: armor})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/0, PASS, None, evaluator(Bridge('{ ...next(operator), value: append(before, after) }')), variables({}) bridge(bridge)), range: {'start': 11, 'end': 13}, text: and, word: and})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 19}, text: suits, value: suits, word: suits})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 21, 'end': 23}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 25, 'end': 31}, text: clothes, value: clothes, word: clothes})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: hats, value: hats, word: hats})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 5, 'end': 19}, text: armor and suits, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 5, 'end': 9}, text: armor, value: armor, word: armor}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 19}, text: suits, value: suits, word: suits})], word: and})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 21, 'end': 23}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 25, 'end': 31}, text: clothes, value: clothes, word: clothes})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: hats, value: hats, word: hats})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 5, 'end': 19}, text: armor and suits, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 5, 'end': 9}, text: armor, value: armor, word: armor}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 19}, text: suits, value: suits, word: suits})], word: and})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 21, 'end': 23}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 25, 'end': 31}, text: clothes, value: clothes, word: clothes})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 19}, text: hats armor and suits, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: hats, value: hats, word: hats}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 5, 'end': 9}, text: armor, value: armor, word: armor}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 19}, text: suits, value: suits, word: suits})], word: and})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 21, 'end': 23}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 25, 'end': 31}, text: clothes, value: clothes, word: clothes})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 19}, text: hats armor and suits, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: hats, value: hats, word: hats}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 5, 'end': 9}, text: armor, value: armor, word: armor}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 19}, text: suits, value: suits, word: suits})], word: and})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 21, 'end': 23}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 25, 'end': 31}, text: clothes, value: clothes, word: clothes})\n\n\n",
        "Counter == 3. Applying Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)) failed due to the matchers [Type(variable: 'type')] not being present",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 19}, value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: hats, unknown: True, value: hats, word: hats}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 5, 'end': 9}, text: armor, unknown: True, value: armor, word: armor}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 19}, text: suits, unknown: True, value: suits, word: suits})]})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 21, 'end': 23}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 25, 'end': 31}, text: clothes, value: clothes, word: clothes})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 19}, value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: hats, unknown: True, value: hats, word: hats}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 5, 'end': 9}, text: armor, unknown: True, value: armor, word: armor}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 19}, text: suits, unknown: True, value: suits, word: suits})]})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 21, 'end': 23}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 25, 'end': 31}, text: clothes, value: clothes, word: clothes})\n\n\n",
        "Counter == 4. Applying Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)) failed due to the matchers [Type(variable: 'type')] not being present",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 19}, value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: hats, unknown: True, value: hats, word: hats}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 5, 'end': 9}, text: armor, unknown: True, value: armor, word: armor}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 19}, text: suits, unknown: True, value: suits, word: suits})]})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 21, 'end': 23}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 25, 'end': 31}, text: clothes, unknown: True, value: clothes, word: clothes})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 19}, value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: hats, unknown: True, value: hats, word: hats}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 5, 'end': 9}, text: armor, unknown: True, value: armor, word: armor}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 19}, text: suits, unknown: True, value: suits, word: suits})]})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 21, 'end': 23}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 25, 'end': 31}, text: clothes, unknown: True, value: clothes, word: clothes})\n\n\n",
        "Counter == 5. Applying Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)) failed due to the matchers [Type(variable: 'type')] not being present",
        "Applying implicit. Counter 6\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 31}, types: ['unknown'], value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: hats, unknown: True, value: hats, word: hats}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 5, 'end': 9}, text: armor, unknown: True, value: armor, word: armor}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 19}, text: suits, unknown: True, value: suits, word: suits})]}), range: {'start': 0, 'end': 31}, text:  are clothes, two: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 25, 'end': 31}, text: clothes, types: ['unknown'], unknown: True, value: clothes, word: clothes}), word: are})\n\n\n",
        "Applying implicit. Counter 6\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 31}, types: ['unknown'], value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: hats, unknown: True, value: hats, word: hats}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 5, 'end': 9}, text: armor, unknown: True, value: armor, word: armor}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 19}, text: suits, unknown: True, value: suits, word: suits})]}), range: {'start': 0, 'end': 31}, text:  are clothes, two: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 25, 'end': 31}, text: clothes, types: ['unknown'], unknown: True, value: clothes, word: clothes}), word: are})\n\n\n",
        "Applying implicit. Counter 7\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/2, None, evaluator(None), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 31}, types: ['unknown'], value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: hats, unknown: True, value: hats, word: hats}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 5, 'end': 9}, text: armor, unknown: True, value: armor, word: armor}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 19}, text: suits, unknown: True, value: suits, word: suits})]}), range: {'start': 0, 'end': 31}, text:  are clothes, two: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 25, 'end': 31}, text: clothes, types: ['unknown'], unknown: True, value: clothes, word: clothes}), word: are})\n\n\n",
        "Applying implicit. Counter 7\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/2, None, evaluator(None), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 31}, types: ['unknown'], value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: hats, unknown: True, value: hats, word: hats}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 5, 'end': 9}, text: armor, unknown: True, value: armor, word: armor}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 19}, text: suits, unknown: True, value: suits, word: suits})]}), range: {'start': 0, 'end': 31}, text:  are clothes, two: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 25, 'end': 31}, text: clothes, types: ['unknown'], unknown: True, value: clothes, word: clothes}), word: are})\n\n\n",
        "Op choices were: [(('list', 0), [('is', 0), ('unknown', 0)], 1), (('list', 1), [('is', 0), ('unknown', 0)], 2), (('list', 1), [('is', 0), ('unknown', 0)], 3), (('list', 1), [('is', 0), ('unknown', 0)], 3), (('list', 1), [('is', 0), ('unknown', 0), ('unknown', 1)], 4), (('unknown', 0), [('is', 0), ('unknown', 0), ('unknown', 1)], 4), (('list', 1), [('is', 0), ('unknown', 1)], 5), (('is', 0), [('is', 0), ('unknown', 1)], 5), (('is', 1), [('is', 1)], 6)]",
        "Contexts used for choosing operators (if the wrong choices were made update the priorities array. Put the expected choice at the end of the list. you can check for loops in the priorities by adding the -cl flag and running a query): \n  Context for choosing the operator list/0 was [['is', 0], ['unknown', 0]]. Counter 1\n  Context for choosing the operator list/1 was [['is', 0], ['unknown', 0]]. Counter 2\n  Context for choosing the operator list/1 was [['is', 0], ['unknown', 0]]. Counter 3\n  Context for choosing the operator list/1 was [['is', 0], ['unknown', 0]]. Counter 3\n  Context for choosing the operator list/1 was [['is', 0], ['unknown', 0], ['unknown', 1]]. Counter 4\n  Context for choosing the operator unknown/0 was [['is', 0], ['unknown', 0], ['unknown', 1]]. Counter 4\n  Context for choosing the operator list/1 was [['is', 0], ['unknown', 1]]. Counter 5\n  Context for choosing the operator is/0 was [['is', 0], ['unknown', 1]]. Counter 5\n  Context for choosing the operator is/1 was [['is', 1]]. Counter 6",
        "Associations made with probabilities (each group is a choice point. if the wrong choices were made update the associations list): \n  Group 0\n    0.4 - [['list', 0], ['unknown', 0], \">>>>2 ['isEd', 0] <<<<2\", ['unknown', 0]]\n      (('list', 0), ('unknown', 0))\n      (('unknown', 0), ('isEd', 0))\n    0.6000000000000001 - [['list', 0], ['unknown', 0], \">>>>2 ['is', 0] <<<<2\", ['unknown', 0]]\n      (('unknown', 0), ('is', 0), ('unknown', 0))\n  Group 1\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 0), ('is', 0), ('unknown', 0))\n    0.5 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 0), ('isEd', 0))\n  Group 2\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 0), ('is', 0), ('unknown', 0))\n    0.5 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 0), ('isEd', 0))\n  Group 3\n    0.5 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 1), ('isEd', 0))\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 1), ('is', 0), ('unknown', 0))\n  Group 4\n    0.6666666666666666 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 1), ('isEd', 0))\n      (('isEd', 0), ('unknown', 1))\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 1), ('is', 0), ('unknown', 1))"
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "list",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 5
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 5
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ],
            "counter": 6
          }
        ]
      },
      "trace": "undefined",
      "contexts": [
        {
          "number": "many",
          "text": " are clothes",
          "marker": "is",
          "word": "are",
          "range": {
            "start": 0,
            "end": 31
          },
          "one": {
            "number": "many",
            "marker": "list",
            "value": [
              {
                "marker": "unknown",
                "range": {
                  "start": 0,
                  "end": 3
                },
                "word": "hats",
                "text": "hats",
                "value": "hats",
                "unknown": true
              },
              {
                "marker": "unknown",
                "range": {
                  "start": 5,
                  "end": 9
                },
                "word": "armor",
                "text": "armor",
                "value": "armor",
                "unknown": true
              },
              {
                "marker": "unknown",
                "range": {
                  "start": 15,
                  "end": 19
                },
                "word": "suits",
                "text": "suits",
                "value": "suits",
                "unknown": true
              }
            ],
            "range": {
              "start": 0,
              "end": 31
            },
            "types": [
              "list",
              "unknown"
            ]
          },
          "two": {
            "marker": "unknown",
            "range": {
              "start": 25,
              "end": 31
            },
            "word": "clothes",
            "text": "clothes",
            "value": "clothes",
            "unknown": true,
            "types": [
              "unknown"
            ],
            "concept": true
          },
          "topLevel": true,
          "touchedBy": [
            "call2"
          ]
        }
      ],
      "generated": [
        "hats, armor and suits are clothes"
      ],
      "paraphrases": [
        "hats, armor and suits are clothes"
      ],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "version": "7.5.0-beta.49",
      "query": "hats armor and suits are clothes",
      "key": {
        "query": "hats armor and suits are clothes"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "armor",
          "clothe"
        ],
        [
          "armor",
          "hierarchyAble"
        ],
        [
          "armor",
          "isEdee"
        ],
        [
          "armor",
          "isEder"
        ],
        [
          "armor",
          "object"
        ],
        [
          "armor",
          "property"
        ],
        [
          "armor",
          "queryable"
        ],
        [
          "armor",
          "theAble"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "clothe",
          "hierarchyAble"
        ],
        [
          "clothe",
          "isEdee"
        ],
        [
          "clothe",
          "isEder"
        ],
        [
          "clothe",
          "object"
        ],
        [
          "clothe",
          "property"
        ],
        [
          "clothe",
          "queryable"
        ],
        [
          "clothe",
          "theAble"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "condition",
          "condition"
        ],
        [
          "explosive",
          "hierarchyAble"
        ],
        [
          "explosive",
          "isEdee"
        ],
        [
          "explosive",
          "isEder"
        ],
        [
          "explosive",
          "object"
        ],
        [
          "explosive",
          "property"
        ],
        [
          "explosive",
          "queryable"
        ],
        [
          "explosive",
          "theAble"
        ],
        [
          "explosive",
          "weapon"
        ],
        [
          "firearm",
          "hierarchyAble"
        ],
        [
          "firearm",
          "isEdee"
        ],
        [
          "firearm",
          "isEder"
        ],
        [
          "firearm",
          "object"
        ],
        [
          "firearm",
          "property"
        ],
        [
          "firearm",
          "queryable"
        ],
        [
          "firearm",
          "theAble"
        ],
        [
          "firearm",
          "weapon"
        ],
        [
          "grenade",
          "explosive"
        ],
        [
          "grenade",
          "hierarchyAble"
        ],
        [
          "grenade",
          "isEdee"
        ],
        [
          "grenade",
          "isEder"
        ],
        [
          "grenade",
          "object"
        ],
        [
          "grenade",
          "property"
        ],
        [
          "grenade",
          "queryable"
        ],
        [
          "grenade",
          "theAble"
        ],
        [
          "grenade",
          "weapon"
        ],
        [
          "hat",
          "clothe"
        ],
        [
          "hat",
          "hierarchyAble"
        ],
        [
          "hat",
          "isEdee"
        ],
        [
          "hat",
          "isEder"
        ],
        [
          "hat",
          "object"
        ],
        [
          "hat",
          "property"
        ],
        [
          "hat",
          "queryable"
        ],
        [
          "hat",
          "theAble"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "highest",
          "condition"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "isEd",
          "isEd"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "lowest",
          "condition"
        ],
        [
          "mine",
          "explosive"
        ],
        [
          "mine",
          "hierarchyAble"
        ],
        [
          "mine",
          "isEdee"
        ],
        [
          "mine",
          "isEder"
        ],
        [
          "mine",
          "object"
        ],
        [
          "mine",
          "property"
        ],
        [
          "mine",
          "queryable"
        ],
        [
          "mine",
          "theAble"
        ],
        [
          "mine",
          "weapon"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "pistol",
          "firearm"
        ],
        [
          "pistol",
          "hierarchyAble"
        ],
        [
          "pistol",
          "isEdee"
        ],
        [
          "pistol",
          "isEder"
        ],
        [
          "pistol",
          "object"
        ],
        [
          "pistol",
          "property"
        ],
        [
          "pistol",
          "queryable"
        ],
        [
          "pistol",
          "theAble"
        ],
        [
          "pistol",
          "weapon"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "isEd"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "rifle",
          "firearm"
        ],
        [
          "rifle",
          "hierarchyAble"
        ],
        [
          "rifle",
          "isEdee"
        ],
        [
          "rifle",
          "isEder"
        ],
        [
          "rifle",
          "object"
        ],
        [
          "rifle",
          "property"
        ],
        [
          "rifle",
          "queryable"
        ],
        [
          "rifle",
          "theAble"
        ],
        [
          "rifle",
          "weapon"
        ],
        [
          "shotgun",
          "firearm"
        ],
        [
          "shotgun",
          "hierarchyAble"
        ],
        [
          "shotgun",
          "isEdee"
        ],
        [
          "shotgun",
          "isEder"
        ],
        [
          "shotgun",
          "object"
        ],
        [
          "shotgun",
          "property"
        ],
        [
          "shotgun",
          "queryable"
        ],
        [
          "shotgun",
          "theAble"
        ],
        [
          "shotgun",
          "weapon"
        ],
        [
          "suit",
          "clothe"
        ],
        [
          "suit",
          "hierarchyAble"
        ],
        [
          "suit",
          "isEdee"
        ],
        [
          "suit",
          "isEder"
        ],
        [
          "suit",
          "object"
        ],
        [
          "suit",
          "property"
        ],
        [
          "suit",
          "queryable"
        ],
        [
          "suit",
          "theAble"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "weapon",
          "hierarchyAble"
        ],
        [
          "weapon",
          "isEdee"
        ],
        [
          "weapon",
          "isEder"
        ],
        [
          "weapon",
          "object"
        ],
        [
          "weapon",
          "property"
        ],
        [
          "weapon",
          "queryable"
        ],
        [
          "weapon",
          "theAble"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ]
      ],
      "logs": [
        "Undefined word 'equipable'",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(a/0, PASS, None, evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: 'a', modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 0}, text: a, word: a})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(weapon/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, range: {'start': 2, 'end': 7}, text: weapon, value: weapon, word: weapon})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: one, range: {'start': 9, 'end': 10}, text: is, word: is})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 20}, text: equipable, value: equipable, word: equipable})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(a/0, PASS, None, evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: 'a', modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 0}, text: a, word: a})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(weapon/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, range: {'start': 2, 'end': 7}, text: weapon, value: weapon, word: weapon})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: one, range: {'start': 9, 'end': 10}, text: is, word: is})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 20}, text: equipable, value: equipable, word: equipable})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(a/0, PASS, None, evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: 'a', modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 0}, text: a, word: a})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(weapon/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, range: {'start': 2, 'end': 7}, text: weapon, value: weapon, word: weapon})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: one, range: {'start': 9, 'end': 10}, text: is, word: is})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 20}, text: equipable, unknown: True, value: equipable, word: equipable})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(a/0, PASS, None, evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: 'a', modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 0}, text: a, word: a})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(weapon/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, range: {'start': 2, 'end': 7}, text: weapon, value: weapon, word: weapon})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: one, range: {'start': 9, 'end': 10}, text: is, word: is})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 20}, text: equipable, unknown: True, value: equipable, word: equipable})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(a/0, PASS, None, evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: 'a', modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 0}, text: a, word: a})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(weapon/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, range: {'start': 2, 'end': 7}, text: weapon, value: weapon, word: weapon})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: one, range: {'start': 9, 'end': 10}, text: is, word: is})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/2, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 12, 'end': 20}, text: equipable, unknown: True, value: equipable, word: equipable})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(a/0, PASS, None, evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: 'a', modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 0}, text: a, word: a})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(weapon/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, range: {'start': 2, 'end': 7}, text: weapon, value: weapon, word: weapon})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: one, range: {'start': 9, 'end': 10}, text: is, word: is})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/2, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 12, 'end': 20}, text: equipable, unknown: True, value: equipable, word: equipable})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(a/0, PASS, None, evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: 'a', modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 0}, text: a, word: a})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(weapon/1, None, evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 2, 'end': 7}, text: weapon, value: weapon, word: weapon})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: one, range: {'start': 9, 'end': 10}, text: is, word: is})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/2, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 12, 'end': 20}, text: equipable, unknown: True, value: equipable, word: equipable})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(a/0, PASS, None, evaluator(Bridge('{ ...after[0], pullFromContext: false, concept: true, number: 'one', wantsValue: true, determiner: 'a', modifiers: append(['determiner'], after[0].modifiers) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 0}, text: a, word: a})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(weapon/1, None, evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 2, 'end': 7}, text: weapon, value: weapon, word: weapon})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: one, range: {'start': 9, 'end': 10}, text: is, word: is})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/2, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 12, 'end': 20}, text: equipable, unknown: True, value: equipable, word: equipable})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({concept: True, determiner: a, marker: Operator(weapon/1, None, evaluator(None), variables({}) bridge(bridge)), modifiers: ['determiner'], number: one, pullFromContext: False, range: {'start': 0, 'end': 7}, text: a weapon, types: ['weapon'], value: weapon, wantsValue: True, word: weapon})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: one, range: {'start': 9, 'end': 10}, text: is, word: is})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/2, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 12, 'end': 20}, text: equipable, unknown: True, value: equipable, word: equipable})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({concept: True, determiner: a, marker: Operator(weapon/1, None, evaluator(None), variables({}) bridge(bridge)), modifiers: ['determiner'], number: one, pullFromContext: False, range: {'start': 0, 'end': 7}, text: a weapon, types: ['weapon'], value: weapon, wantsValue: True, word: weapon})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: one, range: {'start': 9, 'end': 10}, text: is, word: is})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/2, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 12, 'end': 20}, text: equipable, unknown: True, value: equipable, word: equipable})\n\n\n",
        "Applying implicit. Counter 6\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, one: Context({concept: True, determiner: a, marker: Operator(weapon/1, None, evaluator(None), variables({}) bridge(bridge)), modifiers: ['determiner'], number: one, pullFromContext: False, range: {'start': 0, 'end': 20}, text: a weapon, types: ['weapon', 'weapon'], value: weapon, wantsValue: True, word: weapon}), range: {'start': 0, 'end': 20}, text: a weapon is equipable, two: Context({marker: Operator(unknown/2, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 12, 'end': 20}, text: equipable, types: ['unknown'], unknown: True, value: equipable, word: equipable}), word: is})\n\n\n",
        "Applying implicit. Counter 6\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, one: Context({concept: True, determiner: a, marker: Operator(weapon/1, None, evaluator(None), variables({}) bridge(bridge)), modifiers: ['determiner'], number: one, pullFromContext: False, range: {'start': 0, 'end': 20}, text: a weapon, types: ['weapon', 'weapon'], value: weapon, wantsValue: True, word: weapon}), range: {'start': 0, 'end': 20}, text: a weapon is equipable, two: Context({marker: Operator(unknown/2, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 12, 'end': 20}, text: equipable, types: ['unknown'], unknown: True, value: equipable, word: equipable}), word: is})\n\n\n",
        "Applying implicit. Counter 7\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/2, None, evaluator(None), variables({}) bridge(bridge)), number: one, one: Context({concept: True, determiner: a, marker: Operator(weapon/1, None, evaluator(None), variables({}) bridge(bridge)), modifiers: ['determiner'], number: one, pullFromContext: False, range: {'start': 0, 'end': 20}, text: a weapon, types: ['weapon', 'weapon'], value: weapon, wantsValue: True, word: weapon}), range: {'start': 0, 'end': 20}, text: a weapon is equipable, two: Context({marker: Operator(unknown/2, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 12, 'end': 20}, text: equipable, types: ['unknown'], unknown: True, value: equipable, word: equipable}), word: is})\n\n\n",
        "Applying implicit. Counter 7\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/2, None, evaluator(None), variables({}) bridge(bridge)), number: one, one: Context({concept: True, determiner: a, marker: Operator(weapon/1, None, evaluator(None), variables({}) bridge(bridge)), modifiers: ['determiner'], number: one, pullFromContext: False, range: {'start': 0, 'end': 20}, text: a weapon, types: ['weapon', 'weapon'], value: weapon, wantsValue: True, word: weapon}), range: {'start': 0, 'end': 20}, text: a weapon is equipable, two: Context({marker: Operator(unknown/2, None, evaluator(None), variables({}) bridge(bridge)), range: {'start': 12, 'end': 20}, text: equipable, types: ['unknown'], unknown: True, value: equipable, word: equipable}), word: is})\n\n\n",
        "Op choices were: [(('unknown', 0), [('a', 0), ('is', 0), ('unknown', 0), ('weapon', 0)], 1), (('unknown', 1), [('a', 0), ('is', 0), ('unknown', 1), ('weapon', 0)], 2), (('weapon', 0), [('a', 0), ('is', 0), ('weapon', 0)], 3), (('a', 0), [('a', 0), ('is', 0)], 4), (('is', 0), [('is', 0)], 5), (('is', 1), [('is', 1)], 6)]",
        "Contexts used for choosing operators (if the wrong choices were made update the priorities array. Put the expected choice at the end of the list. you can check for loops in the priorities by adding the -cl flag and running a query): \n  Context for choosing the operator unknown/0 was [['a', 0], ['is', 0], ['unknown', 0], ['weapon', 0]]. Counter 1\n  Context for choosing the operator unknown/1 was [['a', 0], ['is', 0], ['unknown', 1], ['weapon', 0]]. Counter 2\n  Context for choosing the operator weapon/0 was [['a', 0], ['is', 0], ['weapon', 0]]. Counter 3\n  Context for choosing the operator a/0 was [['a', 0], ['is', 0]]. Counter 4\n  Context for choosing the operator is/0 was [['is', 0]]. Counter 5\n  Context for choosing the operator is/1 was [['is', 1]]. Counter 6",
        "Associations made with probabilities (each group is a choice point. if the wrong choices were made update the associations list): \n  Group 0\n    1.0 - [['a', 0], ['weapon', 0], \">>>>2 ['is', 0] <<<<2\", ['unknown', 0]]\n      (('a', 0), ('weapon', 0), ('is', 0), ('unknown', 0))\n    0.6000000000000001 - [['a', 0], ['weapon', 0], \">>>>2 ['isEd', 0] <<<<2\", ['unknown', 0]]\n      (('a', 0), ('weapon', 0), ('isEd', 0))\n  Group 1\n    1.0 - [['a', 0], ['weapon', 0], \">>>>2 ['is', 0] <<<<2\", ['unknown', 0]]\n      (('a', 0), ('weapon', 0), ('is', 0), ('unknown', 1))\n    0.6000000000000001 - [['a', 0], ['weapon', 0], \">>>>2 ['isEd', 0] <<<<2\", ['unknown', 0]]\n      (('a', 0), ('weapon', 0), ('isEd', 0))\n  Group 2\n    1.0 - [['a', 0], ['weapon', 0], \">>>>2 ['is', 0] <<<<2\", ['unknown', 0]]\n      (('a', 0), ('weapon', 0), ('is', 0), ('unknown', 1))\n    0.6000000000000001 - [['a', 0], ['weapon', 0], \">>>>2 ['isEd', 0] <<<<2\", ['unknown', 0]]\n      (('a', 0), ('weapon', 0), ('isEd', 0))\n  Group 3\n    1.0 - [['a', 0], ['weapon', 0], \">>>>2 ['is', 0] <<<<2\", ['unknown', 0]]\n      (('a', 0), ('weapon', 0), ('is', 0), ('unknown', 1))\n    0.6000000000000001 - [['a', 0], ['weapon', 0], \">>>>2 ['isEd', 0] <<<<2\", ['unknown', 0]]\n      (('a', 0), ('weapon', 0), ('isEd', 0))\n  Group 4\n    1.0 - [['weapon', 0], \">>>>1 ['is', 0] <<<<1\", ['unknown', 0]]\n      (('weapon', 0), ('is', 0), ('unknown', 1))\n    0.6666666666666666 - [['weapon', 0], \">>>>1 ['isEd', 0] <<<<1\", ['unknown', 0]]\n      (('weapon', 0), ('isEd', 0))\n      (('isEd', 0), ('unknown', 1))"
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "a",
                0
              ],
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "weapon",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "unknown",
              1
            ],
            "ops": [
              [
                "a",
                0
              ],
              [
                "is",
                0
              ],
              [
                "unknown",
                1
              ],
              [
                "weapon",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "weapon",
              0
            ],
            "ops": [
              [
                "a",
                0
              ],
              [
                "is",
                0
              ],
              [
                "weapon",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "a",
              0
            ],
            "ops": [
              [
                "a",
                0
              ],
              [
                "is",
                0
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ]
            ],
            "counter": 5
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ],
            "counter": 6
          }
        ]
      },
      "trace": "undefined",
      "contexts": [
        {
          "number": "one",
          "text": "a weapon is equipable",
          "marker": "is",
          "word": "is",
          "range": {
            "start": 0,
            "end": 20
          },
          "one": {
            "number": "one",
            "value": "weapon",
            "text": "a weapon",
            "marker": "weapon",
            "word": "weapon",
            "range": {
              "start": 0,
              "end": 20
            },
            "types": [
              "weapon"
            ],
            "pullFromContext": false,
            "concept": true,
            "wantsValue": true,
            "determiner": "a",
            "modifiers": [
              "determiner"
            ]
          },
          "two": {
            "marker": "unknown",
            "range": {
              "start": 12,
              "end": 20
            },
            "word": "equipable",
            "text": "equipable",
            "value": "equipable",
            "unknown": true,
            "types": [
              "unknown"
            ],
            "concept": true
          },
          "topLevel": true,
          "touchedBy": [
            "call2"
          ]
        }
      ],
      "generated": [
        "a weapon is equipable"
      ],
      "paraphrases": [
        "a weapon is equipable"
      ],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "a",
            0
          ],
          [
            "is",
            0
          ]
        ],
        [
          [
            "a",
            0
          ],
          [
            "is",
            0
          ],
          [
            "unknown",
            0
          ],
          [
            "weapon",
            0
          ]
        ],
        [
          [
            "a",
            0
          ],
          [
            "is",
            0
          ],
          [
            "unknown",
            1
          ],
          [
            "weapon",
            0
          ]
        ],
        [
          [
            "a",
            0
          ],
          [
            "is",
            0
          ],
          [
            "weapon",
            0
          ]
        ]
      ],
      "version": "7.5.0-beta.49",
      "query": "a weapon is equipable",
      "key": {
        "query": "a weapon is equipable"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "armor",
          "clothe"
        ],
        [
          "armor",
          "hierarchyAble"
        ],
        [
          "armor",
          "isEdee"
        ],
        [
          "armor",
          "isEder"
        ],
        [
          "armor",
          "object"
        ],
        [
          "armor",
          "property"
        ],
        [
          "armor",
          "queryable"
        ],
        [
          "armor",
          "theAble"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "clothe",
          "hierarchyAble"
        ],
        [
          "clothe",
          "isEdee"
        ],
        [
          "clothe",
          "isEder"
        ],
        [
          "clothe",
          "object"
        ],
        [
          "clothe",
          "property"
        ],
        [
          "clothe",
          "queryable"
        ],
        [
          "clothe",
          "theAble"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "condition",
          "condition"
        ],
        [
          "equipable",
          "hierarchyAble"
        ],
        [
          "equipable",
          "isEdee"
        ],
        [
          "equipable",
          "isEder"
        ],
        [
          "equipable",
          "object"
        ],
        [
          "equipable",
          "property"
        ],
        [
          "equipable",
          "queryable"
        ],
        [
          "equipable",
          "theAble"
        ],
        [
          "explosive",
          "hierarchyAble"
        ],
        [
          "explosive",
          "isEdee"
        ],
        [
          "explosive",
          "isEder"
        ],
        [
          "explosive",
          "object"
        ],
        [
          "explosive",
          "property"
        ],
        [
          "explosive",
          "queryable"
        ],
        [
          "explosive",
          "theAble"
        ],
        [
          "explosive",
          "weapon"
        ],
        [
          "firearm",
          "hierarchyAble"
        ],
        [
          "firearm",
          "isEdee"
        ],
        [
          "firearm",
          "isEder"
        ],
        [
          "firearm",
          "object"
        ],
        [
          "firearm",
          "property"
        ],
        [
          "firearm",
          "queryable"
        ],
        [
          "firearm",
          "theAble"
        ],
        [
          "firearm",
          "weapon"
        ],
        [
          "grenade",
          "explosive"
        ],
        [
          "grenade",
          "hierarchyAble"
        ],
        [
          "grenade",
          "isEdee"
        ],
        [
          "grenade",
          "isEder"
        ],
        [
          "grenade",
          "object"
        ],
        [
          "grenade",
          "property"
        ],
        [
          "grenade",
          "queryable"
        ],
        [
          "grenade",
          "theAble"
        ],
        [
          "grenade",
          "weapon"
        ],
        [
          "hat",
          "clothe"
        ],
        [
          "hat",
          "hierarchyAble"
        ],
        [
          "hat",
          "isEdee"
        ],
        [
          "hat",
          "isEder"
        ],
        [
          "hat",
          "object"
        ],
        [
          "hat",
          "property"
        ],
        [
          "hat",
          "queryable"
        ],
        [
          "hat",
          "theAble"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "highest",
          "condition"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "isEd",
          "isEd"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "lowest",
          "condition"
        ],
        [
          "mine",
          "explosive"
        ],
        [
          "mine",
          "hierarchyAble"
        ],
        [
          "mine",
          "isEdee"
        ],
        [
          "mine",
          "isEder"
        ],
        [
          "mine",
          "object"
        ],
        [
          "mine",
          "property"
        ],
        [
          "mine",
          "queryable"
        ],
        [
          "mine",
          "theAble"
        ],
        [
          "mine",
          "weapon"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "pistol",
          "firearm"
        ],
        [
          "pistol",
          "hierarchyAble"
        ],
        [
          "pistol",
          "isEdee"
        ],
        [
          "pistol",
          "isEder"
        ],
        [
          "pistol",
          "object"
        ],
        [
          "pistol",
          "property"
        ],
        [
          "pistol",
          "queryable"
        ],
        [
          "pistol",
          "theAble"
        ],
        [
          "pistol",
          "weapon"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "isEd"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "rifle",
          "firearm"
        ],
        [
          "rifle",
          "hierarchyAble"
        ],
        [
          "rifle",
          "isEdee"
        ],
        [
          "rifle",
          "isEder"
        ],
        [
          "rifle",
          "object"
        ],
        [
          "rifle",
          "property"
        ],
        [
          "rifle",
          "queryable"
        ],
        [
          "rifle",
          "theAble"
        ],
        [
          "rifle",
          "weapon"
        ],
        [
          "shotgun",
          "firearm"
        ],
        [
          "shotgun",
          "hierarchyAble"
        ],
        [
          "shotgun",
          "isEdee"
        ],
        [
          "shotgun",
          "isEder"
        ],
        [
          "shotgun",
          "object"
        ],
        [
          "shotgun",
          "property"
        ],
        [
          "shotgun",
          "queryable"
        ],
        [
          "shotgun",
          "theAble"
        ],
        [
          "shotgun",
          "weapon"
        ],
        [
          "suit",
          "clothe"
        ],
        [
          "suit",
          "hierarchyAble"
        ],
        [
          "suit",
          "isEdee"
        ],
        [
          "suit",
          "isEder"
        ],
        [
          "suit",
          "object"
        ],
        [
          "suit",
          "property"
        ],
        [
          "suit",
          "queryable"
        ],
        [
          "suit",
          "theAble"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "weapon",
          "equipable"
        ],
        [
          "weapon",
          "hierarchyAble"
        ],
        [
          "weapon",
          "isEdee"
        ],
        [
          "weapon",
          "isEder"
        ],
        [
          "weapon",
          "object"
        ],
        [
          "weapon",
          "property"
        ],
        [
          "weapon",
          "queryable"
        ],
        [
          "weapon",
          "theAble"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ]
      ],
      "logs": [
        "Undefined word 'wearable'",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(clothe/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 6}, text: clothes, value: clothe, word: clothes})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 8, 'end': 10}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 19}, text: wearable, value: wearable, word: wearable})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(clothe/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 6}, text: clothes, value: clothe, word: clothes})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 8, 'end': 10}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 19}, text: wearable, value: wearable, word: wearable})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(clothe/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 6}, text: clothes, value: clothe, word: clothes})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 8, 'end': 10}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 19}, text: wearable, unknown: True, value: wearable, word: wearable})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(clothe/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 6}, text: clothes, value: clothe, word: clothes})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 8, 'end': 10}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 19}, text: wearable, unknown: True, value: wearable, word: wearable})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(clothe/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 6}, text: clothes, value: clothe, word: clothes})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 8, 'end': 10}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 19}, text: wearable, unknown: True, value: wearable, word: wearable})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(clothe/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 6}, text: clothes, value: clothe, word: clothes})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 8, 'end': 10}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 19}, text: wearable, unknown: True, value: wearable, word: wearable})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(clothe/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 19}, text: clothes, types: ['clothe'], value: clothe, word: clothes}), range: {'start': 0, 'end': 19}, text: clothes are wearable, two: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 19}, text: wearable, types: ['unknown'], unknown: True, value: wearable, word: wearable}), word: are})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(clothe/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 19}, text: clothes, types: ['clothe'], value: clothe, word: clothes}), range: {'start': 0, 'end': 19}, text: clothes are wearable, two: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 19}, text: wearable, types: ['unknown'], unknown: True, value: wearable, word: wearable}), word: are})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/2, None, evaluator(None), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(clothe/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 19}, text: clothes, types: ['clothe'], value: clothe, word: clothes}), range: {'start': 0, 'end': 19}, text: clothes are wearable, two: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 19}, text: wearable, types: ['unknown'], unknown: True, value: wearable, word: wearable}), word: are})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/2, None, evaluator(None), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(clothe/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 19}, text: clothes, types: ['clothe'], value: clothe, word: clothes}), range: {'start': 0, 'end': 19}, text: clothes are wearable, two: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 19}, text: wearable, types: ['unknown'], unknown: True, value: wearable, word: wearable}), word: are})\n\n\n",
        "Op choices were: [(('unknown', 0), [('clothe', 0), ('is', 0), ('unknown', 0)], 1), (('clothe', 0), [('clothe', 0), ('is', 0), ('unknown', 1)], 2), (('is', 0), [('is', 0), ('unknown', 1)], 3), (('is', 1), [('is', 1)], 4)]",
        "Contexts used for choosing operators (if the wrong choices were made update the priorities array. Put the expected choice at the end of the list. you can check for loops in the priorities by adding the -cl flag and running a query): \n  Context for choosing the operator unknown/0 was [['clothe', 0], ['is', 0], ['unknown', 0]]. Counter 1\n  Context for choosing the operator clothe/0 was [['clothe', 0], ['is', 0], ['unknown', 1]]. Counter 2\n  Context for choosing the operator is/0 was [['is', 0], ['unknown', 1]]. Counter 3\n  Context for choosing the operator is/1 was [['is', 1]]. Counter 4",
        "Associations made with probabilities (each group is a choice point. if the wrong choices were made update the associations list): \n  Group 0\n    0.5 - [['clothe', 0], \">>>>1 ['isEd', 0] <<<<1\", ['unknown', 0]]\n      (('clothe', 0), ('isEd', 0))\n    1.0 - [['clothe', 0], \">>>>1 ['is', 0] <<<<1\", ['unknown', 0]]\n      (('clothe', 0), ('is', 0), ('unknown', 0))\n  Group 1\n    0.6666666666666666 - [['clothe', 0], \">>>>1 ['isEd', 0] <<<<1\", ['unknown', 0]]\n      (('clothe', 0), ('isEd', 0))\n      (('isEd', 0), ('unknown', 1))\n    1.0 - [['clothe', 0], \">>>>1 ['is', 0] <<<<1\", ['unknown', 0]]\n      (('clothe', 0), ('is', 0), ('unknown', 1))\n  Group 2\n    0.6666666666666666 - [['clothe', 0], \">>>>1 ['isEd', 0] <<<<1\", ['unknown', 0]]\n      (('clothe', 0), ('isEd', 0))\n      (('isEd', 0), ('unknown', 1))\n    1.0 - [['clothe', 0], \">>>>1 ['is', 0] <<<<1\", ['unknown', 0]]\n      (('clothe', 0), ('is', 0), ('unknown', 1))"
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "clothe",
                0
              ],
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "clothe",
              0
            ],
            "ops": [
              [
                "clothe",
                0
              ],
              [
                "is",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ],
            "counter": 4
          }
        ]
      },
      "trace": "undefined",
      "contexts": [
        {
          "number": "many",
          "text": "clothes are wearable",
          "marker": "is",
          "word": "are",
          "range": {
            "start": 0,
            "end": 19
          },
          "one": {
            "number": "many",
            "value": "clothe",
            "text": "clothes",
            "marker": "clothe",
            "word": "clothes",
            "range": {
              "start": 0,
              "end": 19
            },
            "types": [
              "clothe"
            ]
          },
          "two": {
            "marker": "unknown",
            "range": {
              "start": 12,
              "end": 19
            },
            "word": "wearable",
            "text": "wearable",
            "value": "wearable",
            "unknown": true,
            "types": [
              "unknown"
            ],
            "concept": true
          },
          "topLevel": true,
          "touchedBy": [
            "call2"
          ]
        }
      ],
      "generated": [
        "clothes are wearable"
      ],
      "paraphrases": [
        "clothes are wearable"
      ],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "clothe",
            0
          ],
          [
            "is",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "clothe",
            0
          ],
          [
            "is",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "version": "7.5.0-beta.49",
      "query": "clothes are wearable",
      "key": {
        "query": "clothes are wearable"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "armor",
          "clothe"
        ],
        [
          "armor",
          "hierarchyAble"
        ],
        [
          "armor",
          "isEdee"
        ],
        [
          "armor",
          "isEder"
        ],
        [
          "armor",
          "object"
        ],
        [
          "armor",
          "property"
        ],
        [
          "armor",
          "queryable"
        ],
        [
          "armor",
          "theAble"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "clothe",
          "hierarchyAble"
        ],
        [
          "clothe",
          "isEdee"
        ],
        [
          "clothe",
          "isEder"
        ],
        [
          "clothe",
          "object"
        ],
        [
          "clothe",
          "property"
        ],
        [
          "clothe",
          "queryable"
        ],
        [
          "clothe",
          "theAble"
        ],
        [
          "clothe",
          "wearable"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "condition",
          "condition"
        ],
        [
          "equipable",
          "hierarchyAble"
        ],
        [
          "equipable",
          "isEdee"
        ],
        [
          "equipable",
          "isEder"
        ],
        [
          "equipable",
          "object"
        ],
        [
          "equipable",
          "property"
        ],
        [
          "equipable",
          "queryable"
        ],
        [
          "equipable",
          "theAble"
        ],
        [
          "explosive",
          "hierarchyAble"
        ],
        [
          "explosive",
          "isEdee"
        ],
        [
          "explosive",
          "isEder"
        ],
        [
          "explosive",
          "object"
        ],
        [
          "explosive",
          "property"
        ],
        [
          "explosive",
          "queryable"
        ],
        [
          "explosive",
          "theAble"
        ],
        [
          "explosive",
          "weapon"
        ],
        [
          "firearm",
          "hierarchyAble"
        ],
        [
          "firearm",
          "isEdee"
        ],
        [
          "firearm",
          "isEder"
        ],
        [
          "firearm",
          "object"
        ],
        [
          "firearm",
          "property"
        ],
        [
          "firearm",
          "queryable"
        ],
        [
          "firearm",
          "theAble"
        ],
        [
          "firearm",
          "weapon"
        ],
        [
          "grenade",
          "explosive"
        ],
        [
          "grenade",
          "hierarchyAble"
        ],
        [
          "grenade",
          "isEdee"
        ],
        [
          "grenade",
          "isEder"
        ],
        [
          "grenade",
          "object"
        ],
        [
          "grenade",
          "property"
        ],
        [
          "grenade",
          "queryable"
        ],
        [
          "grenade",
          "theAble"
        ],
        [
          "grenade",
          "weapon"
        ],
        [
          "hat",
          "clothe"
        ],
        [
          "hat",
          "hierarchyAble"
        ],
        [
          "hat",
          "isEdee"
        ],
        [
          "hat",
          "isEder"
        ],
        [
          "hat",
          "object"
        ],
        [
          "hat",
          "property"
        ],
        [
          "hat",
          "queryable"
        ],
        [
          "hat",
          "theAble"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "highest",
          "condition"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "isEd",
          "isEd"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "lowest",
          "condition"
        ],
        [
          "mine",
          "explosive"
        ],
        [
          "mine",
          "hierarchyAble"
        ],
        [
          "mine",
          "isEdee"
        ],
        [
          "mine",
          "isEder"
        ],
        [
          "mine",
          "object"
        ],
        [
          "mine",
          "property"
        ],
        [
          "mine",
          "queryable"
        ],
        [
          "mine",
          "theAble"
        ],
        [
          "mine",
          "weapon"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "pistol",
          "firearm"
        ],
        [
          "pistol",
          "hierarchyAble"
        ],
        [
          "pistol",
          "isEdee"
        ],
        [
          "pistol",
          "isEder"
        ],
        [
          "pistol",
          "object"
        ],
        [
          "pistol",
          "property"
        ],
        [
          "pistol",
          "queryable"
        ],
        [
          "pistol",
          "theAble"
        ],
        [
          "pistol",
          "weapon"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "isEd"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "rifle",
          "firearm"
        ],
        [
          "rifle",
          "hierarchyAble"
        ],
        [
          "rifle",
          "isEdee"
        ],
        [
          "rifle",
          "isEder"
        ],
        [
          "rifle",
          "object"
        ],
        [
          "rifle",
          "property"
        ],
        [
          "rifle",
          "queryable"
        ],
        [
          "rifle",
          "theAble"
        ],
        [
          "rifle",
          "weapon"
        ],
        [
          "shotgun",
          "firearm"
        ],
        [
          "shotgun",
          "hierarchyAble"
        ],
        [
          "shotgun",
          "isEdee"
        ],
        [
          "shotgun",
          "isEder"
        ],
        [
          "shotgun",
          "object"
        ],
        [
          "shotgun",
          "property"
        ],
        [
          "shotgun",
          "queryable"
        ],
        [
          "shotgun",
          "theAble"
        ],
        [
          "shotgun",
          "weapon"
        ],
        [
          "suit",
          "clothe"
        ],
        [
          "suit",
          "hierarchyAble"
        ],
        [
          "suit",
          "isEdee"
        ],
        [
          "suit",
          "isEder"
        ],
        [
          "suit",
          "object"
        ],
        [
          "suit",
          "property"
        ],
        [
          "suit",
          "queryable"
        ],
        [
          "suit",
          "theAble"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "weapon",
          "equipable"
        ],
        [
          "weapon",
          "hierarchyAble"
        ],
        [
          "weapon",
          "isEdee"
        ],
        [
          "weapon",
          "isEder"
        ],
        [
          "weapon",
          "object"
        ],
        [
          "weapon",
          "property"
        ],
        [
          "weapon",
          "queryable"
        ],
        [
          "weapon",
          "theAble"
        ],
        [
          "wearable",
          "hierarchyAble"
        ],
        [
          "wearable",
          "isEdee"
        ],
        [
          "wearable",
          "isEder"
        ],
        [
          "wearable",
          "object"
        ],
        [
          "wearable",
          "property"
        ],
        [
          "wearable",
          "queryable"
        ],
        [
          "wearable",
          "theAble"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ]
      ],
      "logs": [
        "Undefined word 'food'",
        "Undefined word 'edible'",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: food, value: food, word: food})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: one, range: {'start': 5, 'end': 6}, text: is, word: is})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 13}, text: edible, value: edible, word: edible})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: food, value: food, word: food})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: one, range: {'start': 5, 'end': 6}, text: is, word: is})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 13}, text: edible, value: edible, word: edible})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: food, unknown: True, value: food, word: food})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: one, range: {'start': 5, 'end': 6}, text: is, word: is})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 13}, text: edible, value: edible, word: edible})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: food, unknown: True, value: food, word: food})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: one, range: {'start': 5, 'end': 6}, text: is, word: is})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 13}, text: edible, value: edible, word: edible})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: food, unknown: True, value: food, word: food})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: one, range: {'start': 5, 'end': 6}, text: is, word: is})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 13}, text: edible, unknown: True, value: edible, word: edible})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: food, unknown: True, value: food, word: food})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: one, range: {'start': 5, 'end': 6}, text: is, word: is})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 13}, text: edible, unknown: True, value: edible, word: edible})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, one: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, range: {'start': 0, 'end': 13}, text: food, types: ['unknown'], unknown: True, value: food, word: food}), range: {'start': 0, 'end': 13}, text: food is edible, two: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 13}, text: edible, types: ['unknown'], unknown: True, value: edible, word: edible}), word: is})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, one: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, range: {'start': 0, 'end': 13}, text: food, types: ['unknown'], unknown: True, value: food, word: food}), range: {'start': 0, 'end': 13}, text: food is edible, two: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 13}, text: edible, types: ['unknown'], unknown: True, value: edible, word: edible}), word: is})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/2, None, evaluator(None), variables({}) bridge(bridge)), number: one, one: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, range: {'start': 0, 'end': 13}, text: food, types: ['unknown'], unknown: True, value: food, word: food}), range: {'start': 0, 'end': 13}, text: food is edible, two: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 13}, text: edible, types: ['unknown'], unknown: True, value: edible, word: edible}), word: is})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/2, None, evaluator(None), variables({}) bridge(bridge)), number: one, one: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, range: {'start': 0, 'end': 13}, text: food, types: ['unknown'], unknown: True, value: food, word: food}), range: {'start': 0, 'end': 13}, text: food is edible, two: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 8, 'end': 13}, text: edible, types: ['unknown'], unknown: True, value: edible, word: edible}), word: is})\n\n\n",
        "Op choices were: [(('unknown', 0), [('is', 0), ('unknown', 0)], 1), (('unknown', 0), [('is', 0), ('unknown', 0), ('unknown', 1)], 2), (('is', 0), [('is', 0), ('unknown', 1)], 3), (('is', 1), [('is', 1)], 4)]",
        "Contexts used for choosing operators (if the wrong choices were made update the priorities array. Put the expected choice at the end of the list. you can check for loops in the priorities by adding the -cl flag and running a query): \n  Context for choosing the operator unknown/0 was [['is', 0], ['unknown', 0]]. Counter 1\n  Context for choosing the operator unknown/0 was [['is', 0], ['unknown', 0], ['unknown', 1]]. Counter 2\n  Context for choosing the operator is/0 was [['is', 0], ['unknown', 1]]. Counter 3\n  Context for choosing the operator is/1 was [['is', 1]]. Counter 4",
        "Associations made with probabilities (each group is a choice point. if the wrong choices were made update the associations list): \n  Group 0\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 0), ('is', 0), ('unknown', 0))\n    0.5 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 0), ('isEd', 0))\n  Group 1\n    0.5 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 1), ('isEd', 0))\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 1), ('is', 0), ('unknown', 0))\n  Group 2\n    0.6666666666666666 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 1), ('isEd', 0))\n      (('isEd', 0), ('unknown', 1))\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 1), ('is', 0), ('unknown', 1))"
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ],
            "counter": 4
          }
        ]
      },
      "trace": "undefined",
      "contexts": [
        {
          "number": "one",
          "text": "food is edible",
          "marker": "is",
          "word": "is",
          "range": {
            "start": 0,
            "end": 13
          },
          "one": {
            "number": "one",
            "marker": "unknown",
            "range": {
              "start": 0,
              "end": 13
            },
            "word": "food",
            "text": "food",
            "value": "food",
            "unknown": true,
            "types": [
              "unknown"
            ]
          },
          "two": {
            "marker": "unknown",
            "range": {
              "start": 8,
              "end": 13
            },
            "word": "edible",
            "text": "edible",
            "value": "edible",
            "unknown": true,
            "types": [
              "unknown"
            ],
            "concept": true
          },
          "topLevel": true,
          "touchedBy": [
            "call2"
          ]
        }
      ],
      "generated": [
        "food is edible"
      ],
      "paraphrases": [
        "food is edible"
      ],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "is",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "unknown",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "version": "7.5.0-beta.49",
      "query": "food is edible",
      "key": {
        "query": "food is edible"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "armor",
          "clothe"
        ],
        [
          "armor",
          "hierarchyAble"
        ],
        [
          "armor",
          "isEdee"
        ],
        [
          "armor",
          "isEder"
        ],
        [
          "armor",
          "object"
        ],
        [
          "armor",
          "property"
        ],
        [
          "armor",
          "queryable"
        ],
        [
          "armor",
          "theAble"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "clothe",
          "hierarchyAble"
        ],
        [
          "clothe",
          "isEdee"
        ],
        [
          "clothe",
          "isEder"
        ],
        [
          "clothe",
          "object"
        ],
        [
          "clothe",
          "property"
        ],
        [
          "clothe",
          "queryable"
        ],
        [
          "clothe",
          "theAble"
        ],
        [
          "clothe",
          "wearable"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "condition",
          "condition"
        ],
        [
          "edible",
          "hierarchyAble"
        ],
        [
          "edible",
          "isEdee"
        ],
        [
          "edible",
          "isEder"
        ],
        [
          "edible",
          "object"
        ],
        [
          "edible",
          "property"
        ],
        [
          "edible",
          "queryable"
        ],
        [
          "edible",
          "theAble"
        ],
        [
          "equipable",
          "hierarchyAble"
        ],
        [
          "equipable",
          "isEdee"
        ],
        [
          "equipable",
          "isEder"
        ],
        [
          "equipable",
          "object"
        ],
        [
          "equipable",
          "property"
        ],
        [
          "equipable",
          "queryable"
        ],
        [
          "equipable",
          "theAble"
        ],
        [
          "explosive",
          "hierarchyAble"
        ],
        [
          "explosive",
          "isEdee"
        ],
        [
          "explosive",
          "isEder"
        ],
        [
          "explosive",
          "object"
        ],
        [
          "explosive",
          "property"
        ],
        [
          "explosive",
          "queryable"
        ],
        [
          "explosive",
          "theAble"
        ],
        [
          "explosive",
          "weapon"
        ],
        [
          "firearm",
          "hierarchyAble"
        ],
        [
          "firearm",
          "isEdee"
        ],
        [
          "firearm",
          "isEder"
        ],
        [
          "firearm",
          "object"
        ],
        [
          "firearm",
          "property"
        ],
        [
          "firearm",
          "queryable"
        ],
        [
          "firearm",
          "theAble"
        ],
        [
          "firearm",
          "weapon"
        ],
        [
          "food",
          "edible"
        ],
        [
          "food",
          "hierarchyAble"
        ],
        [
          "food",
          "isEdee"
        ],
        [
          "food",
          "isEder"
        ],
        [
          "food",
          "object"
        ],
        [
          "food",
          "property"
        ],
        [
          "food",
          "queryable"
        ],
        [
          "food",
          "theAble"
        ],
        [
          "grenade",
          "explosive"
        ],
        [
          "grenade",
          "hierarchyAble"
        ],
        [
          "grenade",
          "isEdee"
        ],
        [
          "grenade",
          "isEder"
        ],
        [
          "grenade",
          "object"
        ],
        [
          "grenade",
          "property"
        ],
        [
          "grenade",
          "queryable"
        ],
        [
          "grenade",
          "theAble"
        ],
        [
          "grenade",
          "weapon"
        ],
        [
          "hat",
          "clothe"
        ],
        [
          "hat",
          "hierarchyAble"
        ],
        [
          "hat",
          "isEdee"
        ],
        [
          "hat",
          "isEder"
        ],
        [
          "hat",
          "object"
        ],
        [
          "hat",
          "property"
        ],
        [
          "hat",
          "queryable"
        ],
        [
          "hat",
          "theAble"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "highest",
          "condition"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "isEd",
          "isEd"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "lowest",
          "condition"
        ],
        [
          "mine",
          "explosive"
        ],
        [
          "mine",
          "hierarchyAble"
        ],
        [
          "mine",
          "isEdee"
        ],
        [
          "mine",
          "isEder"
        ],
        [
          "mine",
          "object"
        ],
        [
          "mine",
          "property"
        ],
        [
          "mine",
          "queryable"
        ],
        [
          "mine",
          "theAble"
        ],
        [
          "mine",
          "weapon"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "pistol",
          "firearm"
        ],
        [
          "pistol",
          "hierarchyAble"
        ],
        [
          "pistol",
          "isEdee"
        ],
        [
          "pistol",
          "isEder"
        ],
        [
          "pistol",
          "object"
        ],
        [
          "pistol",
          "property"
        ],
        [
          "pistol",
          "queryable"
        ],
        [
          "pistol",
          "theAble"
        ],
        [
          "pistol",
          "weapon"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "isEd"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "rifle",
          "firearm"
        ],
        [
          "rifle",
          "hierarchyAble"
        ],
        [
          "rifle",
          "isEdee"
        ],
        [
          "rifle",
          "isEder"
        ],
        [
          "rifle",
          "object"
        ],
        [
          "rifle",
          "property"
        ],
        [
          "rifle",
          "queryable"
        ],
        [
          "rifle",
          "theAble"
        ],
        [
          "rifle",
          "weapon"
        ],
        [
          "shotgun",
          "firearm"
        ],
        [
          "shotgun",
          "hierarchyAble"
        ],
        [
          "shotgun",
          "isEdee"
        ],
        [
          "shotgun",
          "isEder"
        ],
        [
          "shotgun",
          "object"
        ],
        [
          "shotgun",
          "property"
        ],
        [
          "shotgun",
          "queryable"
        ],
        [
          "shotgun",
          "theAble"
        ],
        [
          "shotgun",
          "weapon"
        ],
        [
          "suit",
          "clothe"
        ],
        [
          "suit",
          "hierarchyAble"
        ],
        [
          "suit",
          "isEdee"
        ],
        [
          "suit",
          "isEder"
        ],
        [
          "suit",
          "object"
        ],
        [
          "suit",
          "property"
        ],
        [
          "suit",
          "queryable"
        ],
        [
          "suit",
          "theAble"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "weapon",
          "equipable"
        ],
        [
          "weapon",
          "hierarchyAble"
        ],
        [
          "weapon",
          "isEdee"
        ],
        [
          "weapon",
          "isEder"
        ],
        [
          "weapon",
          "object"
        ],
        [
          "weapon",
          "property"
        ],
        [
          "weapon",
          "queryable"
        ],
        [
          "weapon",
          "theAble"
        ],
        [
          "wearable",
          "hierarchyAble"
        ],
        [
          "wearable",
          "isEdee"
        ],
        [
          "wearable",
          "isEder"
        ],
        [
          "wearable",
          "object"
        ],
        [
          "wearable",
          "property"
        ],
        [
          "wearable",
          "queryable"
        ],
        [
          "wearable",
          "theAble"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ]
      ],
      "logs": [
        "Undefined word 'drinks'",
        "Undefined word 'drinkable'",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: drinks, value: drinks, word: drinks})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 7, 'end': 9}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 11, 'end': 19}, text: drinkable, value: drinkable, word: drinkable})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: drinks, value: drinks, word: drinks})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 7, 'end': 9}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 11, 'end': 19}, text: drinkable, value: drinkable, word: drinkable})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: drinks, unknown: True, value: drinks, word: drinks})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 7, 'end': 9}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 11, 'end': 19}, text: drinkable, value: drinkable, word: drinkable})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: drinks, unknown: True, value: drinks, word: drinks})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 7, 'end': 9}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 11, 'end': 19}, text: drinkable, value: drinkable, word: drinkable})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: drinks, unknown: True, value: drinks, word: drinks})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 7, 'end': 9}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 11, 'end': 19}, text: drinkable, unknown: True, value: drinkable, word: drinkable})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: drinks, unknown: True, value: drinks, word: drinks})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 7, 'end': 9}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 11, 'end': 19}, text: drinkable, unknown: True, value: drinkable, word: drinkable})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 19}, text: drinks, types: ['unknown'], unknown: True, value: drinks, word: drinks}), range: {'start': 0, 'end': 19}, text: drinks are drinkable, two: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 11, 'end': 19}, text: drinkable, types: ['unknown'], unknown: True, value: drinkable, word: drinkable}), word: are})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 19}, text: drinks, types: ['unknown'], unknown: True, value: drinks, word: drinks}), range: {'start': 0, 'end': 19}, text: drinks are drinkable, two: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 11, 'end': 19}, text: drinkable, types: ['unknown'], unknown: True, value: drinkable, word: drinkable}), word: are})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/2, None, evaluator(None), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 19}, text: drinks, types: ['unknown'], unknown: True, value: drinks, word: drinks}), range: {'start': 0, 'end': 19}, text: drinks are drinkable, two: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 11, 'end': 19}, text: drinkable, types: ['unknown'], unknown: True, value: drinkable, word: drinkable}), word: are})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/2, None, evaluator(None), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 0, 'end': 19}, text: drinks, types: ['unknown'], unknown: True, value: drinks, word: drinks}), range: {'start': 0, 'end': 19}, text: drinks are drinkable, two: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 11, 'end': 19}, text: drinkable, types: ['unknown'], unknown: True, value: drinkable, word: drinkable}), word: are})\n\n\n",
        "Op choices were: [(('unknown', 0), [('is', 0), ('unknown', 0)], 1), (('unknown', 0), [('is', 0), ('unknown', 0), ('unknown', 1)], 2), (('is', 0), [('is', 0), ('unknown', 1)], 3), (('is', 1), [('is', 1)], 4)]",
        "Contexts used for choosing operators (if the wrong choices were made update the priorities array. Put the expected choice at the end of the list. you can check for loops in the priorities by adding the -cl flag and running a query): \n  Context for choosing the operator unknown/0 was [['is', 0], ['unknown', 0]]. Counter 1\n  Context for choosing the operator unknown/0 was [['is', 0], ['unknown', 0], ['unknown', 1]]. Counter 2\n  Context for choosing the operator is/0 was [['is', 0], ['unknown', 1]]. Counter 3\n  Context for choosing the operator is/1 was [['is', 1]]. Counter 4",
        "Associations made with probabilities (each group is a choice point. if the wrong choices were made update the associations list): \n  Group 0\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 0), ('is', 0), ('unknown', 0))\n    0.5 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 0), ('isEd', 0))\n  Group 1\n    0.5 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 1), ('isEd', 0))\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 1), ('is', 0), ('unknown', 0))\n  Group 2\n    0.6666666666666666 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 1), ('isEd', 0))\n      (('isEd', 0), ('unknown', 1))\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 1), ('is', 0), ('unknown', 1))"
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ],
            "counter": 4
          }
        ]
      },
      "trace": "undefined",
      "contexts": [
        {
          "number": "many",
          "text": "drinks are drinkable",
          "marker": "is",
          "word": "are",
          "range": {
            "start": 0,
            "end": 19
          },
          "one": {
            "number": "many",
            "marker": "unknown",
            "range": {
              "start": 0,
              "end": 19
            },
            "word": "drinks",
            "text": "drinks",
            "value": "drinks",
            "unknown": true,
            "types": [
              "unknown"
            ]
          },
          "two": {
            "marker": "unknown",
            "range": {
              "start": 11,
              "end": 19
            },
            "word": "drinkable",
            "text": "drinkable",
            "value": "drinkable",
            "unknown": true,
            "types": [
              "unknown"
            ],
            "concept": true
          },
          "topLevel": true,
          "touchedBy": [
            "call2"
          ]
        }
      ],
      "generated": [
        "drinks are drinkable"
      ],
      "paraphrases": [
        "drinks are drinkable"
      ],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "is",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "unknown",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "version": "7.5.0-beta.49",
      "query": "drinks are drinkable",
      "key": {
        "query": "drinks are drinkable"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "armor",
          "clothe"
        ],
        [
          "armor",
          "hierarchyAble"
        ],
        [
          "armor",
          "isEdee"
        ],
        [
          "armor",
          "isEder"
        ],
        [
          "armor",
          "object"
        ],
        [
          "armor",
          "property"
        ],
        [
          "armor",
          "queryable"
        ],
        [
          "armor",
          "theAble"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "clothe",
          "hierarchyAble"
        ],
        [
          "clothe",
          "isEdee"
        ],
        [
          "clothe",
          "isEder"
        ],
        [
          "clothe",
          "object"
        ],
        [
          "clothe",
          "property"
        ],
        [
          "clothe",
          "queryable"
        ],
        [
          "clothe",
          "theAble"
        ],
        [
          "clothe",
          "wearable"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "condition",
          "condition"
        ],
        [
          "drink",
          "drinkable"
        ],
        [
          "drink",
          "hierarchyAble"
        ],
        [
          "drink",
          "isEdee"
        ],
        [
          "drink",
          "isEder"
        ],
        [
          "drink",
          "object"
        ],
        [
          "drink",
          "property"
        ],
        [
          "drink",
          "queryable"
        ],
        [
          "drink",
          "theAble"
        ],
        [
          "drinkable",
          "hierarchyAble"
        ],
        [
          "drinkable",
          "isEdee"
        ],
        [
          "drinkable",
          "isEder"
        ],
        [
          "drinkable",
          "object"
        ],
        [
          "drinkable",
          "property"
        ],
        [
          "drinkable",
          "queryable"
        ],
        [
          "drinkable",
          "theAble"
        ],
        [
          "edible",
          "hierarchyAble"
        ],
        [
          "edible",
          "isEdee"
        ],
        [
          "edible",
          "isEder"
        ],
        [
          "edible",
          "object"
        ],
        [
          "edible",
          "property"
        ],
        [
          "edible",
          "queryable"
        ],
        [
          "edible",
          "theAble"
        ],
        [
          "equipable",
          "hierarchyAble"
        ],
        [
          "equipable",
          "isEdee"
        ],
        [
          "equipable",
          "isEder"
        ],
        [
          "equipable",
          "object"
        ],
        [
          "equipable",
          "property"
        ],
        [
          "equipable",
          "queryable"
        ],
        [
          "equipable",
          "theAble"
        ],
        [
          "explosive",
          "hierarchyAble"
        ],
        [
          "explosive",
          "isEdee"
        ],
        [
          "explosive",
          "isEder"
        ],
        [
          "explosive",
          "object"
        ],
        [
          "explosive",
          "property"
        ],
        [
          "explosive",
          "queryable"
        ],
        [
          "explosive",
          "theAble"
        ],
        [
          "explosive",
          "weapon"
        ],
        [
          "firearm",
          "hierarchyAble"
        ],
        [
          "firearm",
          "isEdee"
        ],
        [
          "firearm",
          "isEder"
        ],
        [
          "firearm",
          "object"
        ],
        [
          "firearm",
          "property"
        ],
        [
          "firearm",
          "queryable"
        ],
        [
          "firearm",
          "theAble"
        ],
        [
          "firearm",
          "weapon"
        ],
        [
          "food",
          "edible"
        ],
        [
          "food",
          "hierarchyAble"
        ],
        [
          "food",
          "isEdee"
        ],
        [
          "food",
          "isEder"
        ],
        [
          "food",
          "object"
        ],
        [
          "food",
          "property"
        ],
        [
          "food",
          "queryable"
        ],
        [
          "food",
          "theAble"
        ],
        [
          "grenade",
          "explosive"
        ],
        [
          "grenade",
          "hierarchyAble"
        ],
        [
          "grenade",
          "isEdee"
        ],
        [
          "grenade",
          "isEder"
        ],
        [
          "grenade",
          "object"
        ],
        [
          "grenade",
          "property"
        ],
        [
          "grenade",
          "queryable"
        ],
        [
          "grenade",
          "theAble"
        ],
        [
          "grenade",
          "weapon"
        ],
        [
          "hat",
          "clothe"
        ],
        [
          "hat",
          "hierarchyAble"
        ],
        [
          "hat",
          "isEdee"
        ],
        [
          "hat",
          "isEder"
        ],
        [
          "hat",
          "object"
        ],
        [
          "hat",
          "property"
        ],
        [
          "hat",
          "queryable"
        ],
        [
          "hat",
          "theAble"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "highest",
          "condition"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "isEd",
          "isEd"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "lowest",
          "condition"
        ],
        [
          "mine",
          "explosive"
        ],
        [
          "mine",
          "hierarchyAble"
        ],
        [
          "mine",
          "isEdee"
        ],
        [
          "mine",
          "isEder"
        ],
        [
          "mine",
          "object"
        ],
        [
          "mine",
          "property"
        ],
        [
          "mine",
          "queryable"
        ],
        [
          "mine",
          "theAble"
        ],
        [
          "mine",
          "weapon"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "pistol",
          "firearm"
        ],
        [
          "pistol",
          "hierarchyAble"
        ],
        [
          "pistol",
          "isEdee"
        ],
        [
          "pistol",
          "isEder"
        ],
        [
          "pistol",
          "object"
        ],
        [
          "pistol",
          "property"
        ],
        [
          "pistol",
          "queryable"
        ],
        [
          "pistol",
          "theAble"
        ],
        [
          "pistol",
          "weapon"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "isEd"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "rifle",
          "firearm"
        ],
        [
          "rifle",
          "hierarchyAble"
        ],
        [
          "rifle",
          "isEdee"
        ],
        [
          "rifle",
          "isEder"
        ],
        [
          "rifle",
          "object"
        ],
        [
          "rifle",
          "property"
        ],
        [
          "rifle",
          "queryable"
        ],
        [
          "rifle",
          "theAble"
        ],
        [
          "rifle",
          "weapon"
        ],
        [
          "shotgun",
          "firearm"
        ],
        [
          "shotgun",
          "hierarchyAble"
        ],
        [
          "shotgun",
          "isEdee"
        ],
        [
          "shotgun",
          "isEder"
        ],
        [
          "shotgun",
          "object"
        ],
        [
          "shotgun",
          "property"
        ],
        [
          "shotgun",
          "queryable"
        ],
        [
          "shotgun",
          "theAble"
        ],
        [
          "shotgun",
          "weapon"
        ],
        [
          "suit",
          "clothe"
        ],
        [
          "suit",
          "hierarchyAble"
        ],
        [
          "suit",
          "isEdee"
        ],
        [
          "suit",
          "isEder"
        ],
        [
          "suit",
          "object"
        ],
        [
          "suit",
          "property"
        ],
        [
          "suit",
          "queryable"
        ],
        [
          "suit",
          "theAble"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "weapon",
          "equipable"
        ],
        [
          "weapon",
          "hierarchyAble"
        ],
        [
          "weapon",
          "isEdee"
        ],
        [
          "weapon",
          "isEder"
        ],
        [
          "weapon",
          "object"
        ],
        [
          "weapon",
          "property"
        ],
        [
          "weapon",
          "queryable"
        ],
        [
          "weapon",
          "theAble"
        ],
        [
          "wearable",
          "hierarchyAble"
        ],
        [
          "wearable",
          "isEdee"
        ],
        [
          "wearable",
          "isEder"
        ],
        [
          "wearable",
          "object"
        ],
        [
          "wearable",
          "property"
        ],
        [
          "wearable",
          "queryable"
        ],
        [
          "wearable",
          "theAble"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ]
      ],
      "logs": [
        "Undefined word 'meat'",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: meat, value: meat, word: meat})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: one, range: {'start': 5, 'end': 6}, text: is, word: is})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(food/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, range: {'start': 8, 'end': 11}, text: food, value: food, word: food})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: meat, value: meat, word: meat})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: one, range: {'start': 5, 'end': 6}, text: is, word: is})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(food/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, range: {'start': 8, 'end': 11}, text: food, value: food, word: food})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: meat, unknown: True, value: meat, word: meat})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: one, range: {'start': 5, 'end': 6}, text: is, word: is})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(food/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, range: {'start': 8, 'end': 11}, text: food, value: food, word: food})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: meat, unknown: True, value: meat, word: meat})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: one, range: {'start': 5, 'end': 6}, text: is, word: is})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(food/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, range: {'start': 8, 'end': 11}, text: food, value: food, word: food})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: meat, unknown: True, value: meat, word: meat})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: one, range: {'start': 5, 'end': 6}, text: is, word: is})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(food/1, None, evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 8, 'end': 11}, text: food, value: food, word: food})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: meat, unknown: True, value: meat, word: meat})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: one, range: {'start': 5, 'end': 6}, text: is, word: is})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(food/1, None, evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 8, 'end': 11}, text: food, value: food, word: food})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, one: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, range: {'start': 0, 'end': 11}, text: meat, types: ['unknown'], unknown: True, value: meat, word: meat}), range: {'start': 0, 'end': 11}, text: meat is food, two: Context({marker: Operator(food/1, None, evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 8, 'end': 11}, text: food, types: ['food'], value: food, word: food}), word: is})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, one: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, range: {'start': 0, 'end': 11}, text: meat, types: ['unknown'], unknown: True, value: meat, word: meat}), range: {'start': 0, 'end': 11}, text: meat is food, two: Context({marker: Operator(food/1, None, evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 8, 'end': 11}, text: food, types: ['food'], value: food, word: food}), word: is})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/2, None, evaluator(None), variables({}) bridge(bridge)), number: one, one: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, range: {'start': 0, 'end': 11}, text: meat, types: ['unknown'], unknown: True, value: meat, word: meat}), range: {'start': 0, 'end': 11}, text: meat is food, two: Context({marker: Operator(food/1, None, evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 8, 'end': 11}, text: food, types: ['food'], value: food, word: food}), word: is})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/2, None, evaluator(None), variables({}) bridge(bridge)), number: one, one: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, range: {'start': 0, 'end': 11}, text: meat, types: ['unknown'], unknown: True, value: meat, word: meat}), range: {'start': 0, 'end': 11}, text: meat is food, two: Context({marker: Operator(food/1, None, evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 8, 'end': 11}, text: food, types: ['food'], value: food, word: food}), word: is})\n\n\n",
        "Op choices were: [(('unknown', 0), [('food', 0), ('is', 0), ('unknown', 0)], 1), (('food', 0), [('food', 0), ('is', 0), ('unknown', 1)], 2), (('is', 0), [('is', 0), ('unknown', 1)], 3), (('is', 1), [('is', 1)], 4)]",
        "Contexts used for choosing operators (if the wrong choices were made update the priorities array. Put the expected choice at the end of the list. you can check for loops in the priorities by adding the -cl flag and running a query): \n  Context for choosing the operator unknown/0 was [['food', 0], ['is', 0], ['unknown', 0]]. Counter 1\n  Context for choosing the operator food/0 was [['food', 0], ['is', 0], ['unknown', 1]]. Counter 2\n  Context for choosing the operator is/0 was [['is', 0], ['unknown', 1]]. Counter 3\n  Context for choosing the operator is/1 was [['is', 1]]. Counter 4",
        "Associations made with probabilities (each group is a choice point. if the wrong choices were made update the associations list): "
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "food",
                0
              ],
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "food",
              0
            ],
            "ops": [
              [
                "food",
                0
              ],
              [
                "is",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ],
            "counter": 4
          }
        ]
      },
      "trace": "undefined",
      "contexts": [
        {
          "number": "one",
          "text": "meat is food",
          "marker": "is",
          "word": "is",
          "range": {
            "start": 0,
            "end": 11
          },
          "one": {
            "number": "one",
            "marker": "unknown",
            "range": {
              "start": 0,
              "end": 11
            },
            "word": "meat",
            "text": "meat",
            "value": "meat",
            "unknown": true,
            "types": [
              "unknown"
            ]
          },
          "two": {
            "value": "food",
            "number": "one",
            "text": "food",
            "marker": "food",
            "word": "food",
            "range": {
              "start": 8,
              "end": 11
            },
            "types": [
              "food"
            ],
            "concept": true
          },
          "topLevel": true,
          "touchedBy": [
            "call2"
          ]
        }
      ],
      "generated": [
        "meat is food"
      ],
      "paraphrases": [
        "meat is food"
      ],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "food",
            0
          ],
          [
            "is",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "food",
            0
          ],
          [
            "is",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "version": "7.5.0-beta.49",
      "query": "meat is food",
      "key": {
        "query": "meat is food"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "armor",
          "clothe"
        ],
        [
          "armor",
          "hierarchyAble"
        ],
        [
          "armor",
          "isEdee"
        ],
        [
          "armor",
          "isEder"
        ],
        [
          "armor",
          "object"
        ],
        [
          "armor",
          "property"
        ],
        [
          "armor",
          "queryable"
        ],
        [
          "armor",
          "theAble"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "clothe",
          "hierarchyAble"
        ],
        [
          "clothe",
          "isEdee"
        ],
        [
          "clothe",
          "isEder"
        ],
        [
          "clothe",
          "object"
        ],
        [
          "clothe",
          "property"
        ],
        [
          "clothe",
          "queryable"
        ],
        [
          "clothe",
          "theAble"
        ],
        [
          "clothe",
          "wearable"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "condition",
          "condition"
        ],
        [
          "drink",
          "drinkable"
        ],
        [
          "drink",
          "hierarchyAble"
        ],
        [
          "drink",
          "isEdee"
        ],
        [
          "drink",
          "isEder"
        ],
        [
          "drink",
          "object"
        ],
        [
          "drink",
          "property"
        ],
        [
          "drink",
          "queryable"
        ],
        [
          "drink",
          "theAble"
        ],
        [
          "drinkable",
          "hierarchyAble"
        ],
        [
          "drinkable",
          "isEdee"
        ],
        [
          "drinkable",
          "isEder"
        ],
        [
          "drinkable",
          "object"
        ],
        [
          "drinkable",
          "property"
        ],
        [
          "drinkable",
          "queryable"
        ],
        [
          "drinkable",
          "theAble"
        ],
        [
          "edible",
          "hierarchyAble"
        ],
        [
          "edible",
          "isEdee"
        ],
        [
          "edible",
          "isEder"
        ],
        [
          "edible",
          "object"
        ],
        [
          "edible",
          "property"
        ],
        [
          "edible",
          "queryable"
        ],
        [
          "edible",
          "theAble"
        ],
        [
          "equipable",
          "hierarchyAble"
        ],
        [
          "equipable",
          "isEdee"
        ],
        [
          "equipable",
          "isEder"
        ],
        [
          "equipable",
          "object"
        ],
        [
          "equipable",
          "property"
        ],
        [
          "equipable",
          "queryable"
        ],
        [
          "equipable",
          "theAble"
        ],
        [
          "explosive",
          "hierarchyAble"
        ],
        [
          "explosive",
          "isEdee"
        ],
        [
          "explosive",
          "isEder"
        ],
        [
          "explosive",
          "object"
        ],
        [
          "explosive",
          "property"
        ],
        [
          "explosive",
          "queryable"
        ],
        [
          "explosive",
          "theAble"
        ],
        [
          "explosive",
          "weapon"
        ],
        [
          "firearm",
          "hierarchyAble"
        ],
        [
          "firearm",
          "isEdee"
        ],
        [
          "firearm",
          "isEder"
        ],
        [
          "firearm",
          "object"
        ],
        [
          "firearm",
          "property"
        ],
        [
          "firearm",
          "queryable"
        ],
        [
          "firearm",
          "theAble"
        ],
        [
          "firearm",
          "weapon"
        ],
        [
          "food",
          "edible"
        ],
        [
          "food",
          "hierarchyAble"
        ],
        [
          "food",
          "isEdee"
        ],
        [
          "food",
          "isEder"
        ],
        [
          "food",
          "object"
        ],
        [
          "food",
          "property"
        ],
        [
          "food",
          "queryable"
        ],
        [
          "food",
          "theAble"
        ],
        [
          "grenade",
          "explosive"
        ],
        [
          "grenade",
          "hierarchyAble"
        ],
        [
          "grenade",
          "isEdee"
        ],
        [
          "grenade",
          "isEder"
        ],
        [
          "grenade",
          "object"
        ],
        [
          "grenade",
          "property"
        ],
        [
          "grenade",
          "queryable"
        ],
        [
          "grenade",
          "theAble"
        ],
        [
          "grenade",
          "weapon"
        ],
        [
          "hat",
          "clothe"
        ],
        [
          "hat",
          "hierarchyAble"
        ],
        [
          "hat",
          "isEdee"
        ],
        [
          "hat",
          "isEder"
        ],
        [
          "hat",
          "object"
        ],
        [
          "hat",
          "property"
        ],
        [
          "hat",
          "queryable"
        ],
        [
          "hat",
          "theAble"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "highest",
          "condition"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "isEd",
          "isEd"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "lowest",
          "condition"
        ],
        [
          "meat",
          "food"
        ],
        [
          "meat",
          "hierarchyAble"
        ],
        [
          "meat",
          "isEdee"
        ],
        [
          "meat",
          "isEder"
        ],
        [
          "meat",
          "object"
        ],
        [
          "meat",
          "property"
        ],
        [
          "meat",
          "queryable"
        ],
        [
          "meat",
          "theAble"
        ],
        [
          "mine",
          "explosive"
        ],
        [
          "mine",
          "hierarchyAble"
        ],
        [
          "mine",
          "isEdee"
        ],
        [
          "mine",
          "isEder"
        ],
        [
          "mine",
          "object"
        ],
        [
          "mine",
          "property"
        ],
        [
          "mine",
          "queryable"
        ],
        [
          "mine",
          "theAble"
        ],
        [
          "mine",
          "weapon"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "pistol",
          "firearm"
        ],
        [
          "pistol",
          "hierarchyAble"
        ],
        [
          "pistol",
          "isEdee"
        ],
        [
          "pistol",
          "isEder"
        ],
        [
          "pistol",
          "object"
        ],
        [
          "pistol",
          "property"
        ],
        [
          "pistol",
          "queryable"
        ],
        [
          "pistol",
          "theAble"
        ],
        [
          "pistol",
          "weapon"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "isEd"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "rifle",
          "firearm"
        ],
        [
          "rifle",
          "hierarchyAble"
        ],
        [
          "rifle",
          "isEdee"
        ],
        [
          "rifle",
          "isEder"
        ],
        [
          "rifle",
          "object"
        ],
        [
          "rifle",
          "property"
        ],
        [
          "rifle",
          "queryable"
        ],
        [
          "rifle",
          "theAble"
        ],
        [
          "rifle",
          "weapon"
        ],
        [
          "shotgun",
          "firearm"
        ],
        [
          "shotgun",
          "hierarchyAble"
        ],
        [
          "shotgun",
          "isEdee"
        ],
        [
          "shotgun",
          "isEder"
        ],
        [
          "shotgun",
          "object"
        ],
        [
          "shotgun",
          "property"
        ],
        [
          "shotgun",
          "queryable"
        ],
        [
          "shotgun",
          "theAble"
        ],
        [
          "shotgun",
          "weapon"
        ],
        [
          "suit",
          "clothe"
        ],
        [
          "suit",
          "hierarchyAble"
        ],
        [
          "suit",
          "isEdee"
        ],
        [
          "suit",
          "isEder"
        ],
        [
          "suit",
          "object"
        ],
        [
          "suit",
          "property"
        ],
        [
          "suit",
          "queryable"
        ],
        [
          "suit",
          "theAble"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "weapon",
          "equipable"
        ],
        [
          "weapon",
          "hierarchyAble"
        ],
        [
          "weapon",
          "isEdee"
        ],
        [
          "weapon",
          "isEder"
        ],
        [
          "weapon",
          "object"
        ],
        [
          "weapon",
          "property"
        ],
        [
          "weapon",
          "queryable"
        ],
        [
          "weapon",
          "theAble"
        ],
        [
          "wearable",
          "hierarchyAble"
        ],
        [
          "wearable",
          "isEdee"
        ],
        [
          "wearable",
          "isEder"
        ],
        [
          "wearable",
          "object"
        ],
        [
          "wearable",
          "property"
        ],
        [
          "wearable",
          "queryable"
        ],
        [
          "wearable",
          "theAble"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ]
      ],
      "logs": [
        "Undefined word 'vegetables'",
        "Undefined word 'fruit'",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 9}, text: vegetables, value: vegetables, word: vegetables})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/0, PASS, None, evaluator(Bridge('{ ...next(operator), value: append(before, after) }')), variables({}) bridge(bridge)), range: {'start': 11, 'end': 13}, text: and, word: and})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 19}, text: fruit, value: fruit, word: fruit})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 21, 'end': 23}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(food/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, range: {'start': 25, 'end': 28}, text: food, value: food, word: food})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 9}, text: vegetables, value: vegetables, word: vegetables})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/0, PASS, None, evaluator(Bridge('{ ...next(operator), value: append(before, after) }')), variables({}) bridge(bridge)), range: {'start': 11, 'end': 13}, text: and, word: and})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 19}, text: fruit, value: fruit, word: fruit})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 21, 'end': 23}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(food/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, range: {'start': 25, 'end': 28}, text: food, value: food, word: food})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 19}, text: vegetables and fruit, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 9}, text: vegetables, value: vegetables, word: vegetables}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 19}, text: fruit, value: fruit, word: fruit})], word: and})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 21, 'end': 23}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(food/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, range: {'start': 25, 'end': 28}, text: food, value: food, word: food})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 19}, text: vegetables and fruit, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 9}, text: vegetables, value: vegetables, word: vegetables}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 19}, text: fruit, value: fruit, word: fruit})], word: and})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 21, 'end': 23}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(food/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, range: {'start': 25, 'end': 28}, text: food, value: food, word: food})\n\n\n",
        "Counter == 2. Applying Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)) failed due to the matchers [Type(variable: 'type')] not being present",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 19}, value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 9}, text: vegetables, unknown: True, value: vegetables, word: vegetables}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 19}, text: fruit, unknown: True, value: fruit, word: fruit})]})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 21, 'end': 23}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(food/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, range: {'start': 25, 'end': 28}, text: food, value: food, word: food})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 19}, value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 9}, text: vegetables, unknown: True, value: vegetables, word: vegetables}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 19}, text: fruit, unknown: True, value: fruit, word: fruit})]})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 21, 'end': 23}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(food/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: one, range: {'start': 25, 'end': 28}, text: food, value: food, word: food})\n\n\n",
        "Counter == 3. Applying Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)) failed due to the matchers [Type(variable: 'type')] not being present",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 19}, value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 9}, text: vegetables, unknown: True, value: vegetables, word: vegetables}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 19}, text: fruit, unknown: True, value: fruit, word: fruit})]})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 21, 'end': 23}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(food/1, None, evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 25, 'end': 28}, text: food, value: food, word: food})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 19}, value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 9}, text: vegetables, unknown: True, value: vegetables, word: vegetables}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 19}, text: fruit, unknown: True, value: fruit, word: fruit})]})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 21, 'end': 23}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(food/1, None, evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 25, 'end': 28}, text: food, value: food, word: food})\n\n\n",
        "Counter == 4. Applying Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)) failed due to the matchers [Type(variable: 'type')] not being present",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 28}, types: ['unknown'], value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 9}, text: vegetables, unknown: True, value: vegetables, word: vegetables}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 19}, text: fruit, unknown: True, value: fruit, word: fruit})]}), range: {'start': 0, 'end': 28}, text:  are food, two: Context({marker: Operator(food/1, None, evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 25, 'end': 28}, text: food, types: ['food'], value: food, word: food}), word: are})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 28}, types: ['unknown'], value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 9}, text: vegetables, unknown: True, value: vegetables, word: vegetables}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 19}, text: fruit, unknown: True, value: fruit, word: fruit})]}), range: {'start': 0, 'end': 28}, text:  are food, two: Context({marker: Operator(food/1, None, evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 25, 'end': 28}, text: food, types: ['food'], value: food, word: food}), word: are})\n\n\n",
        "Applying implicit. Counter 6\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/2, None, evaluator(None), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 28}, types: ['unknown'], value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 9}, text: vegetables, unknown: True, value: vegetables, word: vegetables}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 19}, text: fruit, unknown: True, value: fruit, word: fruit})]}), range: {'start': 0, 'end': 28}, text:  are food, two: Context({marker: Operator(food/1, None, evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 25, 'end': 28}, text: food, types: ['food'], value: food, word: food}), word: are})\n\n\n",
        "Applying implicit. Counter 6\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/2, None, evaluator(None), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 28}, types: ['unknown'], value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 9}, text: vegetables, unknown: True, value: vegetables, word: vegetables}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 19}, text: fruit, unknown: True, value: fruit, word: fruit})]}), range: {'start': 0, 'end': 28}, text:  are food, two: Context({marker: Operator(food/1, None, evaluator(None), variables({}) bridge(bridge)), number: one, range: {'start': 25, 'end': 28}, text: food, types: ['food'], value: food, word: food}), word: are})\n\n\n",
        "Op choices were: [(('list', 0), [('food', 0), ('is', 0), ('unknown', 0)], 1), (('list', 1), [('food', 0), ('is', 0), ('unknown', 0)], 2), (('list', 1), [('food', 0), ('is', 0), ('unknown', 0)], 2), (('list', 1), [('food', 0), ('is', 0), ('unknown', 1)], 3), (('food', 0), [('food', 0), ('is', 0), ('unknown', 1)], 3), (('list', 1), [('is', 0), ('unknown', 1)], 4), (('is', 0), [('is', 0), ('unknown', 1)], 4), (('is', 1), [('is', 1)], 5)]",
        "Contexts used for choosing operators (if the wrong choices were made update the priorities array. Put the expected choice at the end of the list. you can check for loops in the priorities by adding the -cl flag and running a query): \n  Context for choosing the operator list/0 was [['food', 0], ['is', 0], ['unknown', 0]]. Counter 1\n  Context for choosing the operator list/1 was [['food', 0], ['is', 0], ['unknown', 0]]. Counter 2\n  Context for choosing the operator list/1 was [['food', 0], ['is', 0], ['unknown', 0]]. Counter 2\n  Context for choosing the operator list/1 was [['food', 0], ['is', 0], ['unknown', 1]]. Counter 3\n  Context for choosing the operator food/0 was [['food', 0], ['is', 0], ['unknown', 1]]. Counter 3\n  Context for choosing the operator list/1 was [['is', 0], ['unknown', 1]]. Counter 4\n  Context for choosing the operator is/0 was [['is', 0], ['unknown', 1]]. Counter 4\n  Context for choosing the operator is/1 was [['is', 1]]. Counter 5",
        "Associations made with probabilities (each group is a choice point. if the wrong choices were made update the associations list): \n  Group 0\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['food', 0]]\n      (('unknown', 0), ('is', 0), ('food', 0))\n    0.6666666666666666 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['food', 0]]\n      (('unknown', 0), ('isEd', 0))\n      (('isEd', 0), ('food', 0))\n  Group 1\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['food', 0]]\n      (('unknown', 0), ('is', 0), ('food', 0))\n    0.6666666666666666 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['food', 0]]\n      (('unknown', 0), ('isEd', 0))\n      (('isEd', 0), ('food', 0))\n  Group 2\n    0.6666666666666666 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['food', 0]]\n      (('unknown', 1), ('isEd', 0))\n      (('isEd', 0), ('food', 0))\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['food', 0]]\n      (('unknown', 1), ('is', 0), ('food', 0))\n  Group 3\n    0.6666666666666666 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['food', 0]]\n      (('unknown', 1), ('isEd', 0))\n      (('isEd', 0), ('food', 0))\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['food', 0]]\n      (('unknown', 1), ('is', 0), ('food', 0))"
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "list",
              0
            ],
            "ops": [
              [
                "food",
                0
              ],
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "food",
                0
              ],
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "food",
                0
              ],
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "food",
                0
              ],
              [
                "is",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "food",
              0
            ],
            "ops": [
              [
                "food",
                0
              ],
              [
                "is",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ],
            "counter": 5
          }
        ]
      },
      "trace": "undefined",
      "contexts": [
        {
          "number": "many",
          "text": " are food",
          "marker": "is",
          "word": "are",
          "range": {
            "start": 0,
            "end": 28
          },
          "one": {
            "number": "many",
            "marker": "list",
            "value": [
              {
                "marker": "unknown",
                "range": {
                  "start": 0,
                  "end": 9
                },
                "word": "vegetables",
                "text": "vegetables",
                "value": "vegetables",
                "unknown": true
              },
              {
                "marker": "unknown",
                "range": {
                  "start": 15,
                  "end": 19
                },
                "word": "fruit",
                "text": "fruit",
                "value": "fruit",
                "unknown": true
              }
            ],
            "range": {
              "start": 0,
              "end": 28
            },
            "types": [
              "list",
              "unknown"
            ]
          },
          "two": {
            "value": "food",
            "number": "one",
            "text": "food",
            "marker": "food",
            "word": "food",
            "range": {
              "start": 25,
              "end": 28
            },
            "types": [
              "food"
            ],
            "concept": true
          },
          "topLevel": true,
          "touchedBy": [
            "call2"
          ]
        }
      ],
      "generated": [
        "vegetables and fruit are food"
      ],
      "paraphrases": [
        "vegetables and fruit are food"
      ],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "food",
            0
          ],
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "food",
            0
          ],
          [
            "is",
            0
          ],
          [
            "list",
            1
          ]
        ],
        [
          [
            "food",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ]
        ]
      ],
      "version": "7.5.0-beta.49",
      "query": "vegetables and fruit are food",
      "key": {
        "query": "vegetables and fruit are food"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "armor",
          "clothe"
        ],
        [
          "armor",
          "hierarchyAble"
        ],
        [
          "armor",
          "isEdee"
        ],
        [
          "armor",
          "isEder"
        ],
        [
          "armor",
          "object"
        ],
        [
          "armor",
          "property"
        ],
        [
          "armor",
          "queryable"
        ],
        [
          "armor",
          "theAble"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "clothe",
          "hierarchyAble"
        ],
        [
          "clothe",
          "isEdee"
        ],
        [
          "clothe",
          "isEder"
        ],
        [
          "clothe",
          "object"
        ],
        [
          "clothe",
          "property"
        ],
        [
          "clothe",
          "queryable"
        ],
        [
          "clothe",
          "theAble"
        ],
        [
          "clothe",
          "wearable"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "condition",
          "condition"
        ],
        [
          "drink",
          "drinkable"
        ],
        [
          "drink",
          "hierarchyAble"
        ],
        [
          "drink",
          "isEdee"
        ],
        [
          "drink",
          "isEder"
        ],
        [
          "drink",
          "object"
        ],
        [
          "drink",
          "property"
        ],
        [
          "drink",
          "queryable"
        ],
        [
          "drink",
          "theAble"
        ],
        [
          "drinkable",
          "hierarchyAble"
        ],
        [
          "drinkable",
          "isEdee"
        ],
        [
          "drinkable",
          "isEder"
        ],
        [
          "drinkable",
          "object"
        ],
        [
          "drinkable",
          "property"
        ],
        [
          "drinkable",
          "queryable"
        ],
        [
          "drinkable",
          "theAble"
        ],
        [
          "edible",
          "hierarchyAble"
        ],
        [
          "edible",
          "isEdee"
        ],
        [
          "edible",
          "isEder"
        ],
        [
          "edible",
          "object"
        ],
        [
          "edible",
          "property"
        ],
        [
          "edible",
          "queryable"
        ],
        [
          "edible",
          "theAble"
        ],
        [
          "equipable",
          "hierarchyAble"
        ],
        [
          "equipable",
          "isEdee"
        ],
        [
          "equipable",
          "isEder"
        ],
        [
          "equipable",
          "object"
        ],
        [
          "equipable",
          "property"
        ],
        [
          "equipable",
          "queryable"
        ],
        [
          "equipable",
          "theAble"
        ],
        [
          "explosive",
          "hierarchyAble"
        ],
        [
          "explosive",
          "isEdee"
        ],
        [
          "explosive",
          "isEder"
        ],
        [
          "explosive",
          "object"
        ],
        [
          "explosive",
          "property"
        ],
        [
          "explosive",
          "queryable"
        ],
        [
          "explosive",
          "theAble"
        ],
        [
          "explosive",
          "weapon"
        ],
        [
          "firearm",
          "hierarchyAble"
        ],
        [
          "firearm",
          "isEdee"
        ],
        [
          "firearm",
          "isEder"
        ],
        [
          "firearm",
          "object"
        ],
        [
          "firearm",
          "property"
        ],
        [
          "firearm",
          "queryable"
        ],
        [
          "firearm",
          "theAble"
        ],
        [
          "firearm",
          "weapon"
        ],
        [
          "food",
          "edible"
        ],
        [
          "food",
          "hierarchyAble"
        ],
        [
          "food",
          "isEdee"
        ],
        [
          "food",
          "isEder"
        ],
        [
          "food",
          "object"
        ],
        [
          "food",
          "property"
        ],
        [
          "food",
          "queryable"
        ],
        [
          "food",
          "theAble"
        ],
        [
          "fruit",
          "food"
        ],
        [
          "fruit",
          "hierarchyAble"
        ],
        [
          "fruit",
          "isEdee"
        ],
        [
          "fruit",
          "isEder"
        ],
        [
          "fruit",
          "object"
        ],
        [
          "fruit",
          "property"
        ],
        [
          "fruit",
          "queryable"
        ],
        [
          "fruit",
          "theAble"
        ],
        [
          "grenade",
          "explosive"
        ],
        [
          "grenade",
          "hierarchyAble"
        ],
        [
          "grenade",
          "isEdee"
        ],
        [
          "grenade",
          "isEder"
        ],
        [
          "grenade",
          "object"
        ],
        [
          "grenade",
          "property"
        ],
        [
          "grenade",
          "queryable"
        ],
        [
          "grenade",
          "theAble"
        ],
        [
          "grenade",
          "weapon"
        ],
        [
          "hat",
          "clothe"
        ],
        [
          "hat",
          "hierarchyAble"
        ],
        [
          "hat",
          "isEdee"
        ],
        [
          "hat",
          "isEder"
        ],
        [
          "hat",
          "object"
        ],
        [
          "hat",
          "property"
        ],
        [
          "hat",
          "queryable"
        ],
        [
          "hat",
          "theAble"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "highest",
          "condition"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "isEd",
          "isEd"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "lowest",
          "condition"
        ],
        [
          "meat",
          "food"
        ],
        [
          "meat",
          "hierarchyAble"
        ],
        [
          "meat",
          "isEdee"
        ],
        [
          "meat",
          "isEder"
        ],
        [
          "meat",
          "object"
        ],
        [
          "meat",
          "property"
        ],
        [
          "meat",
          "queryable"
        ],
        [
          "meat",
          "theAble"
        ],
        [
          "mine",
          "explosive"
        ],
        [
          "mine",
          "hierarchyAble"
        ],
        [
          "mine",
          "isEdee"
        ],
        [
          "mine",
          "isEder"
        ],
        [
          "mine",
          "object"
        ],
        [
          "mine",
          "property"
        ],
        [
          "mine",
          "queryable"
        ],
        [
          "mine",
          "theAble"
        ],
        [
          "mine",
          "weapon"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "pistol",
          "firearm"
        ],
        [
          "pistol",
          "hierarchyAble"
        ],
        [
          "pistol",
          "isEdee"
        ],
        [
          "pistol",
          "isEder"
        ],
        [
          "pistol",
          "object"
        ],
        [
          "pistol",
          "property"
        ],
        [
          "pistol",
          "queryable"
        ],
        [
          "pistol",
          "theAble"
        ],
        [
          "pistol",
          "weapon"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "isEd"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "rifle",
          "firearm"
        ],
        [
          "rifle",
          "hierarchyAble"
        ],
        [
          "rifle",
          "isEdee"
        ],
        [
          "rifle",
          "isEder"
        ],
        [
          "rifle",
          "object"
        ],
        [
          "rifle",
          "property"
        ],
        [
          "rifle",
          "queryable"
        ],
        [
          "rifle",
          "theAble"
        ],
        [
          "rifle",
          "weapon"
        ],
        [
          "shotgun",
          "firearm"
        ],
        [
          "shotgun",
          "hierarchyAble"
        ],
        [
          "shotgun",
          "isEdee"
        ],
        [
          "shotgun",
          "isEder"
        ],
        [
          "shotgun",
          "object"
        ],
        [
          "shotgun",
          "property"
        ],
        [
          "shotgun",
          "queryable"
        ],
        [
          "shotgun",
          "theAble"
        ],
        [
          "shotgun",
          "weapon"
        ],
        [
          "suit",
          "clothe"
        ],
        [
          "suit",
          "hierarchyAble"
        ],
        [
          "suit",
          "isEdee"
        ],
        [
          "suit",
          "isEder"
        ],
        [
          "suit",
          "object"
        ],
        [
          "suit",
          "property"
        ],
        [
          "suit",
          "queryable"
        ],
        [
          "suit",
          "theAble"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "vegetable",
          "food"
        ],
        [
          "vegetable",
          "hierarchyAble"
        ],
        [
          "vegetable",
          "isEdee"
        ],
        [
          "vegetable",
          "isEder"
        ],
        [
          "vegetable",
          "object"
        ],
        [
          "vegetable",
          "property"
        ],
        [
          "vegetable",
          "queryable"
        ],
        [
          "vegetable",
          "theAble"
        ],
        [
          "weapon",
          "equipable"
        ],
        [
          "weapon",
          "hierarchyAble"
        ],
        [
          "weapon",
          "isEdee"
        ],
        [
          "weapon",
          "isEder"
        ],
        [
          "weapon",
          "object"
        ],
        [
          "weapon",
          "property"
        ],
        [
          "weapon",
          "queryable"
        ],
        [
          "weapon",
          "theAble"
        ],
        [
          "wearable",
          "hierarchyAble"
        ],
        [
          "wearable",
          "isEdee"
        ],
        [
          "wearable",
          "isEder"
        ],
        [
          "wearable",
          "object"
        ],
        [
          "wearable",
          "property"
        ],
        [
          "wearable",
          "queryable"
        ],
        [
          "wearable",
          "theAble"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ]
      ],
      "logs": [
        "Undefined word 'cola'",
        "Undefined word 'pop'",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: cola, value: cola, word: cola})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/0, PASS, None, evaluator(Bridge('{ ...next(operator), value: append(before, after) }')), variables({}) bridge(bridge)), range: {'start': 5, 'end': 7}, text: and, word: and})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 9, 'end': 11}, text: pop, value: pop, word: pop})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 13, 'end': 15}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(drink/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 17, 'end': 22}, text: drinks, value: drink, word: drinks})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: cola, value: cola, word: cola})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/0, PASS, None, evaluator(Bridge('{ ...next(operator), value: append(before, after) }')), variables({}) bridge(bridge)), range: {'start': 5, 'end': 7}, text: and, word: and})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 9, 'end': 11}, text: pop, value: pop, word: pop})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 13, 'end': 15}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(drink/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 17, 'end': 22}, text: drinks, value: drink, word: drinks})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 11}, text: cola and pop, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: cola, value: cola, word: cola}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 9, 'end': 11}, text: pop, value: pop, word: pop})], word: and})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 13, 'end': 15}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(drink/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 17, 'end': 22}, text: drinks, value: drink, word: drinks})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 11}, text: cola and pop, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: cola, value: cola, word: cola}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 9, 'end': 11}, text: pop, value: pop, word: pop})], word: and})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 13, 'end': 15}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(drink/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 17, 'end': 22}, text: drinks, value: drink, word: drinks})\n\n\n",
        "Counter == 2. Applying Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)) failed due to the matchers [Type(variable: 'type')] not being present",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 11}, value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: cola, unknown: True, value: cola, word: cola}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 9, 'end': 11}, text: pop, unknown: True, value: pop, word: pop})]})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 13, 'end': 15}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(drink/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 17, 'end': 22}, text: drinks, value: drink, word: drinks})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 11}, value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: cola, unknown: True, value: cola, word: cola}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 9, 'end': 11}, text: pop, unknown: True, value: pop, word: pop})]})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 13, 'end': 15}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(drink/0, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, range: {'start': 17, 'end': 22}, text: drinks, value: drink, word: drinks})\n\n\n",
        "Counter == 3. Applying Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)) failed due to the matchers [Type(variable: 'type')] not being present",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 11}, value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: cola, unknown: True, value: cola, word: cola}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 9, 'end': 11}, text: pop, unknown: True, value: pop, word: pop})]})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 13, 'end': 15}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(drink/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 17, 'end': 22}, text: drinks, value: drink, word: drinks})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 11}, value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: cola, unknown: True, value: cola, word: cola}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 9, 'end': 11}, text: pop, unknown: True, value: pop, word: pop})]})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 13, 'end': 15}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(drink/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 17, 'end': 22}, text: drinks, value: drink, word: drinks})\n\n\n",
        "Counter == 4. Applying Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)) failed due to the matchers [Type(variable: 'type')] not being present",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 22}, types: ['unknown'], value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: cola, unknown: True, value: cola, word: cola}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 9, 'end': 11}, text: pop, unknown: True, value: pop, word: pop})]}), range: {'start': 0, 'end': 22}, text:  are drinks, two: Context({marker: Operator(drink/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 17, 'end': 22}, text: drinks, types: ['drink'], value: drink, word: drinks}), word: are})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 22}, types: ['unknown'], value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: cola, unknown: True, value: cola, word: cola}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 9, 'end': 11}, text: pop, unknown: True, value: pop, word: pop})]}), range: {'start': 0, 'end': 22}, text:  are drinks, two: Context({marker: Operator(drink/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 17, 'end': 22}, text: drinks, types: ['drink'], value: drink, word: drinks}), word: are})\n\n\n",
        "Applying implicit. Counter 6\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/2, None, evaluator(None), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 22}, types: ['unknown'], value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: cola, unknown: True, value: cola, word: cola}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 9, 'end': 11}, text: pop, unknown: True, value: pop, word: pop})]}), range: {'start': 0, 'end': 22}, text:  are drinks, two: Context({marker: Operator(drink/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 17, 'end': 22}, text: drinks, types: ['drink'], value: drink, word: drinks}), word: are})\n\n\n",
        "Applying implicit. Counter 6\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/2, None, evaluator(None), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 22}, types: ['unknown'], value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: cola, unknown: True, value: cola, word: cola}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 9, 'end': 11}, text: pop, unknown: True, value: pop, word: pop})]}), range: {'start': 0, 'end': 22}, text:  are drinks, two: Context({marker: Operator(drink/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 17, 'end': 22}, text: drinks, types: ['drink'], value: drink, word: drinks}), word: are})\n\n\n",
        "Op choices were: [(('list', 0), [('drink', 0), ('is', 0), ('unknown', 0)], 1), (('list', 1), [('drink', 0), ('is', 0), ('unknown', 0)], 2), (('list', 1), [('drink', 0), ('is', 0), ('unknown', 0)], 2), (('list', 1), [('drink', 0), ('is', 0), ('unknown', 1)], 3), (('drink', 0), [('drink', 0), ('is', 0), ('unknown', 1)], 3), (('list', 1), [('is', 0), ('unknown', 1)], 4), (('is', 0), [('is', 0), ('unknown', 1)], 4), (('is', 1), [('is', 1)], 5)]",
        "Contexts used for choosing operators (if the wrong choices were made update the priorities array. Put the expected choice at the end of the list. you can check for loops in the priorities by adding the -cl flag and running a query): \n  Context for choosing the operator list/0 was [['drink', 0], ['is', 0], ['unknown', 0]]. Counter 1\n  Context for choosing the operator list/1 was [['drink', 0], ['is', 0], ['unknown', 0]]. Counter 2\n  Context for choosing the operator list/1 was [['drink', 0], ['is', 0], ['unknown', 0]]. Counter 2\n  Context for choosing the operator list/1 was [['drink', 0], ['is', 0], ['unknown', 1]]. Counter 3\n  Context for choosing the operator drink/0 was [['drink', 0], ['is', 0], ['unknown', 1]]. Counter 3\n  Context for choosing the operator list/1 was [['is', 0], ['unknown', 1]]. Counter 4\n  Context for choosing the operator is/0 was [['is', 0], ['unknown', 1]]. Counter 4\n  Context for choosing the operator is/1 was [['is', 1]]. Counter 5",
        "Associations made with probabilities (each group is a choice point. if the wrong choices were made update the associations list): "
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "list",
              0
            ],
            "ops": [
              [
                "drink",
                0
              ],
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "drink",
                0
              ],
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "drink",
                0
              ],
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "drink",
                0
              ],
              [
                "is",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "drink",
              0
            ],
            "ops": [
              [
                "drink",
                0
              ],
              [
                "is",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ],
            "counter": 5
          }
        ]
      },
      "trace": "undefined",
      "contexts": [
        {
          "number": "many",
          "text": " are drinks",
          "marker": "is",
          "word": "are",
          "range": {
            "start": 0,
            "end": 22
          },
          "one": {
            "number": "many",
            "marker": "list",
            "value": [
              {
                "marker": "unknown",
                "range": {
                  "start": 0,
                  "end": 3
                },
                "word": "cola",
                "text": "cola",
                "value": "cola",
                "unknown": true
              },
              {
                "marker": "unknown",
                "range": {
                  "start": 9,
                  "end": 11
                },
                "word": "pop",
                "text": "pop",
                "value": "pop",
                "unknown": true
              }
            ],
            "range": {
              "start": 0,
              "end": 22
            },
            "types": [
              "list",
              "unknown"
            ]
          },
          "two": {
            "value": "drink",
            "number": "many",
            "text": "drinks",
            "marker": "drink",
            "word": "drinks",
            "range": {
              "start": 17,
              "end": 22
            },
            "types": [
              "drink"
            ],
            "concept": true
          },
          "topLevel": true,
          "touchedBy": [
            "call2"
          ]
        }
      ],
      "generated": [
        "cola and pop are drinks"
      ],
      "paraphrases": [
        "cola and pop are drinks"
      ],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "drink",
            0
          ],
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "drink",
            0
          ],
          [
            "is",
            0
          ],
          [
            "list",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ]
        ]
      ],
      "version": "7.5.0-beta.49",
      "query": "cola and pop are drinks",
      "key": {
        "query": "cola and pop are drinks"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "armor",
          "clothe"
        ],
        [
          "armor",
          "hierarchyAble"
        ],
        [
          "armor",
          "isEdee"
        ],
        [
          "armor",
          "isEder"
        ],
        [
          "armor",
          "object"
        ],
        [
          "armor",
          "property"
        ],
        [
          "armor",
          "queryable"
        ],
        [
          "armor",
          "theAble"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "clothe",
          "hierarchyAble"
        ],
        [
          "clothe",
          "isEdee"
        ],
        [
          "clothe",
          "isEder"
        ],
        [
          "clothe",
          "object"
        ],
        [
          "clothe",
          "property"
        ],
        [
          "clothe",
          "queryable"
        ],
        [
          "clothe",
          "theAble"
        ],
        [
          "clothe",
          "wearable"
        ],
        [
          "cola",
          "drink"
        ],
        [
          "cola",
          "hierarchyAble"
        ],
        [
          "cola",
          "isEdee"
        ],
        [
          "cola",
          "isEder"
        ],
        [
          "cola",
          "object"
        ],
        [
          "cola",
          "property"
        ],
        [
          "cola",
          "queryable"
        ],
        [
          "cola",
          "theAble"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "condition",
          "condition"
        ],
        [
          "drink",
          "drinkable"
        ],
        [
          "drink",
          "hierarchyAble"
        ],
        [
          "drink",
          "isEdee"
        ],
        [
          "drink",
          "isEder"
        ],
        [
          "drink",
          "object"
        ],
        [
          "drink",
          "property"
        ],
        [
          "drink",
          "queryable"
        ],
        [
          "drink",
          "theAble"
        ],
        [
          "drinkable",
          "hierarchyAble"
        ],
        [
          "drinkable",
          "isEdee"
        ],
        [
          "drinkable",
          "isEder"
        ],
        [
          "drinkable",
          "object"
        ],
        [
          "drinkable",
          "property"
        ],
        [
          "drinkable",
          "queryable"
        ],
        [
          "drinkable",
          "theAble"
        ],
        [
          "edible",
          "hierarchyAble"
        ],
        [
          "edible",
          "isEdee"
        ],
        [
          "edible",
          "isEder"
        ],
        [
          "edible",
          "object"
        ],
        [
          "edible",
          "property"
        ],
        [
          "edible",
          "queryable"
        ],
        [
          "edible",
          "theAble"
        ],
        [
          "equipable",
          "hierarchyAble"
        ],
        [
          "equipable",
          "isEdee"
        ],
        [
          "equipable",
          "isEder"
        ],
        [
          "equipable",
          "object"
        ],
        [
          "equipable",
          "property"
        ],
        [
          "equipable",
          "queryable"
        ],
        [
          "equipable",
          "theAble"
        ],
        [
          "explosive",
          "hierarchyAble"
        ],
        [
          "explosive",
          "isEdee"
        ],
        [
          "explosive",
          "isEder"
        ],
        [
          "explosive",
          "object"
        ],
        [
          "explosive",
          "property"
        ],
        [
          "explosive",
          "queryable"
        ],
        [
          "explosive",
          "theAble"
        ],
        [
          "explosive",
          "weapon"
        ],
        [
          "firearm",
          "hierarchyAble"
        ],
        [
          "firearm",
          "isEdee"
        ],
        [
          "firearm",
          "isEder"
        ],
        [
          "firearm",
          "object"
        ],
        [
          "firearm",
          "property"
        ],
        [
          "firearm",
          "queryable"
        ],
        [
          "firearm",
          "theAble"
        ],
        [
          "firearm",
          "weapon"
        ],
        [
          "food",
          "edible"
        ],
        [
          "food",
          "hierarchyAble"
        ],
        [
          "food",
          "isEdee"
        ],
        [
          "food",
          "isEder"
        ],
        [
          "food",
          "object"
        ],
        [
          "food",
          "property"
        ],
        [
          "food",
          "queryable"
        ],
        [
          "food",
          "theAble"
        ],
        [
          "fruit",
          "food"
        ],
        [
          "fruit",
          "hierarchyAble"
        ],
        [
          "fruit",
          "isEdee"
        ],
        [
          "fruit",
          "isEder"
        ],
        [
          "fruit",
          "object"
        ],
        [
          "fruit",
          "property"
        ],
        [
          "fruit",
          "queryable"
        ],
        [
          "fruit",
          "theAble"
        ],
        [
          "grenade",
          "explosive"
        ],
        [
          "grenade",
          "hierarchyAble"
        ],
        [
          "grenade",
          "isEdee"
        ],
        [
          "grenade",
          "isEder"
        ],
        [
          "grenade",
          "object"
        ],
        [
          "grenade",
          "property"
        ],
        [
          "grenade",
          "queryable"
        ],
        [
          "grenade",
          "theAble"
        ],
        [
          "grenade",
          "weapon"
        ],
        [
          "hat",
          "clothe"
        ],
        [
          "hat",
          "hierarchyAble"
        ],
        [
          "hat",
          "isEdee"
        ],
        [
          "hat",
          "isEder"
        ],
        [
          "hat",
          "object"
        ],
        [
          "hat",
          "property"
        ],
        [
          "hat",
          "queryable"
        ],
        [
          "hat",
          "theAble"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "highest",
          "condition"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "isEd",
          "isEd"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "lowest",
          "condition"
        ],
        [
          "meat",
          "food"
        ],
        [
          "meat",
          "hierarchyAble"
        ],
        [
          "meat",
          "isEdee"
        ],
        [
          "meat",
          "isEder"
        ],
        [
          "meat",
          "object"
        ],
        [
          "meat",
          "property"
        ],
        [
          "meat",
          "queryable"
        ],
        [
          "meat",
          "theAble"
        ],
        [
          "mine",
          "explosive"
        ],
        [
          "mine",
          "hierarchyAble"
        ],
        [
          "mine",
          "isEdee"
        ],
        [
          "mine",
          "isEder"
        ],
        [
          "mine",
          "object"
        ],
        [
          "mine",
          "property"
        ],
        [
          "mine",
          "queryable"
        ],
        [
          "mine",
          "theAble"
        ],
        [
          "mine",
          "weapon"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "pistol",
          "firearm"
        ],
        [
          "pistol",
          "hierarchyAble"
        ],
        [
          "pistol",
          "isEdee"
        ],
        [
          "pistol",
          "isEder"
        ],
        [
          "pistol",
          "object"
        ],
        [
          "pistol",
          "property"
        ],
        [
          "pistol",
          "queryable"
        ],
        [
          "pistol",
          "theAble"
        ],
        [
          "pistol",
          "weapon"
        ],
        [
          "pop",
          "drink"
        ],
        [
          "pop",
          "hierarchyAble"
        ],
        [
          "pop",
          "isEdee"
        ],
        [
          "pop",
          "isEder"
        ],
        [
          "pop",
          "object"
        ],
        [
          "pop",
          "property"
        ],
        [
          "pop",
          "queryable"
        ],
        [
          "pop",
          "theAble"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "isEd"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "rifle",
          "firearm"
        ],
        [
          "rifle",
          "hierarchyAble"
        ],
        [
          "rifle",
          "isEdee"
        ],
        [
          "rifle",
          "isEder"
        ],
        [
          "rifle",
          "object"
        ],
        [
          "rifle",
          "property"
        ],
        [
          "rifle",
          "queryable"
        ],
        [
          "rifle",
          "theAble"
        ],
        [
          "rifle",
          "weapon"
        ],
        [
          "shotgun",
          "firearm"
        ],
        [
          "shotgun",
          "hierarchyAble"
        ],
        [
          "shotgun",
          "isEdee"
        ],
        [
          "shotgun",
          "isEder"
        ],
        [
          "shotgun",
          "object"
        ],
        [
          "shotgun",
          "property"
        ],
        [
          "shotgun",
          "queryable"
        ],
        [
          "shotgun",
          "theAble"
        ],
        [
          "shotgun",
          "weapon"
        ],
        [
          "suit",
          "clothe"
        ],
        [
          "suit",
          "hierarchyAble"
        ],
        [
          "suit",
          "isEdee"
        ],
        [
          "suit",
          "isEder"
        ],
        [
          "suit",
          "object"
        ],
        [
          "suit",
          "property"
        ],
        [
          "suit",
          "queryable"
        ],
        [
          "suit",
          "theAble"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "vegetable",
          "food"
        ],
        [
          "vegetable",
          "hierarchyAble"
        ],
        [
          "vegetable",
          "isEdee"
        ],
        [
          "vegetable",
          "isEder"
        ],
        [
          "vegetable",
          "object"
        ],
        [
          "vegetable",
          "property"
        ],
        [
          "vegetable",
          "queryable"
        ],
        [
          "vegetable",
          "theAble"
        ],
        [
          "weapon",
          "equipable"
        ],
        [
          "weapon",
          "hierarchyAble"
        ],
        [
          "weapon",
          "isEdee"
        ],
        [
          "weapon",
          "isEder"
        ],
        [
          "weapon",
          "object"
        ],
        [
          "weapon",
          "property"
        ],
        [
          "weapon",
          "queryable"
        ],
        [
          "weapon",
          "theAble"
        ],
        [
          "wearable",
          "hierarchyAble"
        ],
        [
          "wearable",
          "isEdee"
        ],
        [
          "wearable",
          "isEder"
        ],
        [
          "wearable",
          "object"
        ],
        [
          "wearable",
          "property"
        ],
        [
          "wearable",
          "queryable"
        ],
        [
          "wearable",
          "theAble"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ]
      ],
      "logs": [
        "Undefined word 'medicine'",
        "Undefined word 'stimpaks'",
        "Undefined word 'takeable'",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 7}, text: medicine, value: medicine, word: medicine})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/0, PASS, None, evaluator(Bridge('{ ...next(operator), value: append(before, after) }')), variables({}) bridge(bridge)), range: {'start': 9, 'end': 11}, text: and, word: and})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 13, 'end': 20}, text: stimpaks, value: stimpaks, word: stimpaks})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 22, 'end': 24}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 33}, text: takeable, value: takeable, word: takeable})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 7}, text: medicine, value: medicine, word: medicine})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/0, PASS, None, evaluator(Bridge('{ ...next(operator), value: append(before, after) }')), variables({}) bridge(bridge)), range: {'start': 9, 'end': 11}, text: and, word: and})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 13, 'end': 20}, text: stimpaks, value: stimpaks, word: stimpaks})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 22, 'end': 24}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 33}, text: takeable, value: takeable, word: takeable})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 20}, text: medicine and stimpaks, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 7}, text: medicine, value: medicine, word: medicine}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 13, 'end': 20}, text: stimpaks, value: stimpaks, word: stimpaks})], word: and})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 22, 'end': 24}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 33}, text: takeable, value: takeable, word: takeable})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 20}, text: medicine and stimpaks, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 7}, text: medicine, value: medicine, word: medicine}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 13, 'end': 20}, text: stimpaks, value: stimpaks, word: stimpaks})], word: and})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 22, 'end': 24}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 33}, text: takeable, value: takeable, word: takeable})\n\n\n",
        "Counter == 2. Applying Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)) failed due to the matchers [Type(variable: 'type')] not being present",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 20}, value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 7}, text: medicine, unknown: True, value: medicine, word: medicine}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 13, 'end': 20}, text: stimpaks, unknown: True, value: stimpaks, word: stimpaks})]})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 22, 'end': 24}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 33}, text: takeable, value: takeable, word: takeable})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 20}, value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 7}, text: medicine, unknown: True, value: medicine, word: medicine}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 13, 'end': 20}, text: stimpaks, unknown: True, value: stimpaks, word: stimpaks})]})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 22, 'end': 24}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 33}, text: takeable, value: takeable, word: takeable})\n\n\n",
        "Counter == 3. Applying Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)) failed due to the matchers [Type(variable: 'type')] not being present",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 20}, value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 7}, text: medicine, unknown: True, value: medicine, word: medicine}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 13, 'end': 20}, text: stimpaks, unknown: True, value: stimpaks, word: stimpaks})]})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 22, 'end': 24}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 33}, text: takeable, unknown: True, value: takeable, word: takeable})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 20}, value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 7}, text: medicine, unknown: True, value: medicine, word: medicine}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 13, 'end': 20}, text: stimpaks, unknown: True, value: stimpaks, word: stimpaks})]})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 22, 'end': 24}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 33}, text: takeable, unknown: True, value: takeable, word: takeable})\n\n\n",
        "Counter == 4. Applying Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)) failed due to the matchers [Type(variable: 'type')] not being present",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 33}, types: ['unknown'], value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 7}, text: medicine, unknown: True, value: medicine, word: medicine}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 13, 'end': 20}, text: stimpaks, unknown: True, value: stimpaks, word: stimpaks})]}), range: {'start': 0, 'end': 33}, text:  are takeable, two: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 33}, text: takeable, types: ['unknown'], unknown: True, value: takeable, word: takeable}), word: are})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 33}, types: ['unknown'], value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 7}, text: medicine, unknown: True, value: medicine, word: medicine}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 13, 'end': 20}, text: stimpaks, unknown: True, value: stimpaks, word: stimpaks})]}), range: {'start': 0, 'end': 33}, text:  are takeable, two: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 33}, text: takeable, types: ['unknown'], unknown: True, value: takeable, word: takeable}), word: are})\n\n\n",
        "Applying implicit. Counter 6\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/2, None, evaluator(None), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 33}, types: ['unknown'], value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 7}, text: medicine, unknown: True, value: medicine, word: medicine}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 13, 'end': 20}, text: stimpaks, unknown: True, value: stimpaks, word: stimpaks})]}), range: {'start': 0, 'end': 33}, text:  are takeable, two: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 33}, text: takeable, types: ['unknown'], unknown: True, value: takeable, word: takeable}), word: are})\n\n\n",
        "Applying implicit. Counter 6\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/2, None, evaluator(None), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 33}, types: ['unknown'], value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 7}, text: medicine, unknown: True, value: medicine, word: medicine}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 13, 'end': 20}, text: stimpaks, unknown: True, value: stimpaks, word: stimpaks})]}), range: {'start': 0, 'end': 33}, text:  are takeable, two: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 33}, text: takeable, types: ['unknown'], unknown: True, value: takeable, word: takeable}), word: are})\n\n\n",
        "Op choices were: [(('list', 0), [('is', 0), ('unknown', 0)], 1), (('list', 1), [('is', 0), ('unknown', 0)], 2), (('list', 1), [('is', 0), ('unknown', 0)], 2), (('list', 1), [('is', 0), ('unknown', 0), ('unknown', 1)], 3), (('unknown', 0), [('is', 0), ('unknown', 0), ('unknown', 1)], 3), (('list', 1), [('is', 0), ('unknown', 1)], 4), (('is', 0), [('is', 0), ('unknown', 1)], 4), (('is', 1), [('is', 1)], 5)]",
        "Contexts used for choosing operators (if the wrong choices were made update the priorities array. Put the expected choice at the end of the list. you can check for loops in the priorities by adding the -cl flag and running a query): \n  Context for choosing the operator list/0 was [['is', 0], ['unknown', 0]]. Counter 1\n  Context for choosing the operator list/1 was [['is', 0], ['unknown', 0]]. Counter 2\n  Context for choosing the operator list/1 was [['is', 0], ['unknown', 0]]. Counter 2\n  Context for choosing the operator list/1 was [['is', 0], ['unknown', 0], ['unknown', 1]]. Counter 3\n  Context for choosing the operator unknown/0 was [['is', 0], ['unknown', 0], ['unknown', 1]]. Counter 3\n  Context for choosing the operator list/1 was [['is', 0], ['unknown', 1]]. Counter 4\n  Context for choosing the operator is/0 was [['is', 0], ['unknown', 1]]. Counter 4\n  Context for choosing the operator is/1 was [['is', 1]]. Counter 5",
        "Associations made with probabilities (each group is a choice point. if the wrong choices were made update the associations list): \n  Group 0\n    0.4 - [['list', 0], ['unknown', 0], \">>>>2 ['isEd', 0] <<<<2\", ['unknown', 0]]\n      (('list', 0), ('unknown', 0))\n      (('unknown', 0), ('isEd', 0))\n    0.6000000000000001 - [['list', 0], ['unknown', 0], \">>>>2 ['is', 0] <<<<2\", ['unknown', 0]]\n      (('unknown', 0), ('is', 0), ('unknown', 0))\n  Group 1\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 0), ('is', 0), ('unknown', 0))\n    0.5 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 0), ('isEd', 0))\n  Group 2\n    0.5 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 1), ('isEd', 0))\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 1), ('is', 0), ('unknown', 0))\n  Group 3\n    0.6666666666666666 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 1), ('isEd', 0))\n      (('isEd', 0), ('unknown', 1))\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['unknown', 0]]\n      (('unknown', 1), ('is', 0), ('unknown', 1))"
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "list",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ],
            "counter": 5
          }
        ]
      },
      "trace": "undefined",
      "contexts": [
        {
          "number": "many",
          "text": " are takeable",
          "marker": "is",
          "word": "are",
          "range": {
            "start": 0,
            "end": 33
          },
          "one": {
            "number": "many",
            "marker": "list",
            "value": [
              {
                "marker": "unknown",
                "range": {
                  "start": 0,
                  "end": 7
                },
                "word": "medicine",
                "text": "medicine",
                "value": "medicine",
                "unknown": true
              },
              {
                "marker": "unknown",
                "range": {
                  "start": 13,
                  "end": 20
                },
                "word": "stimpaks",
                "text": "stimpaks",
                "value": "stimpaks",
                "unknown": true
              }
            ],
            "range": {
              "start": 0,
              "end": 33
            },
            "types": [
              "list",
              "unknown"
            ]
          },
          "two": {
            "marker": "unknown",
            "range": {
              "start": 26,
              "end": 33
            },
            "word": "takeable",
            "text": "takeable",
            "value": "takeable",
            "unknown": true,
            "types": [
              "unknown"
            ],
            "concept": true
          },
          "topLevel": true,
          "touchedBy": [
            "call2"
          ]
        }
      ],
      "generated": [
        "medicine and stimpaks are takeable"
      ],
      "paraphrases": [
        "medicine and stimpaks are takeable"
      ],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "is",
            0
          ],
          [
            "list",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "version": "7.5.0-beta.49",
      "query": "medicine and stimpaks are takeable",
      "key": {
        "query": "medicine and stimpaks are takeable"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "armor",
          "clothe"
        ],
        [
          "armor",
          "hierarchyAble"
        ],
        [
          "armor",
          "isEdee"
        ],
        [
          "armor",
          "isEder"
        ],
        [
          "armor",
          "object"
        ],
        [
          "armor",
          "property"
        ],
        [
          "armor",
          "queryable"
        ],
        [
          "armor",
          "theAble"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "clothe",
          "hierarchyAble"
        ],
        [
          "clothe",
          "isEdee"
        ],
        [
          "clothe",
          "isEder"
        ],
        [
          "clothe",
          "object"
        ],
        [
          "clothe",
          "property"
        ],
        [
          "clothe",
          "queryable"
        ],
        [
          "clothe",
          "theAble"
        ],
        [
          "clothe",
          "wearable"
        ],
        [
          "cola",
          "drink"
        ],
        [
          "cola",
          "hierarchyAble"
        ],
        [
          "cola",
          "isEdee"
        ],
        [
          "cola",
          "isEder"
        ],
        [
          "cola",
          "object"
        ],
        [
          "cola",
          "property"
        ],
        [
          "cola",
          "queryable"
        ],
        [
          "cola",
          "theAble"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "condition",
          "condition"
        ],
        [
          "drink",
          "drinkable"
        ],
        [
          "drink",
          "hierarchyAble"
        ],
        [
          "drink",
          "isEdee"
        ],
        [
          "drink",
          "isEder"
        ],
        [
          "drink",
          "object"
        ],
        [
          "drink",
          "property"
        ],
        [
          "drink",
          "queryable"
        ],
        [
          "drink",
          "theAble"
        ],
        [
          "drinkable",
          "hierarchyAble"
        ],
        [
          "drinkable",
          "isEdee"
        ],
        [
          "drinkable",
          "isEder"
        ],
        [
          "drinkable",
          "object"
        ],
        [
          "drinkable",
          "property"
        ],
        [
          "drinkable",
          "queryable"
        ],
        [
          "drinkable",
          "theAble"
        ],
        [
          "edible",
          "hierarchyAble"
        ],
        [
          "edible",
          "isEdee"
        ],
        [
          "edible",
          "isEder"
        ],
        [
          "edible",
          "object"
        ],
        [
          "edible",
          "property"
        ],
        [
          "edible",
          "queryable"
        ],
        [
          "edible",
          "theAble"
        ],
        [
          "equipable",
          "hierarchyAble"
        ],
        [
          "equipable",
          "isEdee"
        ],
        [
          "equipable",
          "isEder"
        ],
        [
          "equipable",
          "object"
        ],
        [
          "equipable",
          "property"
        ],
        [
          "equipable",
          "queryable"
        ],
        [
          "equipable",
          "theAble"
        ],
        [
          "explosive",
          "hierarchyAble"
        ],
        [
          "explosive",
          "isEdee"
        ],
        [
          "explosive",
          "isEder"
        ],
        [
          "explosive",
          "object"
        ],
        [
          "explosive",
          "property"
        ],
        [
          "explosive",
          "queryable"
        ],
        [
          "explosive",
          "theAble"
        ],
        [
          "explosive",
          "weapon"
        ],
        [
          "firearm",
          "hierarchyAble"
        ],
        [
          "firearm",
          "isEdee"
        ],
        [
          "firearm",
          "isEder"
        ],
        [
          "firearm",
          "object"
        ],
        [
          "firearm",
          "property"
        ],
        [
          "firearm",
          "queryable"
        ],
        [
          "firearm",
          "theAble"
        ],
        [
          "firearm",
          "weapon"
        ],
        [
          "food",
          "edible"
        ],
        [
          "food",
          "hierarchyAble"
        ],
        [
          "food",
          "isEdee"
        ],
        [
          "food",
          "isEder"
        ],
        [
          "food",
          "object"
        ],
        [
          "food",
          "property"
        ],
        [
          "food",
          "queryable"
        ],
        [
          "food",
          "theAble"
        ],
        [
          "fruit",
          "food"
        ],
        [
          "fruit",
          "hierarchyAble"
        ],
        [
          "fruit",
          "isEdee"
        ],
        [
          "fruit",
          "isEder"
        ],
        [
          "fruit",
          "object"
        ],
        [
          "fruit",
          "property"
        ],
        [
          "fruit",
          "queryable"
        ],
        [
          "fruit",
          "theAble"
        ],
        [
          "grenade",
          "explosive"
        ],
        [
          "grenade",
          "hierarchyAble"
        ],
        [
          "grenade",
          "isEdee"
        ],
        [
          "grenade",
          "isEder"
        ],
        [
          "grenade",
          "object"
        ],
        [
          "grenade",
          "property"
        ],
        [
          "grenade",
          "queryable"
        ],
        [
          "grenade",
          "theAble"
        ],
        [
          "grenade",
          "weapon"
        ],
        [
          "hat",
          "clothe"
        ],
        [
          "hat",
          "hierarchyAble"
        ],
        [
          "hat",
          "isEdee"
        ],
        [
          "hat",
          "isEder"
        ],
        [
          "hat",
          "object"
        ],
        [
          "hat",
          "property"
        ],
        [
          "hat",
          "queryable"
        ],
        [
          "hat",
          "theAble"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "highest",
          "condition"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "isEd",
          "isEd"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "lowest",
          "condition"
        ],
        [
          "meat",
          "food"
        ],
        [
          "meat",
          "hierarchyAble"
        ],
        [
          "meat",
          "isEdee"
        ],
        [
          "meat",
          "isEder"
        ],
        [
          "meat",
          "object"
        ],
        [
          "meat",
          "property"
        ],
        [
          "meat",
          "queryable"
        ],
        [
          "meat",
          "theAble"
        ],
        [
          "medicine",
          "hierarchyAble"
        ],
        [
          "medicine",
          "isEdee"
        ],
        [
          "medicine",
          "isEder"
        ],
        [
          "medicine",
          "object"
        ],
        [
          "medicine",
          "property"
        ],
        [
          "medicine",
          "queryable"
        ],
        [
          "medicine",
          "takeable"
        ],
        [
          "medicine",
          "theAble"
        ],
        [
          "mine",
          "explosive"
        ],
        [
          "mine",
          "hierarchyAble"
        ],
        [
          "mine",
          "isEdee"
        ],
        [
          "mine",
          "isEder"
        ],
        [
          "mine",
          "object"
        ],
        [
          "mine",
          "property"
        ],
        [
          "mine",
          "queryable"
        ],
        [
          "mine",
          "theAble"
        ],
        [
          "mine",
          "weapon"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "pistol",
          "firearm"
        ],
        [
          "pistol",
          "hierarchyAble"
        ],
        [
          "pistol",
          "isEdee"
        ],
        [
          "pistol",
          "isEder"
        ],
        [
          "pistol",
          "object"
        ],
        [
          "pistol",
          "property"
        ],
        [
          "pistol",
          "queryable"
        ],
        [
          "pistol",
          "theAble"
        ],
        [
          "pistol",
          "weapon"
        ],
        [
          "pop",
          "drink"
        ],
        [
          "pop",
          "hierarchyAble"
        ],
        [
          "pop",
          "isEdee"
        ],
        [
          "pop",
          "isEder"
        ],
        [
          "pop",
          "object"
        ],
        [
          "pop",
          "property"
        ],
        [
          "pop",
          "queryable"
        ],
        [
          "pop",
          "theAble"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "isEd"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "rifle",
          "firearm"
        ],
        [
          "rifle",
          "hierarchyAble"
        ],
        [
          "rifle",
          "isEdee"
        ],
        [
          "rifle",
          "isEder"
        ],
        [
          "rifle",
          "object"
        ],
        [
          "rifle",
          "property"
        ],
        [
          "rifle",
          "queryable"
        ],
        [
          "rifle",
          "theAble"
        ],
        [
          "rifle",
          "weapon"
        ],
        [
          "shotgun",
          "firearm"
        ],
        [
          "shotgun",
          "hierarchyAble"
        ],
        [
          "shotgun",
          "isEdee"
        ],
        [
          "shotgun",
          "isEder"
        ],
        [
          "shotgun",
          "object"
        ],
        [
          "shotgun",
          "property"
        ],
        [
          "shotgun",
          "queryable"
        ],
        [
          "shotgun",
          "theAble"
        ],
        [
          "shotgun",
          "weapon"
        ],
        [
          "stimpak",
          "hierarchyAble"
        ],
        [
          "stimpak",
          "isEdee"
        ],
        [
          "stimpak",
          "isEder"
        ],
        [
          "stimpak",
          "object"
        ],
        [
          "stimpak",
          "property"
        ],
        [
          "stimpak",
          "queryable"
        ],
        [
          "stimpak",
          "takeable"
        ],
        [
          "stimpak",
          "theAble"
        ],
        [
          "suit",
          "clothe"
        ],
        [
          "suit",
          "hierarchyAble"
        ],
        [
          "suit",
          "isEdee"
        ],
        [
          "suit",
          "isEder"
        ],
        [
          "suit",
          "object"
        ],
        [
          "suit",
          "property"
        ],
        [
          "suit",
          "queryable"
        ],
        [
          "suit",
          "theAble"
        ],
        [
          "takeable",
          "hierarchyAble"
        ],
        [
          "takeable",
          "isEdee"
        ],
        [
          "takeable",
          "isEder"
        ],
        [
          "takeable",
          "object"
        ],
        [
          "takeable",
          "property"
        ],
        [
          "takeable",
          "queryable"
        ],
        [
          "takeable",
          "theAble"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "vegetable",
          "food"
        ],
        [
          "vegetable",
          "hierarchyAble"
        ],
        [
          "vegetable",
          "isEdee"
        ],
        [
          "vegetable",
          "isEder"
        ],
        [
          "vegetable",
          "object"
        ],
        [
          "vegetable",
          "property"
        ],
        [
          "vegetable",
          "queryable"
        ],
        [
          "vegetable",
          "theAble"
        ],
        [
          "weapon",
          "equipable"
        ],
        [
          "weapon",
          "hierarchyAble"
        ],
        [
          "weapon",
          "isEdee"
        ],
        [
          "weapon",
          "isEder"
        ],
        [
          "weapon",
          "object"
        ],
        [
          "weapon",
          "property"
        ],
        [
          "weapon",
          "queryable"
        ],
        [
          "weapon",
          "theAble"
        ],
        [
          "wearable",
          "hierarchyAble"
        ],
        [
          "wearable",
          "isEdee"
        ],
        [
          "wearable",
          "isEder"
        ],
        [
          "wearable",
          "object"
        ],
        [
          "wearable",
          "property"
        ],
        [
          "wearable",
          "queryable"
        ],
        [
          "wearable",
          "theAble"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ]
      ],
      "logs": [
        "Undefined word 'item'",
        "Undefined word 'properties'",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: item, value: item, word: item})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(modifies/0, None, evaluator(Bridge('{ ...next(operator), modifier: before[0], concept: after[0] }')), variables({}) bridge(bridge)), range: {'start': 5, 'end': 12}, text: modifies, value: modifies, word: modifies})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 14, 'end': 23}, text: properties, value: properties, word: properties})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: item, value: item, word: item})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(modifies/0, None, evaluator(Bridge('{ ...next(operator), modifier: before[0], concept: after[0] }')), variables({}) bridge(bridge)), range: {'start': 5, 'end': 12}, text: modifies, value: modifies, word: modifies})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 14, 'end': 23}, text: properties, value: properties, word: properties})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: item, unknown: True, value: item, word: item})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(modifies/0, None, evaluator(Bridge('{ ...next(operator), modifier: before[0], concept: after[0] }')), variables({}) bridge(bridge)), range: {'start': 5, 'end': 12}, text: modifies, value: modifies, word: modifies})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 14, 'end': 23}, text: properties, value: properties, word: properties})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: item, unknown: True, value: item, word: item})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(modifies/0, None, evaluator(Bridge('{ ...next(operator), modifier: before[0], concept: after[0] }')), variables({}) bridge(bridge)), range: {'start': 5, 'end': 12}, text: modifies, value: modifies, word: modifies})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 14, 'end': 23}, text: properties, value: properties, word: properties})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: item, unknown: True, value: item, word: item})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(modifies/0, None, evaluator(Bridge('{ ...next(operator), modifier: before[0], concept: after[0] }')), variables({}) bridge(bridge)), range: {'start': 5, 'end': 12}, text: modifies, value: modifies, word: modifies})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 14, 'end': 23}, text: properties, unknown: True, value: properties, word: properties})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: item, unknown: True, value: item, word: item})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(modifies/0, None, evaluator(Bridge('{ ...next(operator), modifier: before[0], concept: after[0] }')), variables({}) bridge(bridge)), range: {'start': 5, 'end': 12}, text: modifies, value: modifies, word: modifies})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 14, 'end': 23}, text: properties, unknown: True, value: properties, word: properties})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({concept: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 14, 'end': 23}, text: properties, unknown: True, value: properties, word: properties}), default: True, marker: Operator(modifies/1, None, evaluator(None), variables({}) bridge(bridge)), modifier: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: item, unknown: True, value: item, word: item}), range: {'start': 0, 'end': 23}, text: item modifies properties, value: modifies, word: modifies})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({concept: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 14, 'end': 23}, text: properties, unknown: True, value: properties, word: properties}), default: True, marker: Operator(modifies/1, None, evaluator(None), variables({}) bridge(bridge)), modifier: Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 3}, text: item, unknown: True, value: item, word: item}), range: {'start': 0, 'end': 23}, text: item modifies properties, value: modifies, word: modifies})\n\n\n",
        "Op choices were: [(('unknown', 0), [('modifies', 0), ('unknown', 0)], 1), (('unknown', 0), [('modifies', 0), ('unknown', 0), ('unknown', 1)], 2), (('modifies', 0), [('modifies', 0), ('unknown', 1)], 3)]",
        "Contexts used for choosing operators (if the wrong choices were made update the priorities array. Put the expected choice at the end of the list. you can check for loops in the priorities by adding the -cl flag and running a query): \n  Context for choosing the operator unknown/0 was [['modifies', 0], ['unknown', 0]]. Counter 1\n  Context for choosing the operator unknown/0 was [['modifies', 0], ['unknown', 0], ['unknown', 1]]. Counter 2\n  Context for choosing the operator modifies/0 was [['modifies', 0], ['unknown', 1]]. Counter 3",
        ""
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "modifies",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "modifies",
                0
              ],
              [
                "unknown",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "modifies",
              0
            ],
            "ops": [
              [
                "modifies",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 3
          }
        ]
      },
      "trace": "undefined",
      "contexts": [
        {
          "marker": "modifies",
          "value": "modifies",
          "default": true,
          "text": "item modifies properties",
          "word": "modifies",
          "range": {
            "start": 0,
            "end": 23
          },
          "modifier": {
            "marker": "unknown",
            "range": {
              "start": 0,
              "end": 3
            },
            "word": "item",
            "text": "item",
            "value": "item",
            "unknown": true
          },
          "concept": {
            "marker": "unknown",
            "range": {
              "start": 14,
              "end": 23
            },
            "word": "properties",
            "text": "properties",
            "value": "properties",
            "unknown": true
          },
          "topLevel": true,
          "touchedBy": [
            "call2"
          ]
        }
      ],
      "generated": [
        "modifies"
      ],
      "paraphrases": [
        "item modifies properties"
      ],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "modifies",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "modifies",
            0
          ],
          [
            "unknown",
            0
          ],
          [
            "unknown",
            1
          ]
        ],
        [
          [
            "modifies",
            0
          ],
          [
            "unknown",
            1
          ]
        ]
      ],
      "version": "7.5.0-beta.49",
      "query": "item modifies properties",
      "key": {
        "query": "item modifies properties"
      }
    },
    {
      "hierarchy": [
        [
          "a",
          "articlePOS"
        ],
        [
          "all",
          "quantifier"
        ],
        [
          "armor",
          "clothe"
        ],
        [
          "armor",
          "hierarchyAble"
        ],
        [
          "armor",
          "isEdee"
        ],
        [
          "armor",
          "isEder"
        ],
        [
          "armor",
          "object"
        ],
        [
          "armor",
          "property"
        ],
        [
          "armor",
          "queryable"
        ],
        [
          "armor",
          "theAble"
        ],
        [
          "articlePOS",
          "articlePOS"
        ],
        [
          "canBeDoQuestion",
          "canBeDoQuestion"
        ],
        [
          "canBeQuestion",
          "canBeQuestion"
        ],
        [
          "clothe",
          "hierarchyAble"
        ],
        [
          "clothe",
          "isEdee"
        ],
        [
          "clothe",
          "isEder"
        ],
        [
          "clothe",
          "object"
        ],
        [
          "clothe",
          "property"
        ],
        [
          "clothe",
          "queryable"
        ],
        [
          "clothe",
          "theAble"
        ],
        [
          "clothe",
          "wearable"
        ],
        [
          "cola",
          "drink"
        ],
        [
          "cola",
          "hierarchyAble"
        ],
        [
          "cola",
          "isEdee"
        ],
        [
          "cola",
          "isEder"
        ],
        [
          "cola",
          "object"
        ],
        [
          "cola",
          "property"
        ],
        [
          "cola",
          "queryable"
        ],
        [
          "cola",
          "theAble"
        ],
        [
          "concept",
          "queryable"
        ],
        [
          "concept",
          "theAble"
        ],
        [
          "condition",
          "condition"
        ],
        [
          "drink",
          "drinkable"
        ],
        [
          "drink",
          "hierarchyAble"
        ],
        [
          "drink",
          "isEdee"
        ],
        [
          "drink",
          "isEder"
        ],
        [
          "drink",
          "object"
        ],
        [
          "drink",
          "property"
        ],
        [
          "drink",
          "queryable"
        ],
        [
          "drink",
          "theAble"
        ],
        [
          "drinkable",
          "hierarchyAble"
        ],
        [
          "drinkable",
          "isEdee"
        ],
        [
          "drinkable",
          "isEder"
        ],
        [
          "drinkable",
          "object"
        ],
        [
          "drinkable",
          "property"
        ],
        [
          "drinkable",
          "queryable"
        ],
        [
          "drinkable",
          "theAble"
        ],
        [
          "edible",
          "hierarchyAble"
        ],
        [
          "edible",
          "isEdee"
        ],
        [
          "edible",
          "isEder"
        ],
        [
          "edible",
          "object"
        ],
        [
          "edible",
          "property"
        ],
        [
          "edible",
          "queryable"
        ],
        [
          "edible",
          "theAble"
        ],
        [
          "equipable",
          "hierarchyAble"
        ],
        [
          "equipable",
          "isEdee"
        ],
        [
          "equipable",
          "isEder"
        ],
        [
          "equipable",
          "object"
        ],
        [
          "equipable",
          "property"
        ],
        [
          "equipable",
          "queryable"
        ],
        [
          "equipable",
          "theAble"
        ],
        [
          "explosive",
          "hierarchyAble"
        ],
        [
          "explosive",
          "isEdee"
        ],
        [
          "explosive",
          "isEder"
        ],
        [
          "explosive",
          "object"
        ],
        [
          "explosive",
          "property"
        ],
        [
          "explosive",
          "queryable"
        ],
        [
          "explosive",
          "theAble"
        ],
        [
          "explosive",
          "weapon"
        ],
        [
          "firearm",
          "hierarchyAble"
        ],
        [
          "firearm",
          "isEdee"
        ],
        [
          "firearm",
          "isEder"
        ],
        [
          "firearm",
          "object"
        ],
        [
          "firearm",
          "property"
        ],
        [
          "firearm",
          "queryable"
        ],
        [
          "firearm",
          "theAble"
        ],
        [
          "firearm",
          "weapon"
        ],
        [
          "food",
          "edible"
        ],
        [
          "food",
          "hierarchyAble"
        ],
        [
          "food",
          "isEdee"
        ],
        [
          "food",
          "isEder"
        ],
        [
          "food",
          "object"
        ],
        [
          "food",
          "property"
        ],
        [
          "food",
          "queryable"
        ],
        [
          "food",
          "theAble"
        ],
        [
          "fruit",
          "food"
        ],
        [
          "fruit",
          "hierarchyAble"
        ],
        [
          "fruit",
          "isEdee"
        ],
        [
          "fruit",
          "isEder"
        ],
        [
          "fruit",
          "object"
        ],
        [
          "fruit",
          "property"
        ],
        [
          "fruit",
          "queryable"
        ],
        [
          "fruit",
          "theAble"
        ],
        [
          "grenade",
          "explosive"
        ],
        [
          "grenade",
          "hierarchyAble"
        ],
        [
          "grenade",
          "isEdee"
        ],
        [
          "grenade",
          "isEder"
        ],
        [
          "grenade",
          "object"
        ],
        [
          "grenade",
          "property"
        ],
        [
          "grenade",
          "queryable"
        ],
        [
          "grenade",
          "theAble"
        ],
        [
          "grenade",
          "weapon"
        ],
        [
          "hat",
          "clothe"
        ],
        [
          "hat",
          "hierarchyAble"
        ],
        [
          "hat",
          "isEdee"
        ],
        [
          "hat",
          "isEder"
        ],
        [
          "hat",
          "object"
        ],
        [
          "hat",
          "property"
        ],
        [
          "hat",
          "queryable"
        ],
        [
          "hat",
          "theAble"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "highest",
          "condition"
        ],
        [
          "ifAble",
          "ifAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "isEd",
          "isEd"
        ],
        [
          "isEdee",
          "isEdee"
        ],
        [
          "isEder",
          "isEder"
        ],
        [
          "it",
          "pronoun"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "it",
          "thisitthat"
        ],
        [
          "it",
          "toAble"
        ],
        [
          "item",
          "hierarchyAble"
        ],
        [
          "item",
          "isEdee"
        ],
        [
          "item",
          "isEder"
        ],
        [
          "item",
          "object"
        ],
        [
          "item",
          "property"
        ],
        [
          "item",
          "queryable"
        ],
        [
          "item",
          "theAble"
        ],
        [
          "item_property",
          "concept"
        ],
        [
          "item_property",
          "hierarchyAble"
        ],
        [
          "item_property",
          "isEdee"
        ],
        [
          "item_property",
          "isEder"
        ],
        [
          "item_property",
          "object"
        ],
        [
          "item_property",
          "property"
        ],
        [
          "item_property",
          "queryable"
        ],
        [
          "item_property",
          "theAble"
        ],
        [
          "lowest",
          "condition"
        ],
        [
          "meat",
          "food"
        ],
        [
          "meat",
          "hierarchyAble"
        ],
        [
          "meat",
          "isEdee"
        ],
        [
          "meat",
          "isEder"
        ],
        [
          "meat",
          "object"
        ],
        [
          "meat",
          "property"
        ],
        [
          "meat",
          "queryable"
        ],
        [
          "meat",
          "theAble"
        ],
        [
          "medicine",
          "hierarchyAble"
        ],
        [
          "medicine",
          "isEdee"
        ],
        [
          "medicine",
          "isEder"
        ],
        [
          "medicine",
          "object"
        ],
        [
          "medicine",
          "property"
        ],
        [
          "medicine",
          "queryable"
        ],
        [
          "medicine",
          "takeable"
        ],
        [
          "medicine",
          "theAble"
        ],
        [
          "mine",
          "explosive"
        ],
        [
          "mine",
          "hierarchyAble"
        ],
        [
          "mine",
          "isEdee"
        ],
        [
          "mine",
          "isEder"
        ],
        [
          "mine",
          "object"
        ],
        [
          "mine",
          "property"
        ],
        [
          "mine",
          "queryable"
        ],
        [
          "mine",
          "theAble"
        ],
        [
          "mine",
          "weapon"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "number",
          "quantifier"
        ],
        [
          "number",
          "queryable"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "orAble",
          "ifAble"
        ],
        [
          "pistol",
          "firearm"
        ],
        [
          "pistol",
          "hierarchyAble"
        ],
        [
          "pistol",
          "isEdee"
        ],
        [
          "pistol",
          "isEder"
        ],
        [
          "pistol",
          "object"
        ],
        [
          "pistol",
          "property"
        ],
        [
          "pistol",
          "queryable"
        ],
        [
          "pistol",
          "theAble"
        ],
        [
          "pistol",
          "weapon"
        ],
        [
          "pop",
          "drink"
        ],
        [
          "pop",
          "hierarchyAble"
        ],
        [
          "pop",
          "isEdee"
        ],
        [
          "pop",
          "isEder"
        ],
        [
          "pop",
          "object"
        ],
        [
          "pop",
          "property"
        ],
        [
          "pop",
          "queryable"
        ],
        [
          "pop",
          "theAble"
        ],
        [
          "pronoun",
          "pronoun"
        ],
        [
          "property",
          "concept"
        ],
        [
          "property",
          "hierarchyAble"
        ],
        [
          "property",
          "isEdee"
        ],
        [
          "property",
          "isEder"
        ],
        [
          "property",
          "object"
        ],
        [
          "property",
          "property"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "quantifier",
          "quantifier"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "questionMark",
          "isEd"
        ],
        [
          "readonly",
          "queryable"
        ],
        [
          "rifle",
          "firearm"
        ],
        [
          "rifle",
          "hierarchyAble"
        ],
        [
          "rifle",
          "isEdee"
        ],
        [
          "rifle",
          "isEder"
        ],
        [
          "rifle",
          "object"
        ],
        [
          "rifle",
          "property"
        ],
        [
          "rifle",
          "queryable"
        ],
        [
          "rifle",
          "theAble"
        ],
        [
          "rifle",
          "weapon"
        ],
        [
          "shotgun",
          "firearm"
        ],
        [
          "shotgun",
          "hierarchyAble"
        ],
        [
          "shotgun",
          "isEdee"
        ],
        [
          "shotgun",
          "isEder"
        ],
        [
          "shotgun",
          "object"
        ],
        [
          "shotgun",
          "property"
        ],
        [
          "shotgun",
          "queryable"
        ],
        [
          "shotgun",
          "theAble"
        ],
        [
          "shotgun",
          "weapon"
        ],
        [
          "stimpak",
          "hierarchyAble"
        ],
        [
          "stimpak",
          "isEdee"
        ],
        [
          "stimpak",
          "isEder"
        ],
        [
          "stimpak",
          "object"
        ],
        [
          "stimpak",
          "property"
        ],
        [
          "stimpak",
          "queryable"
        ],
        [
          "stimpak",
          "takeable"
        ],
        [
          "stimpak",
          "theAble"
        ],
        [
          "suit",
          "clothe"
        ],
        [
          "suit",
          "hierarchyAble"
        ],
        [
          "suit",
          "isEdee"
        ],
        [
          "suit",
          "isEder"
        ],
        [
          "suit",
          "object"
        ],
        [
          "suit",
          "property"
        ],
        [
          "suit",
          "queryable"
        ],
        [
          "suit",
          "theAble"
        ],
        [
          "takeable",
          "hierarchyAble"
        ],
        [
          "takeable",
          "isEdee"
        ],
        [
          "takeable",
          "isEder"
        ],
        [
          "takeable",
          "object"
        ],
        [
          "takeable",
          "property"
        ],
        [
          "takeable",
          "queryable"
        ],
        [
          "takeable",
          "theAble"
        ],
        [
          "that",
          "thisitthat"
        ],
        [
          "the",
          "articlePOS"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "this",
          "pronoun"
        ],
        [
          "this",
          "queryable"
        ],
        [
          "this",
          "thisitthat"
        ],
        [
          "thisitthat",
          "queryable"
        ],
        [
          "toAble",
          "toAble"
        ],
        [
          "type",
          "property"
        ],
        [
          "type",
          "whatAble"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "unknown",
          "object"
        ],
        [
          "unknown",
          "queryable"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "vegetable",
          "food"
        ],
        [
          "vegetable",
          "hierarchyAble"
        ],
        [
          "vegetable",
          "isEdee"
        ],
        [
          "vegetable",
          "isEder"
        ],
        [
          "vegetable",
          "object"
        ],
        [
          "vegetable",
          "property"
        ],
        [
          "vegetable",
          "queryable"
        ],
        [
          "vegetable",
          "theAble"
        ],
        [
          "weapon",
          "equipable"
        ],
        [
          "weapon",
          "hierarchyAble"
        ],
        [
          "weapon",
          "isEdee"
        ],
        [
          "weapon",
          "isEder"
        ],
        [
          "weapon",
          "object"
        ],
        [
          "weapon",
          "property"
        ],
        [
          "weapon",
          "queryable"
        ],
        [
          "weapon",
          "theAble"
        ],
        [
          "wearable",
          "hierarchyAble"
        ],
        [
          "wearable",
          "isEdee"
        ],
        [
          "wearable",
          "isEder"
        ],
        [
          "wearable",
          "object"
        ],
        [
          "wearable",
          "property"
        ],
        [
          "wearable",
          "queryable"
        ],
        [
          "wearable",
          "theAble"
        ],
        [
          "what",
          "object"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "whatAble",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "xfx",
          "queryable"
        ]
      ],
      "logs": [
        "Undefined word 'damage'",
        "Undefined word 'luck'",
        "Undefined word 'hp'",
        "Undefined word 'rads'",
        "Undefined word 'value'",
        "Undefined word 'ap'",
        "Undefined word 'charisma'",
        "Undefined word 'range'",
        "Undefined word 'accuracy'",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: damage, value: damage, word: damage})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 7, 'end': 10}, text: luck, value: luck, word: luck})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 13}, text: hp, value: hp, word: hp})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 18}, text: rads, value: rads, word: rads})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 20, 'end': 24}, text: value, value: value, word: value})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 27}, text: ap, value: ap, word: ap})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 36}, text: charisma, value: charisma, word: charisma})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 38, 'end': 42}, text: range, value: range, word: range})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/0, PASS, None, evaluator(Bridge('{ ...next(operator), value: append(before, after) }')), variables({}) bridge(bridge)), range: {'start': 44, 'end': 46}, text: and, word: and})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 48, 'end': 55}, text: accuracy, value: accuracy, word: accuracy})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 57, 'end': 59}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(item/0, PASS, None, evaluator(Bridge('{ ...after, item: operator, marker: operator(concat('item_', after.value)), atomic: true, value: concat('item_', after.value), modifiers: append(['item'], after[0].modifiers)}')), variables({}) bridge(bridge)), range: {'start': 61, 'end': 64}, text: item, value: item, word: item})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(property/0, None, evaluator(Bridge('{ ...next(operator), value: 'property' }')), variables({}) bridge(bridge)), number: many, range: {'start': 66, 'end': 75}, text: properties, value: property, word: properties})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: damage, value: damage, word: damage})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 7, 'end': 10}, text: luck, value: luck, word: luck})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 13}, text: hp, value: hp, word: hp})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 18}, text: rads, value: rads, word: rads})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 20, 'end': 24}, text: value, value: value, word: value})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 27}, text: ap, value: ap, word: ap})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 36}, text: charisma, value: charisma, word: charisma})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 38, 'end': 42}, text: range, value: range, word: range})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/0, PASS, None, evaluator(Bridge('{ ...next(operator), value: append(before, after) }')), variables({}) bridge(bridge)), range: {'start': 44, 'end': 46}, text: and, word: and})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 48, 'end': 55}, text: accuracy, value: accuracy, word: accuracy})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 57, 'end': 59}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(item/0, PASS, None, evaluator(Bridge('{ ...after, item: operator, marker: operator(concat('item_', after.value)), atomic: true, value: concat('item_', after.value), modifiers: append(['item'], after[0].modifiers)}')), variables({}) bridge(bridge)), range: {'start': 61, 'end': 64}, text: item, value: item, word: item})\n\n\n",
        "Applying implicit. Counter 1\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(property/0, None, evaluator(Bridge('{ ...next(operator), value: 'property' }')), variables({}) bridge(bridge)), number: many, range: {'start': 66, 'end': 75}, text: properties, value: property, word: properties})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: damage, value: damage, word: damage})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 7, 'end': 10}, text: luck, value: luck, word: luck})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 13}, text: hp, value: hp, word: hp})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 18}, text: rads, value: rads, word: rads})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 20, 'end': 24}, text: value, value: value, word: value})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 27}, text: ap, value: ap, word: ap})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 36}, text: charisma, value: charisma, word: charisma})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 38, 'end': 55}, text: range and accuracy, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 38, 'end': 42}, text: range, value: range, word: range}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 48, 'end': 55}, text: accuracy, value: accuracy, word: accuracy})], word: and})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 57, 'end': 59}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(item/0, PASS, None, evaluator(Bridge('{ ...after, item: operator, marker: operator(concat('item_', after.value)), atomic: true, value: concat('item_', after.value), modifiers: append(['item'], after[0].modifiers)}')), variables({}) bridge(bridge)), range: {'start': 61, 'end': 64}, text: item, value: item, word: item})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(property/0, None, evaluator(Bridge('{ ...next(operator), value: 'property' }')), variables({}) bridge(bridge)), number: many, range: {'start': 66, 'end': 75}, text: properties, value: property, word: properties})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: damage, value: damage, word: damage})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 7, 'end': 10}, text: luck, value: luck, word: luck})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 13}, text: hp, value: hp, word: hp})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 18}, text: rads, value: rads, word: rads})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 20, 'end': 24}, text: value, value: value, word: value})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 27}, text: ap, value: ap, word: ap})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 36}, text: charisma, value: charisma, word: charisma})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 38, 'end': 55}, text: range and accuracy, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 38, 'end': 42}, text: range, value: range, word: range}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 48, 'end': 55}, text: accuracy, value: accuracy, word: accuracy})], word: and})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 57, 'end': 59}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(item/0, PASS, None, evaluator(Bridge('{ ...after, item: operator, marker: operator(concat('item_', after.value)), atomic: true, value: concat('item_', after.value), modifiers: append(['item'], after[0].modifiers)}')), variables({}) bridge(bridge)), range: {'start': 61, 'end': 64}, text: item, value: item, word: item})\n\n\n",
        "Applying implicit. Counter 2\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(property/0, None, evaluator(Bridge('{ ...next(operator), value: 'property' }')), variables({}) bridge(bridge)), number: many, range: {'start': 66, 'end': 75}, text: properties, value: property, word: properties})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: damage, value: damage, word: damage})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 7, 'end': 10}, text: luck, value: luck, word: luck})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 13}, text: hp, value: hp, word: hp})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 18}, text: rads, value: rads, word: rads})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 20, 'end': 24}, text: value, value: value, word: value})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 27}, text: ap, value: ap, word: ap})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 29, 'end': 55}, text: charisma range and accuracy, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 36}, text: charisma, value: charisma, word: charisma}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 38, 'end': 42}, text: range, value: range, word: range}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 48, 'end': 55}, text: accuracy, value: accuracy, word: accuracy})], word: and})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 57, 'end': 59}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(item/0, PASS, None, evaluator(Bridge('{ ...after, item: operator, marker: operator(concat('item_', after.value)), atomic: true, value: concat('item_', after.value), modifiers: append(['item'], after[0].modifiers)}')), variables({}) bridge(bridge)), range: {'start': 61, 'end': 64}, text: item, value: item, word: item})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(property/0, None, evaluator(Bridge('{ ...next(operator), value: 'property' }')), variables({}) bridge(bridge)), number: many, range: {'start': 66, 'end': 75}, text: properties, value: property, word: properties})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: damage, value: damage, word: damage})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 7, 'end': 10}, text: luck, value: luck, word: luck})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 13}, text: hp, value: hp, word: hp})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 18}, text: rads, value: rads, word: rads})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 20, 'end': 24}, text: value, value: value, word: value})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 27}, text: ap, value: ap, word: ap})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 29, 'end': 55}, text: charisma range and accuracy, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 36}, text: charisma, value: charisma, word: charisma}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 38, 'end': 42}, text: range, value: range, word: range}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 48, 'end': 55}, text: accuracy, value: accuracy, word: accuracy})], word: and})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 57, 'end': 59}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(item/0, PASS, None, evaluator(Bridge('{ ...after, item: operator, marker: operator(concat('item_', after.value)), atomic: true, value: concat('item_', after.value), modifiers: append(['item'], after[0].modifiers)}')), variables({}) bridge(bridge)), range: {'start': 61, 'end': 64}, text: item, value: item, word: item})\n\n\n",
        "Applying implicit. Counter 3\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(property/0, None, evaluator(Bridge('{ ...next(operator), value: 'property' }')), variables({}) bridge(bridge)), number: many, range: {'start': 66, 'end': 75}, text: properties, value: property, word: properties})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: damage, value: damage, word: damage})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 7, 'end': 10}, text: luck, value: luck, word: luck})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 13}, text: hp, value: hp, word: hp})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 18}, text: rads, value: rads, word: rads})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 20, 'end': 24}, text: value, value: value, word: value})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 26, 'end': 55}, text: ap charisma range and accuracy, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 27}, text: ap, value: ap, word: ap}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 36}, text: charisma, value: charisma, word: charisma}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 38, 'end': 42}, text: range, value: range, word: range}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 48, 'end': 55}, text: accuracy, value: accuracy, word: accuracy})], word: and})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 57, 'end': 59}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(item/0, PASS, None, evaluator(Bridge('{ ...after, item: operator, marker: operator(concat('item_', after.value)), atomic: true, value: concat('item_', after.value), modifiers: append(['item'], after[0].modifiers)}')), variables({}) bridge(bridge)), range: {'start': 61, 'end': 64}, text: item, value: item, word: item})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(property/0, None, evaluator(Bridge('{ ...next(operator), value: 'property' }')), variables({}) bridge(bridge)), number: many, range: {'start': 66, 'end': 75}, text: properties, value: property, word: properties})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: damage, value: damage, word: damage})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 7, 'end': 10}, text: luck, value: luck, word: luck})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 13}, text: hp, value: hp, word: hp})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 18}, text: rads, value: rads, word: rads})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 20, 'end': 24}, text: value, value: value, word: value})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 26, 'end': 55}, text: ap charisma range and accuracy, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 27}, text: ap, value: ap, word: ap}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 36}, text: charisma, value: charisma, word: charisma}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 38, 'end': 42}, text: range, value: range, word: range}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 48, 'end': 55}, text: accuracy, value: accuracy, word: accuracy})], word: and})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 57, 'end': 59}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(item/0, PASS, None, evaluator(Bridge('{ ...after, item: operator, marker: operator(concat('item_', after.value)), atomic: true, value: concat('item_', after.value), modifiers: append(['item'], after[0].modifiers)}')), variables({}) bridge(bridge)), range: {'start': 61, 'end': 64}, text: item, value: item, word: item})\n\n\n",
        "Applying implicit. Counter 4\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(property/0, None, evaluator(Bridge('{ ...next(operator), value: 'property' }')), variables({}) bridge(bridge)), number: many, range: {'start': 66, 'end': 75}, text: properties, value: property, word: properties})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: damage, value: damage, word: damage})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 7, 'end': 10}, text: luck, value: luck, word: luck})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 13}, text: hp, value: hp, word: hp})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 18}, text: rads, value: rads, word: rads})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 20, 'end': 55}, text: value ap charisma range and accuracy, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 20, 'end': 24}, text: value, value: value, word: value}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 27}, text: ap, value: ap, word: ap}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 36}, text: charisma, value: charisma, word: charisma}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 38, 'end': 42}, text: range, value: range, word: range}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 48, 'end': 55}, text: accuracy, value: accuracy, word: accuracy})], word: and})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 57, 'end': 59}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(item/0, PASS, None, evaluator(Bridge('{ ...after, item: operator, marker: operator(concat('item_', after.value)), atomic: true, value: concat('item_', after.value), modifiers: append(['item'], after[0].modifiers)}')), variables({}) bridge(bridge)), range: {'start': 61, 'end': 64}, text: item, value: item, word: item})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(property/0, None, evaluator(Bridge('{ ...next(operator), value: 'property' }')), variables({}) bridge(bridge)), number: many, range: {'start': 66, 'end': 75}, text: properties, value: property, word: properties})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: damage, value: damage, word: damage})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 7, 'end': 10}, text: luck, value: luck, word: luck})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 13}, text: hp, value: hp, word: hp})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 18}, text: rads, value: rads, word: rads})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 20, 'end': 55}, text: value ap charisma range and accuracy, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 20, 'end': 24}, text: value, value: value, word: value}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 27}, text: ap, value: ap, word: ap}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 36}, text: charisma, value: charisma, word: charisma}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 38, 'end': 42}, text: range, value: range, word: range}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 48, 'end': 55}, text: accuracy, value: accuracy, word: accuracy})], word: and})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 57, 'end': 59}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(item/0, PASS, None, evaluator(Bridge('{ ...after, item: operator, marker: operator(concat('item_', after.value)), atomic: true, value: concat('item_', after.value), modifiers: append(['item'], after[0].modifiers)}')), variables({}) bridge(bridge)), range: {'start': 61, 'end': 64}, text: item, value: item, word: item})\n\n\n",
        "Applying implicit. Counter 5\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(property/0, None, evaluator(Bridge('{ ...next(operator), value: 'property' }')), variables({}) bridge(bridge)), number: many, range: {'start': 66, 'end': 75}, text: properties, value: property, word: properties})\n\n\n",
        "Applying implicit. Counter 6\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: damage, value: damage, word: damage})\n\n\n",
        "Applying implicit. Counter 6\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 7, 'end': 10}, text: luck, value: luck, word: luck})\n\n\n",
        "Applying implicit. Counter 6\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 13}, text: hp, value: hp, word: hp})\n\n\n",
        "Applying implicit. Counter 6\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 15, 'end': 55}, text: rads value ap charisma range and accuracy, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 18}, text: rads, value: rads, word: rads}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 20, 'end': 24}, text: value, value: value, word: value}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 27}, text: ap, value: ap, word: ap}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 36}, text: charisma, value: charisma, word: charisma}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 38, 'end': 42}, text: range, value: range, word: range}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 48, 'end': 55}, text: accuracy, value: accuracy, word: accuracy})], word: and})\n\n\n",
        "Applying implicit. Counter 6\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 57, 'end': 59}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 6\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(item/0, PASS, None, evaluator(Bridge('{ ...after, item: operator, marker: operator(concat('item_', after.value)), atomic: true, value: concat('item_', after.value), modifiers: append(['item'], after[0].modifiers)}')), variables({}) bridge(bridge)), range: {'start': 61, 'end': 64}, text: item, value: item, word: item})\n\n\n",
        "Applying implicit. Counter 6\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(property/0, None, evaluator(Bridge('{ ...next(operator), value: 'property' }')), variables({}) bridge(bridge)), number: many, range: {'start': 66, 'end': 75}, text: properties, value: property, word: properties})\n\n\n",
        "Applying implicit. Counter 6\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: damage, value: damage, word: damage})\n\n\n",
        "Applying implicit. Counter 6\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 7, 'end': 10}, text: luck, value: luck, word: luck})\n\n\n",
        "Applying implicit. Counter 6\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 13}, text: hp, value: hp, word: hp})\n\n\n",
        "Applying implicit. Counter 6\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 15, 'end': 55}, text: rads value ap charisma range and accuracy, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 18}, text: rads, value: rads, word: rads}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 20, 'end': 24}, text: value, value: value, word: value}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 27}, text: ap, value: ap, word: ap}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 36}, text: charisma, value: charisma, word: charisma}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 38, 'end': 42}, text: range, value: range, word: range}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 48, 'end': 55}, text: accuracy, value: accuracy, word: accuracy})], word: and})\n\n\n",
        "Applying implicit. Counter 6\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 57, 'end': 59}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 6\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(item/0, PASS, None, evaluator(Bridge('{ ...after, item: operator, marker: operator(concat('item_', after.value)), atomic: true, value: concat('item_', after.value), modifiers: append(['item'], after[0].modifiers)}')), variables({}) bridge(bridge)), range: {'start': 61, 'end': 64}, text: item, value: item, word: item})\n\n\n",
        "Applying implicit. Counter 6\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(property/0, None, evaluator(Bridge('{ ...next(operator), value: 'property' }')), variables({}) bridge(bridge)), number: many, range: {'start': 66, 'end': 75}, text: properties, value: property, word: properties})\n\n\n",
        "Applying implicit. Counter 7\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: damage, value: damage, word: damage})\n\n\n",
        "Applying implicit. Counter 7\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 7, 'end': 10}, text: luck, value: luck, word: luck})\n\n\n",
        "Applying implicit. Counter 7\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 12, 'end': 55}, text: hp rads value ap charisma range and accuracy, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 13}, text: hp, value: hp, word: hp}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 18}, text: rads, value: rads, word: rads}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 20, 'end': 24}, text: value, value: value, word: value}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 27}, text: ap, value: ap, word: ap}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 36}, text: charisma, value: charisma, word: charisma}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 38, 'end': 42}, text: range, value: range, word: range}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 48, 'end': 55}, text: accuracy, value: accuracy, word: accuracy})], word: and})\n\n\n",
        "Applying implicit. Counter 7\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 57, 'end': 59}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 7\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(item/0, PASS, None, evaluator(Bridge('{ ...after, item: operator, marker: operator(concat('item_', after.value)), atomic: true, value: concat('item_', after.value), modifiers: append(['item'], after[0].modifiers)}')), variables({}) bridge(bridge)), range: {'start': 61, 'end': 64}, text: item, value: item, word: item})\n\n\n",
        "Applying implicit. Counter 7\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(property/0, None, evaluator(Bridge('{ ...next(operator), value: 'property' }')), variables({}) bridge(bridge)), number: many, range: {'start': 66, 'end': 75}, text: properties, value: property, word: properties})\n\n\n",
        "Applying implicit. Counter 7\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: damage, value: damage, word: damage})\n\n\n",
        "Applying implicit. Counter 7\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 7, 'end': 10}, text: luck, value: luck, word: luck})\n\n\n",
        "Applying implicit. Counter 7\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 12, 'end': 55}, text: hp rads value ap charisma range and accuracy, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 13}, text: hp, value: hp, word: hp}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 18}, text: rads, value: rads, word: rads}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 20, 'end': 24}, text: value, value: value, word: value}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 27}, text: ap, value: ap, word: ap}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 36}, text: charisma, value: charisma, word: charisma}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 38, 'end': 42}, text: range, value: range, word: range}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 48, 'end': 55}, text: accuracy, value: accuracy, word: accuracy})], word: and})\n\n\n",
        "Applying implicit. Counter 7\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 57, 'end': 59}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 7\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(item/0, PASS, None, evaluator(Bridge('{ ...after, item: operator, marker: operator(concat('item_', after.value)), atomic: true, value: concat('item_', after.value), modifiers: append(['item'], after[0].modifiers)}')), variables({}) bridge(bridge)), range: {'start': 61, 'end': 64}, text: item, value: item, word: item})\n\n\n",
        "Applying implicit. Counter 7\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(property/0, None, evaluator(Bridge('{ ...next(operator), value: 'property' }')), variables({}) bridge(bridge)), number: many, range: {'start': 66, 'end': 75}, text: properties, value: property, word: properties})\n\n\n",
        "Applying implicit. Counter 8\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: damage, value: damage, word: damage})\n\n\n",
        "Applying implicit. Counter 8\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 7, 'end': 55}, text: luck hp rads value ap charisma range and accuracy, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 7, 'end': 10}, text: luck, value: luck, word: luck}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 13}, text: hp, value: hp, word: hp}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 18}, text: rads, value: rads, word: rads}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 20, 'end': 24}, text: value, value: value, word: value}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 27}, text: ap, value: ap, word: ap}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 36}, text: charisma, value: charisma, word: charisma}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 38, 'end': 42}, text: range, value: range, word: range}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 48, 'end': 55}, text: accuracy, value: accuracy, word: accuracy})], word: and})\n\n\n",
        "Applying implicit. Counter 8\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 57, 'end': 59}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 8\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(item/0, PASS, None, evaluator(Bridge('{ ...after, item: operator, marker: operator(concat('item_', after.value)), atomic: true, value: concat('item_', after.value), modifiers: append(['item'], after[0].modifiers)}')), variables({}) bridge(bridge)), range: {'start': 61, 'end': 64}, text: item, value: item, word: item})\n\n\n",
        "Applying implicit. Counter 8\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(property/0, None, evaluator(Bridge('{ ...next(operator), value: 'property' }')), variables({}) bridge(bridge)), number: many, range: {'start': 66, 'end': 75}, text: properties, value: property, word: properties})\n\n\n",
        "Applying implicit. Counter 8\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: damage, value: damage, word: damage})\n\n\n",
        "Applying implicit. Counter 8\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 7, 'end': 55}, text: luck hp rads value ap charisma range and accuracy, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 7, 'end': 10}, text: luck, value: luck, word: luck}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 13}, text: hp, value: hp, word: hp}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 18}, text: rads, value: rads, word: rads}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 20, 'end': 24}, text: value, value: value, word: value}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 27}, text: ap, value: ap, word: ap}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 36}, text: charisma, value: charisma, word: charisma}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 38, 'end': 42}, text: range, value: range, word: range}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 48, 'end': 55}, text: accuracy, value: accuracy, word: accuracy})], word: and})\n\n\n",
        "Applying implicit. Counter 8\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 57, 'end': 59}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 8\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(item/0, PASS, None, evaluator(Bridge('{ ...after, item: operator, marker: operator(concat('item_', after.value)), atomic: true, value: concat('item_', after.value), modifiers: append(['item'], after[0].modifiers)}')), variables({}) bridge(bridge)), range: {'start': 61, 'end': 64}, text: item, value: item, word: item})\n\n\n",
        "Applying implicit. Counter 8\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(property/0, None, evaluator(Bridge('{ ...next(operator), value: 'property' }')), variables({}) bridge(bridge)), number: many, range: {'start': 66, 'end': 75}, text: properties, value: property, word: properties})\n\n\n",
        "Applying implicit. Counter 9\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 55}, text: damage luck hp rads value ap charisma range and accuracy, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: damage, value: damage, word: damage}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 7, 'end': 10}, text: luck, value: luck, word: luck}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 13}, text: hp, value: hp, word: hp}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 18}, text: rads, value: rads, word: rads}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 20, 'end': 24}, text: value, value: value, word: value}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 27}, text: ap, value: ap, word: ap}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 36}, text: charisma, value: charisma, word: charisma}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 38, 'end': 42}, text: range, value: range, word: range}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 48, 'end': 55}, text: accuracy, value: accuracy, word: accuracy})], word: and})\n\n\n",
        "Applying implicit. Counter 9\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 57, 'end': 59}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 9\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(item/0, PASS, None, evaluator(Bridge('{ ...after, item: operator, marker: operator(concat('item_', after.value)), atomic: true, value: concat('item_', after.value), modifiers: append(['item'], after[0].modifiers)}')), variables({}) bridge(bridge)), range: {'start': 61, 'end': 64}, text: item, value: item, word: item})\n\n\n",
        "Applying implicit. Counter 9\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(property/0, None, evaluator(Bridge('{ ...next(operator), value: 'property' }')), variables({}) bridge(bridge)), number: many, range: {'start': 66, 'end': 75}, text: properties, value: property, word: properties})\n\n\n",
        "Applying implicit. Counter 9\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({default: True, marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 55}, text: damage luck hp rads value ap charisma range and accuracy, types: [], value: [Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: damage, value: damage, word: damage}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 7, 'end': 10}, text: luck, value: luck, word: luck}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 13}, text: hp, value: hp, word: hp}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 18}, text: rads, value: rads, word: rads}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 20, 'end': 24}, text: value, value: value, word: value}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 27}, text: ap, value: ap, word: ap}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 36}, text: charisma, value: charisma, word: charisma}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 38, 'end': 42}, text: range, value: range, word: range}), Context({marker: Operator(unknown/0, None, evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}) bridge(bridge)), range: {'start': 48, 'end': 55}, text: accuracy, value: accuracy, word: accuracy})], word: and})\n\n\n",
        "Applying implicit. Counter 9\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 57, 'end': 59}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 9\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(item/0, PASS, None, evaluator(Bridge('{ ...after, item: operator, marker: operator(concat('item_', after.value)), atomic: true, value: concat('item_', after.value), modifiers: append(['item'], after[0].modifiers)}')), variables({}) bridge(bridge)), range: {'start': 61, 'end': 64}, text: item, value: item, word: item})\n\n\n",
        "Applying implicit. Counter 9\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(property/0, None, evaluator(Bridge('{ ...next(operator), value: 'property' }')), variables({}) bridge(bridge)), number: many, range: {'start': 66, 'end': 75}, text: properties, value: property, word: properties})\n\n\n",
        "Counter == 9. Applying Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)) failed due to the matchers [Type(variable: 'type')] not being present",
        "Applying implicit. Counter 10\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 55}, value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: damage, unknown: True, value: damage, word: damage}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 7, 'end': 10}, text: luck, unknown: True, value: luck, word: luck}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 13}, text: hp, unknown: True, value: hp, word: hp}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 18}, text: rads, unknown: True, value: rads, word: rads}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 20, 'end': 24}, text: value, unknown: True, value: value, word: value}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 27}, text: ap, unknown: True, value: ap, word: ap}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 36}, text: charisma, unknown: True, value: charisma, word: charisma}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 38, 'end': 42}, text: range, unknown: True, value: range, word: range}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 48, 'end': 55}, text: accuracy, unknown: True, value: accuracy, word: accuracy})]})\n\n\n",
        "Applying implicit. Counter 10\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 57, 'end': 59}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 10\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(item/0, PASS, None, evaluator(Bridge('{ ...after, item: operator, marker: operator(concat('item_', after.value)), atomic: true, value: concat('item_', after.value), modifiers: append(['item'], after[0].modifiers)}')), variables({}) bridge(bridge)), range: {'start': 61, 'end': 64}, text: item, value: item, word: item})\n\n\n",
        "Applying implicit. Counter 10\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(property/0, None, evaluator(Bridge('{ ...next(operator), value: 'property' }')), variables({}) bridge(bridge)), number: many, range: {'start': 66, 'end': 75}, text: properties, value: property, word: properties})\n\n\n",
        "Applying implicit. Counter 10\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 55}, value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: damage, unknown: True, value: damage, word: damage}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 7, 'end': 10}, text: luck, unknown: True, value: luck, word: luck}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 13}, text: hp, unknown: True, value: hp, word: hp}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 18}, text: rads, unknown: True, value: rads, word: rads}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 20, 'end': 24}, text: value, unknown: True, value: value, word: value}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 27}, text: ap, unknown: True, value: ap, word: ap}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 36}, text: charisma, unknown: True, value: charisma, word: charisma}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 38, 'end': 42}, text: range, unknown: True, value: range, word: range}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 48, 'end': 55}, text: accuracy, unknown: True, value: accuracy, word: accuracy})]})\n\n\n",
        "Applying implicit. Counter 10\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 57, 'end': 59}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 10\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(item/0, PASS, None, evaluator(Bridge('{ ...after, item: operator, marker: operator(concat('item_', after.value)), atomic: true, value: concat('item_', after.value), modifiers: append(['item'], after[0].modifiers)}')), variables({}) bridge(bridge)), range: {'start': 61, 'end': 64}, text: item, value: item, word: item})\n\n\n",
        "Applying implicit. Counter 10\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(property/0, None, evaluator(Bridge('{ ...next(operator), value: 'property' }')), variables({}) bridge(bridge)), number: many, range: {'start': 66, 'end': 75}, text: properties, value: property, word: properties})\n\n\n",
        "Counter == 10. Applying Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)) failed due to the matchers [Type(variable: 'type')] not being present",
        "Applying implicit. Counter 11\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 55}, value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: damage, unknown: True, value: damage, word: damage}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 7, 'end': 10}, text: luck, unknown: True, value: luck, word: luck}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 13}, text: hp, unknown: True, value: hp, word: hp}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 18}, text: rads, unknown: True, value: rads, word: rads}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 20, 'end': 24}, text: value, unknown: True, value: value, word: value}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 27}, text: ap, unknown: True, value: ap, word: ap}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 36}, text: charisma, unknown: True, value: charisma, word: charisma}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 38, 'end': 42}, text: range, unknown: True, value: range, word: range}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 48, 'end': 55}, text: accuracy, unknown: True, value: accuracy, word: accuracy})]})\n\n\n",
        "Applying implicit. Counter 11\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 57, 'end': 59}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 11\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(item/0, PASS, None, evaluator(Bridge('{ ...after, item: operator, marker: operator(concat('item_', after.value)), atomic: true, value: concat('item_', after.value), modifiers: append(['item'], after[0].modifiers)}')), variables({}) bridge(bridge)), range: {'start': 61, 'end': 64}, text: item, value: item, word: item})\n\n\n",
        "Applying implicit. Counter 11\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(property/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 66, 'end': 75}, text: properties, value: property, word: properties})\n\n\n",
        "Applying implicit. Counter 11\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 55}, value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: damage, unknown: True, value: damage, word: damage}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 7, 'end': 10}, text: luck, unknown: True, value: luck, word: luck}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 13}, text: hp, unknown: True, value: hp, word: hp}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 18}, text: rads, unknown: True, value: rads, word: rads}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 20, 'end': 24}, text: value, unknown: True, value: value, word: value}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 27}, text: ap, unknown: True, value: ap, word: ap}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 36}, text: charisma, unknown: True, value: charisma, word: charisma}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 38, 'end': 42}, text: range, unknown: True, value: range, word: range}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 48, 'end': 55}, text: accuracy, unknown: True, value: accuracy, word: accuracy})]})\n\n\n",
        "Applying implicit. Counter 11\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 57, 'end': 59}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 11\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(item/0, PASS, None, evaluator(Bridge('{ ...after, item: operator, marker: operator(concat('item_', after.value)), atomic: true, value: concat('item_', after.value), modifiers: append(['item'], after[0].modifiers)}')), variables({}) bridge(bridge)), range: {'start': 61, 'end': 64}, text: item, value: item, word: item})\n\n\n",
        "Applying implicit. Counter 11\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(property/1, None, evaluator(None), variables({}) bridge(bridge)), number: many, range: {'start': 66, 'end': 75}, text: properties, value: property, word: properties})\n\n\n",
        "Counter == 11. Applying Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)) failed due to the matchers [Type(variable: 'type')] not being present",
        "Applying implicit. Counter 12\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 55}, value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: damage, unknown: True, value: damage, word: damage}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 7, 'end': 10}, text: luck, unknown: True, value: luck, word: luck}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 13}, text: hp, unknown: True, value: hp, word: hp}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 18}, text: rads, unknown: True, value: rads, word: rads}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 20, 'end': 24}, text: value, unknown: True, value: value, word: value}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 27}, text: ap, unknown: True, value: ap, word: ap}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 36}, text: charisma, unknown: True, value: charisma, word: charisma}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 38, 'end': 42}, text: range, unknown: True, value: range, word: range}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 48, 'end': 55}, text: accuracy, unknown: True, value: accuracy, word: accuracy})]})\n\n\n",
        "Applying implicit. Counter 12\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 57, 'end': 59}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 12\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({atomic: True, item: Context({marker: Operator(item/0, PASS, None, evaluator(Bridge('{ ...after, item: operator, marker: operator(concat('item_', after.value)), atomic: true, value: concat('item_', after.value), modifiers: append(['item'], after[0].modifiers)}')), variables({}) bridge(bridge)), range: {'start': 61, 'end': 64}, text: item, value: item, word: item}), marker: Operator(item_property/0, None, evaluator(Bridge('{ ...next(operator), value: 'item_property' }')), variables({}) bridge(bridge)), modifiers: ['item'], number: many, range: {'start': 61, 'end': 75}, text: item properties, types: ['property'], value: item_property, word: properties})\n\n\n",
        "Applying implicit. Counter 12\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 55}, value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: damage, unknown: True, value: damage, word: damage}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 7, 'end': 10}, text: luck, unknown: True, value: luck, word: luck}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 13}, text: hp, unknown: True, value: hp, word: hp}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 18}, text: rads, unknown: True, value: rads, word: rads}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 20, 'end': 24}, text: value, unknown: True, value: value, word: value}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 27}, text: ap, unknown: True, value: ap, word: ap}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 36}, text: charisma, unknown: True, value: charisma, word: charisma}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 38, 'end': 42}, text: range, unknown: True, value: range, word: range}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 48, 'end': 55}, text: accuracy, unknown: True, value: accuracy, word: accuracy})]})\n\n\n",
        "Applying implicit. Counter 12\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 57, 'end': 59}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 12\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({atomic: True, item: Context({marker: Operator(item/0, PASS, None, evaluator(Bridge('{ ...after, item: operator, marker: operator(concat('item_', after.value)), atomic: true, value: concat('item_', after.value), modifiers: append(['item'], after[0].modifiers)}')), variables({}) bridge(bridge)), range: {'start': 61, 'end': 64}, text: item, value: item, word: item}), marker: Operator(item_property/0, None, evaluator(Bridge('{ ...next(operator), value: 'item_property' }')), variables({}) bridge(bridge)), modifiers: ['item'], number: many, range: {'start': 61, 'end': 75}, text: item properties, types: ['property'], value: item_property, word: properties})\n\n\n",
        "Counter == 12. Applying Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)) failed due to the matchers [Type(variable: 'type')] not being present",
        "Applying implicit. Counter 13\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 55}, value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: damage, unknown: True, value: damage, word: damage}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 7, 'end': 10}, text: luck, unknown: True, value: luck, word: luck}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 13}, text: hp, unknown: True, value: hp, word: hp}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 18}, text: rads, unknown: True, value: rads, word: rads}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 20, 'end': 24}, text: value, unknown: True, value: value, word: value}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 27}, text: ap, unknown: True, value: ap, word: ap}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 36}, text: charisma, unknown: True, value: charisma, word: charisma}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 38, 'end': 42}, text: range, unknown: True, value: range, word: range}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 48, 'end': 55}, text: accuracy, unknown: True, value: accuracy, word: accuracy})]})\n\n\n",
        "Applying implicit. Counter 13\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 57, 'end': 59}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 13\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({atomic: True, item: Context({marker: Operator(item/0, PASS, None, evaluator(Bridge('{ ...after, item: operator, marker: operator(concat('item_', after.value)), atomic: true, value: concat('item_', after.value), modifiers: append(['item'], after[0].modifiers)}')), variables({}) bridge(bridge)), range: {'start': 61, 'end': 64}, text: item, value: item, word: item}), marker: Operator(item_property/1, None, evaluator(None), variables({}) bridge(bridge)), modifiers: ['item'], number: many, range: {'start': 61, 'end': 75}, text: item properties, types: ['property'], value: item_property, word: properties})\n\n\n",
        "Applying implicit. Counter 13\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), range: {'start': 0, 'end': 55}, value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: damage, unknown: True, value: damage, word: damage}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 7, 'end': 10}, text: luck, unknown: True, value: luck, word: luck}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 13}, text: hp, unknown: True, value: hp, word: hp}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 18}, text: rads, unknown: True, value: rads, word: rads}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 20, 'end': 24}, text: value, unknown: True, value: value, word: value}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 27}, text: ap, unknown: True, value: ap, word: ap}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 36}, text: charisma, unknown: True, value: charisma, word: charisma}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 38, 'end': 42}, text: range, unknown: True, value: range, word: range}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 48, 'end': 55}, text: accuracy, unknown: True, value: accuracy, word: accuracy})]})\n\n\n",
        "Applying implicit. Counter 13\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/0, None, evaluator(Bridge('{ ...next(operator), one: { number: operator.number, ...before[0] }, two: after[0] }')), variables({}) bridge(bridge)), number: many, range: {'start': 57, 'end': 59}, text: are, word: are})\n\n\n",
        "Applying implicit. Counter 13\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({atomic: True, item: Context({marker: Operator(item/0, PASS, None, evaluator(Bridge('{ ...after, item: operator, marker: operator(concat('item_', after.value)), atomic: true, value: concat('item_', after.value), modifiers: append(['item'], after[0].modifiers)}')), variables({}) bridge(bridge)), range: {'start': 61, 'end': 64}, text: item, value: item, word: item}), marker: Operator(item_property/1, None, evaluator(None), variables({}) bridge(bridge)), modifiers: ['item'], number: many, range: {'start': 61, 'end': 75}, text: item properties, types: ['property'], value: item_property, word: properties})\n\n\n",
        "Counter == 13. Applying Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)) failed due to the matchers [Type(variable: 'type')] not being present",
        "Applying implicit. Counter 14\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 75}, types: ['unknown'], value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: damage, unknown: True, value: damage, word: damage}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 7, 'end': 10}, text: luck, unknown: True, value: luck, word: luck}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 13}, text: hp, unknown: True, value: hp, word: hp}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 18}, text: rads, unknown: True, value: rads, word: rads}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 20, 'end': 24}, text: value, unknown: True, value: value, word: value}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 27}, text: ap, unknown: True, value: ap, word: ap}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 36}, text: charisma, unknown: True, value: charisma, word: charisma}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 38, 'end': 42}, text: range, unknown: True, value: range, word: range}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 48, 'end': 55}, text: accuracy, unknown: True, value: accuracy, word: accuracy})]}), range: {'start': 0, 'end': 75}, text:  are item properties, two: Context({atomic: True, item: Context({marker: Operator(item/0, PASS, None, evaluator(Bridge('{ ...after, item: operator, marker: operator(concat('item_', after.value)), atomic: true, value: concat('item_', after.value), modifiers: append(['item'], after[0].modifiers)}')), variables({}) bridge(bridge)), range: {'start': 61, 'end': 64}, text: item, value: item, word: item}), marker: Operator(item_property/1, None, evaluator(None), variables({}) bridge(bridge)), modifiers: ['item'], number: many, range: {'start': 61, 'end': 75}, text: item properties, types: ['property', 'item_property'], value: item_property, word: properties}), word: are})\n\n\n",
        "Applying implicit. Counter 14\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 75}, types: ['unknown'], value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: damage, unknown: True, value: damage, word: damage}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 7, 'end': 10}, text: luck, unknown: True, value: luck, word: luck}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 13}, text: hp, unknown: True, value: hp, word: hp}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 18}, text: rads, unknown: True, value: rads, word: rads}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 20, 'end': 24}, text: value, unknown: True, value: value, word: value}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 27}, text: ap, unknown: True, value: ap, word: ap}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 36}, text: charisma, unknown: True, value: charisma, word: charisma}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 38, 'end': 42}, text: range, unknown: True, value: range, word: range}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 48, 'end': 55}, text: accuracy, unknown: True, value: accuracy, word: accuracy})]}), range: {'start': 0, 'end': 75}, text:  are item properties, two: Context({atomic: True, item: Context({marker: Operator(item/0, PASS, None, evaluator(Bridge('{ ...after, item: operator, marker: operator(concat('item_', after.value)), atomic: true, value: concat('item_', after.value), modifiers: append(['item'], after[0].modifiers)}')), variables({}) bridge(bridge)), range: {'start': 61, 'end': 64}, text: item, value: item, word: item}), marker: Operator(item_property/1, None, evaluator(None), variables({}) bridge(bridge)), modifiers: ['item'], number: many, range: {'start': 61, 'end': 75}, text: item properties, types: ['property', 'item_property'], value: item_property, word: properties}), word: are})\n\n\n",
        "Applying implicit. Counter 15\n\t\t\t\t\t\t\t\tOperator(counting/0, None, evaluator(Bridge('{ ...after, quantity: before[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('countable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/2, None, evaluator(None), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 75}, types: ['unknown'], value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: damage, unknown: True, value: damage, word: damage}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 7, 'end': 10}, text: luck, unknown: True, value: luck, word: luck}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 13}, text: hp, unknown: True, value: hp, word: hp}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 18}, text: rads, unknown: True, value: rads, word: rads}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 20, 'end': 24}, text: value, unknown: True, value: value, word: value}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 27}, text: ap, unknown: True, value: ap, word: ap}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 36}, text: charisma, unknown: True, value: charisma, word: charisma}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 38, 'end': 42}, text: range, unknown: True, value: range, word: range}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 48, 'end': 55}, text: accuracy, unknown: True, value: accuracy, word: accuracy})]}), range: {'start': 0, 'end': 75}, text:  are item properties, two: Context({atomic: True, item: Context({marker: Operator(item/0, PASS, None, evaluator(Bridge('{ ...after, item: operator, marker: operator(concat('item_', after.value)), atomic: true, value: concat('item_', after.value), modifiers: append(['item'], after[0].modifiers)}')), variables({}) bridge(bridge)), range: {'start': 61, 'end': 64}, text: item, value: item, word: item}), marker: Operator(item_property/1, None, evaluator(None), variables({}) bridge(bridge)), modifiers: ['item'], number: many, range: {'start': 61, 'end': 75}, text: item properties, types: ['property', 'item_property'], value: item_property, word: properties}), word: are})\n\n\n",
        "Applying implicit. Counter 15\n\t\t\t\t\t\t\t\tOperator(compare/0, PASS, None, evaluator(Bridge('{ ...next(before[0]), property: after, postModifiers: append([after[0].marker], before[0].modifiers), [after[0].marker.id]: after[0] }')), variables({}), implicit bridge(bridge))\n\t\t\t\tfailed due to the expected type\n\n\t\t\t\t\t\t\t\tType('comparable')\n\n\t\t\t\tnot matching the found type\n\n\t\t\t\t\t\t\t\tContext({marker: Operator(is/2, None, evaluator(None), variables({}) bridge(bridge)), number: many, one: Context({marker: Operator(list/1, PASS, None, evaluator(Bridge('{ ...operator, value: append(before, operator.value) }')), variables({'type': ['theAble', 'unknown', 'object', 'notAble', 'hierarchyAble', 'queryable']}) bridge(bridge)), number: many, range: {'start': 0, 'end': 75}, types: ['unknown'], value: [Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 0, 'end': 5}, text: damage, unknown: True, value: damage, word: damage}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 7, 'end': 10}, text: luck, unknown: True, value: luck, word: luck}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 12, 'end': 13}, text: hp, unknown: True, value: hp, word: hp}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 15, 'end': 18}, text: rads, unknown: True, value: rads, word: rads}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 20, 'end': 24}, text: value, unknown: True, value: value, word: value}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 26, 'end': 27}, text: ap, unknown: True, value: ap, word: ap}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 29, 'end': 36}, text: charisma, unknown: True, value: charisma, word: charisma}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 38, 'end': 42}, text: range, unknown: True, value: range, word: range}), Context({marker: Operator(unknown/1, None, evaluator(Bridge('{ ...next(operator) }')), variables({}) bridge(bridge)), range: {'start': 48, 'end': 55}, text: accuracy, unknown: True, value: accuracy, word: accuracy})]}), range: {'start': 0, 'end': 75}, text:  are item properties, two: Context({atomic: True, item: Context({marker: Operator(item/0, PASS, None, evaluator(Bridge('{ ...after, item: operator, marker: operator(concat('item_', after.value)), atomic: true, value: concat('item_', after.value), modifiers: append(['item'], after[0].modifiers)}')), variables({}) bridge(bridge)), range: {'start': 61, 'end': 64}, text: item, value: item, word: item}), marker: Operator(item_property/1, None, evaluator(None), variables({}) bridge(bridge)), modifiers: ['item'], number: many, range: {'start': 61, 'end': 75}, text: item properties, types: ['property', 'item_property'], value: item_property, word: properties}), word: are})\n\n\n",
        "Op choices were: [(('list', 0), [('is', 0), ('item', 0), ('property', 0), ('unknown', 0)], 1), (('list', 1), [('is', 0), ('item', 0), ('property', 0), ('unknown', 0)], 2), (('list', 1), [('is', 0), ('item', 0), ('property', 0), ('unknown', 0)], 3), (('list', 1), [('is', 0), ('item', 0), ('property', 0), ('unknown', 0)], 4), (('list', 1), [('is', 0), ('item', 0), ('property', 0), ('unknown', 0)], 5), (('list', 1), [('is', 0), ('item', 0), ('property', 0), ('unknown', 0)], 6), (('list', 1), [('is', 0), ('item', 0), ('property', 0), ('unknown', 0)], 7), (('list', 1), [('is', 0), ('item', 0), ('property', 0), ('unknown', 0)], 8), (('list', 1), [('is', 0), ('item', 0), ('property', 0), ('unknown', 0)], 9), (('list', 1), [('is', 0), ('item', 0), ('property', 0), ('unknown', 0)], 9), (('list', 1), [('is', 0), ('item', 0), ('property', 0), ('unknown', 1)], 10), (('property', 0), [('is', 0), ('item', 0), ('property', 0), ('unknown', 1)], 10), (('list', 1), [('is', 0), ('item', 0), ('unknown', 1)], 11), (('item', 0), [('is', 0), ('item', 0), ('unknown', 1)], 11), (('list', 1), [('is', 0), ('item_property', 0), ('unknown', 1)], 12), (('item_property', 0), [('is', 0), ('item_property', 0), ('unknown', 1)], 12), (('list', 1), [('is', 0), ('unknown', 1)], 13), (('is', 0), [('is', 0), ('unknown', 1)], 13), (('is', 1), [('is', 1)], 14)]",
        "Contexts used for choosing operators (if the wrong choices were made update the priorities array. Put the expected choice at the end of the list. you can check for loops in the priorities by adding the -cl flag and running a query): \n  Context for choosing the operator list/0 was [['is', 0], ['item', 0], ['property', 0], ['unknown', 0]]. Counter 1\n  Context for choosing the operator list/1 was [['is', 0], ['item', 0], ['property', 0], ['unknown', 0]]. Counter 2\n  Context for choosing the operator list/1 was [['is', 0], ['item', 0], ['property', 0], ['unknown', 0]]. Counter 3\n  Context for choosing the operator list/1 was [['is', 0], ['item', 0], ['property', 0], ['unknown', 0]]. Counter 4\n  Context for choosing the operator list/1 was [['is', 0], ['item', 0], ['property', 0], ['unknown', 0]]. Counter 5\n  Context for choosing the operator list/1 was [['is', 0], ['item', 0], ['property', 0], ['unknown', 0]]. Counter 6\n  Context for choosing the operator list/1 was [['is', 0], ['item', 0], ['property', 0], ['unknown', 0]]. Counter 7\n  Context for choosing the operator list/1 was [['is', 0], ['item', 0], ['property', 0], ['unknown', 0]]. Counter 8\n  Context for choosing the operator list/1 was [['is', 0], ['item', 0], ['property', 0], ['unknown', 0]]. Counter 9\n  Context for choosing the operator list/1 was [['is', 0], ['item', 0], ['property', 0], ['unknown', 0]]. Counter 9\n  Context for choosing the operator list/1 was [['is', 0], ['item', 0], ['property', 0], ['unknown', 1]]. Counter 10\n  Context for choosing the operator property/0 was [['is', 0], ['item', 0], ['property', 0], ['unknown', 1]]. Counter 10\n  Context for choosing the operator list/1 was [['is', 0], ['item', 0], ['unknown', 1]]. Counter 11\n  Context for choosing the operator item/0 was [['is', 0], ['item', 0], ['unknown', 1]]. Counter 11\n  Context for choosing the operator list/1 was [['is', 0], ['item_property', 0], ['unknown', 1]]. Counter 12\n  Context for choosing the operator item_property/0 was [['is', 0], ['item_property', 0], ['unknown', 1]]. Counter 12\n  Context for choosing the operator list/1 was [['is', 0], ['unknown', 1]]. Counter 13\n  Context for choosing the operator is/0 was [['is', 0], ['unknown', 1]]. Counter 13\n  Context for choosing the operator is/1 was [['is', 1]]. Counter 14",
        "Associations made with probabilities (each group is a choice point. if the wrong choices were made update the associations list): \n  Group 0\n    0.6666666666666666 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['item', 0]]\n      (('unknown', 0), ('isEd', 0))\n      (('isEd', 0), ('item', 0))\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['item', 0]]\n      (('unknown', 0), ('is', 0), ('item', 0))\n  Group 1\n    0.6666666666666666 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['item', 0]]\n      (('unknown', 0), ('isEd', 0))\n      (('isEd', 0), ('item', 0))\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['item', 0]]\n      (('unknown', 0), ('is', 0), ('item', 0))\n  Group 2\n    0.6666666666666666 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['item', 0]]\n      (('unknown', 0), ('isEd', 0))\n      (('isEd', 0), ('item', 0))\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['item', 0]]\n      (('unknown', 0), ('is', 0), ('item', 0))\n  Group 3\n    0.6666666666666666 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['item', 0]]\n      (('unknown', 0), ('isEd', 0))\n      (('isEd', 0), ('item', 0))\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['item', 0]]\n      (('unknown', 0), ('is', 0), ('item', 0))\n  Group 4\n    0.6666666666666666 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['item', 0]]\n      (('unknown', 0), ('isEd', 0))\n      (('isEd', 0), ('item', 0))\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['item', 0]]\n      (('unknown', 0), ('is', 0), ('item', 0))\n  Group 5\n    0.6666666666666666 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['item', 0]]\n      (('unknown', 0), ('isEd', 0))\n      (('isEd', 0), ('item', 0))\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['item', 0]]\n      (('unknown', 0), ('is', 0), ('item', 0))\n  Group 6\n    0.6666666666666666 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['item', 0]]\n      (('unknown', 0), ('isEd', 0))\n      (('isEd', 0), ('item', 0))\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['item', 0]]\n      (('unknown', 0), ('is', 0), ('item', 0))\n  Group 7\n    0.6666666666666666 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['item', 0]]\n      (('unknown', 0), ('isEd', 0))\n      (('isEd', 0), ('item', 0))\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['item', 0]]\n      (('unknown', 0), ('is', 0), ('item', 0))\n  Group 8\n    0.6666666666666666 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['item', 0]]\n      (('unknown', 1), ('isEd', 0))\n      (('isEd', 0), ('item', 0))\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['item', 0]]\n      (('unknown', 1), ('is', 0), ('item', 0))\n  Group 9\n    0.6666666666666666 - [['unknown', 0], \">>>>1 ['isEd', 0] <<<<1\", ['item', 0]]\n      (('unknown', 1), ('isEd', 0))\n      (('isEd', 0), ('item', 0))\n    1.0 - [['unknown', 0], \">>>>1 ['is', 0] <<<<1\", ['item', 0]]\n      (('unknown', 1), ('is', 0), ('item', 0))"
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "list",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "item",
                0
              ],
              [
                "property",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 1
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "item",
                0
              ],
              [
                "property",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 2
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "item",
                0
              ],
              [
                "property",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 3
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "item",
                0
              ],
              [
                "property",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 4
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "item",
                0
              ],
              [
                "property",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 5
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "item",
                0
              ],
              [
                "property",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 6
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "item",
                0
              ],
              [
                "property",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 7
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "item",
                0
              ],
              [
                "property",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 8
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "item",
                0
              ],
              [
                "property",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 9
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "item",
                0
              ],
              [
                "property",
                0
              ],
              [
                "unknown",
                0
              ]
            ],
            "counter": 9
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "item",
                0
              ],
              [
                "property",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 10
          },
          {
            "op": [
              "property",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "item",
                0
              ],
              [
                "property",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 10
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "item",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 11
          },
          {
            "op": [
              "item",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "item",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 11
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "item_property",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 12
          },
          {
            "op": [
              "item_property",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "item_property",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 12
          },
          {
            "op": [
              "list",
              1
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 13
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "is",
                0
              ],
              [
                "unknown",
                1
              ]
            ],
            "counter": 13
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "is",
                1
              ]
            ],
            "counter": 14
          }
        ]
      },
      "trace": "undefined",
      "contexts": [
        {
          "number": "many",
          "text": " are item properties",
          "marker": "is",
          "word": "are",
          "range": {
            "start": 0,
            "end": 75
          },
          "one": {
            "number": "many",
            "marker": "list",
            "value": [
              {
                "marker": "unknown",
                "range": {
                  "start": 0,
                  "end": 5
                },
                "word": "damage",
                "text": "damage",
                "value": "damage",
                "unknown": true
              },
              {
                "marker": "unknown",
                "range": {
                  "start": 7,
                  "end": 10
                },
                "word": "luck",
                "text": "luck",
                "value": "luck",
                "unknown": true
              },
              {
                "marker": "unknown",
                "range": {
                  "start": 12,
                  "end": 13
                },
                "word": "hp",
                "text": "hp",
                "value": "hp",
                "unknown": true
              },
              {
                "marker": "unknown",
                "range": {
                  "start": 15,
                  "end": 18
                },
                "word": "rads",
                "text": "rads",
                "value": "rads",
                "unknown": true
              },
              {
                "marker": "unknown",
                "range": {
                  "start": 20,
                  "end": 24
                },
                "word": "value",
                "text": "value",
                "value": "value",
                "unknown": true
              },
              {
                "marker": "unknown",
                "range": {
                  "start": 26,
                  "end": 27
                },
                "word": "ap",
                "text": "ap",
                "value": "ap",
                "unknown": true
              },
              {
                "marker": "unknown",
                "range": {
                  "start": 29,
                  "end": 36
                },
                "word": "charisma",
                "text": "charisma",
                "value": "charisma",
                "unknown": true
              },
              {
                "marker": "unknown",
                "range": {
                  "start": 38,
                  "end": 42
                },
                "word": "range",
                "text": "range",
                "value": "range",
                "unknown": true
              },
              {
                "marker": "unknown",
                "range": {
                  "start": 48,
                  "end": 55
                },
                "word": "accuracy",
                "text": "accuracy",
                "value": "accuracy",
                "unknown": true
              }
            ],
            "range": {
              "start": 0,
              "end": 75
            },
            "types": [
              "list",
              "unknown"
            ]
          },
          "two": {
            "value": "item_property",
            "number": "many",
            "text": "item properties",
            "marker": "item_property",
            "word": "properties",
            "range": {
              "start": 61,
              "end": 75
            },
            "types": [
              "item_property",
              "property"
            ],
            "item": {
              "value": "item",
              "text": "item",
              "marker": "item",
              "word": "item",
              "range": {
                "start": 61,
                "end": 64
              }
            },
            "atomic": true,
            "modifiers": [
              "item"
            ],
            "concept": true
          },
          "topLevel": true,
          "touchedBy": [
            "call2"
          ]
        }
      ],
      "generated": [
        "damage, luck, hp, rads, value, ap, charisma, range and accuracy are properties"
      ],
      "paraphrases": [
        "damage, luck, hp, rads, value, ap, charisma, range and accuracy are item properties"
      ],
      "responses": [
        ""
      ],
      "associations": [
        [
          [
            "is",
            0
          ],
          [
            "item",
            0
          ],
          [
            "list",
            0
          ],
          [
            "property",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "item",
            0
          ],
          [
            "list",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "item",
            0
          ],
          [
            "list",
            1
          ],
          [
            "property",
            0
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "item",
            0
          ],
          [
            "list",
            1
          ],
          [
            "property",
            0
          ],
          [
            "unknown",
            0
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "item_property",
            0
          ],
          [
            "list",
            1
          ]
        ],
        [
          [
            "is",
            0
          ],
          [
            "list",
            1
          ]
        ],
        [
          [
            "item",
            0
          ],
          [
            "unknown",
            0
          ]
        ]
      ],
      "version": "7.5.0-beta.49",
      "query": "damage luck hp rads value ap charisma range and accuracy are item properties",
      "key": {
        "query": "damage luck hp rads value ap charisma range and accuracy are item properties"
      }
    }
  ],
  "fragments": [],
  "semantics": [],
  "associations": [
    [
      [
        "a",
        0
      ],
      [
        "is",
        0
      ]
    ],
    [
      [
        "a",
        0
      ],
      [
        "is",
        0
      ],
      [
        "unknown",
        0
      ],
      [
        "weapon",
        0
      ]
    ],
    [
      [
        "a",
        0
      ],
      [
        "is",
        0
      ],
      [
        "unknown",
        1
      ],
      [
        "weapon",
        0
      ]
    ],
    [
      [
        "a",
        0
      ],
      [
        "is",
        0
      ],
      [
        "weapon",
        0
      ]
    ],
    [
      [
        "clothe",
        0
      ],
      [
        "is",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "clothe",
        0
      ],
      [
        "is",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "drink",
        0
      ],
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "drink",
        0
      ],
      [
        "is",
        0
      ],
      [
        "list",
        1
      ]
    ],
    [
      [
        "explosive",
        0
      ],
      [
        "is",
        0
      ],
      [
        "weapon",
        0
      ]
    ],
    [
      [
        "firearm",
        0
      ],
      [
        "is",
        0
      ],
      [
        "weapon",
        0
      ]
    ],
    [
      [
        "food",
        0
      ],
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "food",
        0
      ],
      [
        "is",
        0
      ],
      [
        "list",
        1
      ]
    ],
    [
      [
        "food",
        0
      ],
      [
        "is",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "food",
        0
      ],
      [
        "is",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "food",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "grenade",
        0
      ],
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "mine",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "item",
        0
      ],
      [
        "list",
        0
      ],
      [
        "property",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "item",
        0
      ],
      [
        "list",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "item",
        0
      ],
      [
        "list",
        1
      ],
      [
        "property",
        0
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "item",
        0
      ],
      [
        "list",
        1
      ],
      [
        "property",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "item_property",
        0
      ],
      [
        "list",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "pistol",
        0
      ],
      [
        "rifle",
        0
      ],
      [
        "shotgun",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ],
      [
        "pistol",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "list",
        1
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "unknown",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "unknown",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "weapon",
        0
      ]
    ],
    [
      [
        "is",
        0
      ],
      [
        "weapon",
        0
      ]
    ],
    [
      [
        "item",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "modifies",
        0
      ],
      [
        "unknown",
        0
      ]
    ],
    [
      [
        "modifies",
        0
      ],
      [
        "unknown",
        0
      ],
      [
        "unknown",
        1
      ]
    ],
    [
      [
        "modifies",
        0
      ],
      [
        "unknown",
        1
      ]
    ]
  ]
}