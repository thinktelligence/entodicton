{
  "queries": [
    "sentientBeing1 feels emotion1 means the emotion of sentientBeing1 is emotion1",
    "greg feels angry"
  ],
  "resultss": [
    {
      "hierarchy": [
        [
          "readonly",
          "queryable"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "emotion",
          "unknown"
        ],
        [
          "does_after_canBeDoQuestion_doesAble",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "type",
          "property"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "sentientBeing",
          "unknown"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "canBeQuestion",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "canBeDoQuestion",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "feel",
          "canBeDoQuestion"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "doesAble",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "questionMark_before_canBeQuestion_have",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "unknown",
          "queryable"
        ]
      ],
      "load_cache_time": 0.0019385814666748047,
      "logs": [
        "Undefined word 'sentientbeing1'",
        "Undefined word 'emotion1'",
        "Undefined word 'emotion'",
        "Op choices were: [(('unknown', 0), [('feel', 0), ('is', 0), ('means', 0), ('propertyOf', 0), ('the', 0), ('unknown', 0)]), (('unknown', 0), [('feel', 0), ('is', 0), ('means', 0), ('propertyOf', 0), ('the', 0), ('unknown', 0)]), (('unknown', 0), [('feel', 0), ('is', 0), ('means', 0), ('propertyOf', 0), ('the', 0), ('unknown', 0)]), (('unknown', 0), [('feel', 0), ('is', 0), ('means', 0), ('propertyOf', 0), ('the', 0), ('unknown', 0)]), (('unknown', 0), [('feel', 0), ('is', 0), ('means', 0), ('propertyOf', 0), ('the', 0), ('unknown', 0)]), (('the', 0), [('feel', 0), ('is', 0), ('means', 0), ('propertyOf', 0), ('the', 0)]), (('propertyOf', 0), [('feel', 0), ('is', 0), ('means', 0), ('propertyOf', 0)]), (('propertyOf', 1), [('feel', 0), ('is', 0), ('means', 0), ('propertyOf', 1)]), (('feel', 0), [('feel', 0), ('is', 0), ('means', 0)]), (('is', 0), [('feel', 1), ('is', 0), ('means', 0)]), (('is', 1), [('feel', 1), ('is', 1), ('means', 0)]), (('feel', 1), [('feel', 1), ('means', 0)]), (('means', 0), [('means', 0)])]",
        "Contexts used for choosing operators (if the wrong choices were made update the priories array. Put the expected choice at the end of the list): \n  Context for choosing the operator unknown/0 was [['feel', 0], ['is', 0], ['means', 0], ['propertyOf', 0], ['the', 0], ['unknown', 0]]\n  Context for choosing the operator unknown/0 was [['feel', 0], ['is', 0], ['means', 0], ['propertyOf', 0], ['the', 0], ['unknown', 0]]\n  Context for choosing the operator unknown/0 was [['feel', 0], ['is', 0], ['means', 0], ['propertyOf', 0], ['the', 0], ['unknown', 0]]\n  Context for choosing the operator unknown/0 was [['feel', 0], ['is', 0], ['means', 0], ['propertyOf', 0], ['the', 0], ['unknown', 0]]\n  Context for choosing the operator unknown/0 was [['feel', 0], ['is', 0], ['means', 0], ['propertyOf', 0], ['the', 0], ['unknown', 0]]\n  Context for choosing the operator the/0 was [['feel', 0], ['is', 0], ['means', 0], ['propertyOf', 0], ['the', 0]]\n  Context for choosing the operator propertyOf/0 was [['feel', 0], ['is', 0], ['means', 0], ['propertyOf', 0]]\n  Context for choosing the operator propertyOf/1 was [['feel', 0], ['is', 0], ['means', 0], ['propertyOf', 1]]\n  Context for choosing the operator feel/0 was [['feel', 0], ['is', 0], ['means', 0]]\n  Context for choosing the operator is/0 was [['feel', 1], ['is', 0], ['means', 0]]\n  Context for choosing the operator is/1 was [['feel', 1], ['is', 1], ['means', 0]]\n  Context for choosing the operator feel/1 was [['feel', 1], ['means', 0]]\n  Context for choosing the operator means/0 was [['means', 0]]",
        "",
        "Semantic            No semantic applied                                                                       \n          TO        {                                                                                         \n                      \"marker\": \"controlStart\",                                                               \n                      \"controlRemove\": true,                                                                  \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n",
        "Semantic            KM 'meta' ordinal: 0                                                                      \n          APPLIED   Semantic(({context}) => context.marker == 'means', ({config, context}) => {               \n                            // setup the read semantic                                                        \n                            {                                                                                 \n                              const match = (defContext) => ({context}) => context.marker == defContext.from.m\n                    arker && context.query                                                                    \n                              const apply = (mappings, TO) => ({context, s}) => {                             \n                                TO = _.cloneDeep(TO)                                                          \n                                for (let { from, to } of mappings) {                                          \n                                  hashIndexesSet(TO, to, hashIndexesGet(context, from))                       \n                                }                                                                             \n                                debugger; // get                                                              \n                                TO.query = true                                                               \n                                toPrime = s(TO)                                                               \n                                context.result = toPrime.result                                               \n                              }                                                                               \n                              const mappings = translationMapping(context.from, context.to)                   \n                              const semantic = {                                                              \n                                notes: \"setup the read semantic\",                                             \n                                match: match(context),                                                        \n                                apply: apply(mappings, _.cloneDeep(context.to)) ,                             \n                              }                                                                               \n                              config.addSemantic(semantic)                                                    \n                            }                                                                                 \n                            // setup the write semantic                                                       \n                            {                                                                                 \n                              const match = (defContext) => ({context}) => context.marker == defContext.from.m\n                    arker && !context.query                                                                   \n                              const apply = (mappings, TO) => ({context, s}) => {                             \n                                TO = _.cloneDeep(TO)                                                          \n                                for (let { from, to } of mappings) {                                          \n                                  hashIndexesSet(TO, to, hashIndexesGet(context, from))                       \n                                }                                                                             \n                                debugger; // set                                                              \n                                toPrime = s(TO)                                                               \n                                context.result = toPrime.result                                               \n                              }                                                                               \n                              const mappings = translationMapping(context.from, context.to)                   \n                              const semantic = {                                                              \n                                notes: \"setup the read semantic\",                                             \n                                match: match(context),                                                        \n                                apply: apply(mappings, _.cloneDeep(context.to)),                              \n                              }                                                                               \n                              config.addSemantic(semantic)                                                    \n                            }                                                                                 \n                            /*                                                                                \n                            const otherWord = context.meaning.word                                            \n                            const word = context.word.word                                                    \n                            const defs = config.get('words')[otherWord]                                       \n                            debugger;                                                                         \n                            if (!defs) {                                                                      \n                              context.response = true;                                                        \n                              context.value = `${otherWord} is not defined`                                   \n                            } else if (defs.length == 1) {                                                    \n                              config.addWord(word, defs[0])                                                   \n                            } else {                                                                          \n                            }                                                                                 \n                            */                                                                                \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"default\": true,                                                                        \n                      \"from\": {                                                                               \n                        \"do\": {                                                                               \n                          \"left\": \"sentientBeing\",                                                            \n                          \"right\": \"emotion\"                                                                  \n                        },                                                                                    \n                        \"emotion\": {                                                                          \n                          \"marker\": \"emotion\",                                                                \n                          \"types\": [                                                                          \n                            \"emotion\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"emotion1\",                                                                \n                          \"word\": \"emotion1\"                                                                  \n                        },                                                                                    \n                        \"marker\": \"feel\",                                                                     \n                        \"sentientBeing\": {                                                                    \n                          \"marker\": \"sentientBeing\",                                                          \n                          \"types\": [                                                                          \n                            \"sentientBeing\"                                                                   \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"sentientbeing1\",                                                          \n                          \"word\": \"sentientbeing1\"                                                            \n                        },                                                                                    \n                        \"value\": \"feel\",                                                                      \n                        \"word\": \"feels\"                                                                       \n                      },                                                                                      \n                      \"marker\": \"means\",                                                                      \n                      \"to\": {                                                                                 \n                        \"default\": true,                                                                      \n                        \"marker\": \"is\",                                                                       \n                        \"one\": {                                                                              \n                          \"concept\": true,                                                                    \n                          \"determiner\": \"the\",                                                                \n                          \"marker\": \"property\",                                                               \n                          \"modifiers\": [                                                                      \n                            \"determiner\"                                                                      \n                          ],                                                                                  \n                          \"object\": {                                                                         \n                            \"marker\": \"unknown\",                                                              \n                            \"types\": [                                                                        \n                              \"object\",                                                                       \n                              \"unknown\"                                                                       \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"sentientbeing1\",                                                        \n                            \"word\": \"sentientbeing1\"                                                          \n                          },                                                                                  \n                          \"pullFromContext\": true,                                                            \n                          \"types\": [                                                                          \n                            \"property\"                                                                        \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"emotion\",                                                                 \n                          \"wantsValue\": true,                                                                 \n                          \"word\": \"emotion\"                                                                   \n                        },                                                                                    \n                        \"two\": {                                                                              \n                          \"marker\": \"unknown\",                                                                \n                          \"types\": [                                                                          \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"emotion1\",                                                                \n                          \"word\": \"emotion1\"                                                                  \n                        },                                                                                    \n                        \"word\": \"is\"                                                                          \n                      },                                                                                      \n                      \"word\": \"means\",                                                                        \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n          RESULT    {                                                                                         \n                      \"default\": true,                                                                        \n                      \"from\": {                                                                               \n                        \"do\": {                                                                               \n                          \"left\": \"sentientBeing\",                                                            \n                          \"right\": \"emotion\"                                                                  \n                        },                                                                                    \n                        \"emotion\": {                                                                          \n                          \"marker\": \"emotion\",                                                                \n                          \"types\": [                                                                          \n                            \"emotion\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"emotion1\",                                                                \n                          \"word\": \"emotion1\"                                                                  \n                        },                                                                                    \n                        \"marker\": \"feel\",                                                                     \n                        \"sentientBeing\": {                                                                    \n                          \"marker\": \"sentientBeing\",                                                          \n                          \"types\": [                                                                          \n                            \"sentientBeing\"                                                                   \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"sentientbeing1\",                                                          \n                          \"word\": \"sentientbeing1\"                                                            \n                        },                                                                                    \n                        \"value\": \"feel\",                                                                      \n                        \"word\": \"feels\"                                                                       \n                      },                                                                                      \n                      \"marker\": \"means\",                                                                      \n                      \"to\": {                                                                                 \n                        \"default\": true,                                                                      \n                        \"marker\": \"is\",                                                                       \n                        \"one\": {                                                                              \n                          \"concept\": true,                                                                    \n                          \"determiner\": \"the\",                                                                \n                          \"marker\": \"property\",                                                               \n                          \"modifiers\": [                                                                      \n                            \"determiner\"                                                                      \n                          ],                                                                                  \n                          \"object\": {                                                                         \n                            \"marker\": \"unknown\",                                                              \n                            \"types\": [                                                                        \n                              \"object\",                                                                       \n                              \"unknown\"                                                                       \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"sentientbeing1\",                                                        \n                            \"word\": \"sentientbeing1\"                                                          \n                          },                                                                                  \n                          \"pullFromContext\": true,                                                            \n                          \"types\": [                                                                          \n                            \"property\"                                                                        \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"emotion\",                                                                 \n                          \"wantsValue\": true,                                                                 \n                          \"word\": \"emotion\"                                                                   \n                        },                                                                                    \n                        \"two\": {                                                                              \n                          \"marker\": \"unknown\",                                                                \n                          \"types\": [                                                                          \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"emotion1\",                                                                \n                          \"word\": \"emotion1\"                                                                  \n                        },                                                                                    \n                        \"word\": \"is\"                                                                          \n                      },                                                                                      \n                      \"word\": \"means\",                                                                        \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n",
        "Generator           KM 'dialogues' ordinal: 25  notes: \"show word\"                                            \n          APPLIED   Generator(({context}) => context.word, ({context}) => context.word)                       \n          TO        {                                                                                         \n                      \"default\": true,                                                                        \n                      \"from\": {                                                                               \n                        \"do\": {                                                                               \n                          \"left\": \"sentientBeing\",                                                            \n                          \"right\": \"emotion\"                                                                  \n                        },                                                                                    \n                        \"emotion\": {                                                                          \n                          \"marker\": \"emotion\",                                                                \n                          \"types\": [                                                                          \n                            \"emotion\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"emotion1\",                                                                \n                          \"word\": \"emotion1\"                                                                  \n                        },                                                                                    \n                        \"marker\": \"feel\",                                                                     \n                        \"sentientBeing\": {                                                                    \n                          \"marker\": \"sentientBeing\",                                                          \n                          \"types\": [                                                                          \n                            \"sentientBeing\"                                                                   \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"sentientbeing1\",                                                          \n                          \"word\": \"sentientbeing1\"                                                            \n                        },                                                                                    \n                        \"value\": \"feel\",                                                                      \n                        \"word\": \"feels\"                                                                       \n                      },                                                                                      \n                      \"marker\": \"means\",                                                                      \n                      \"to\": {                                                                                 \n                        \"default\": true,                                                                      \n                        \"marker\": \"is\",                                                                       \n                        \"one\": {                                                                              \n                          \"concept\": true,                                                                    \n                          \"determiner\": \"the\",                                                                \n                          \"marker\": \"property\",                                                               \n                          \"modifiers\": [                                                                      \n                            \"determiner\"                                                                      \n                          ],                                                                                  \n                          \"object\": {                                                                         \n                            \"marker\": \"unknown\",                                                              \n                            \"types\": [                                                                        \n                              \"object\",                                                                       \n                              \"unknown\"                                                                       \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"sentientbeing1\",                                                        \n                            \"word\": \"sentientbeing1\"                                                          \n                          },                                                                                  \n                          \"pullFromContext\": true,                                                            \n                          \"types\": [                                                                          \n                            \"property\"                                                                        \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"emotion\",                                                                 \n                          \"wantsValue\": true,                                                                 \n                          \"word\": \"emotion\"                                                                   \n                        },                                                                                    \n                        \"two\": {                                                                              \n                          \"marker\": \"unknown\",                                                                \n                          \"types\": [                                                                          \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"emotion1\",                                                                \n                          \"word\": \"emotion1\"                                                                  \n                        },                                                                                    \n                        \"word\": \"is\"                                                                          \n                      },                                                                                      \n                      \"word\": \"means\",                                                                        \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n          RESULT    means                                                                                     \n",
        "Generator           KM 'dialogues' ordinal: 21                                                                \n          APPLIED   Generator(({context}) => context.paraphrase && context.word, ({context}) => `${context.wor\n                    d}`)                                                                                      \n          TO        {                                                                                         \n                      \"default\": true,                                                                        \n                      \"from\": {                                                                               \n                        \"do\": {                                                                               \n                          \"left\": \"sentientBeing\",                                                            \n                          \"right\": \"emotion\"                                                                  \n                        },                                                                                    \n                        \"emotion\": {                                                                          \n                          \"marker\": \"emotion\",                                                                \n                          \"types\": [                                                                          \n                            \"emotion\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"emotion1\",                                                                \n                          \"word\": \"emotion1\"                                                                  \n                        },                                                                                    \n                        \"marker\": \"feel\",                                                                     \n                        \"sentientBeing\": {                                                                    \n                          \"marker\": \"sentientBeing\",                                                          \n                          \"types\": [                                                                          \n                            \"sentientBeing\"                                                                   \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"sentientbeing1\",                                                          \n                          \"word\": \"sentientbeing1\"                                                            \n                        },                                                                                    \n                        \"value\": \"feel\",                                                                      \n                        \"word\": \"feels\"                                                                       \n                      },                                                                                      \n                      \"marker\": \"means\",                                                                      \n                      \"to\": {                                                                                 \n                        \"default\": true,                                                                      \n                        \"marker\": \"is\",                                                                       \n                        \"one\": {                                                                              \n                          \"concept\": true,                                                                    \n                          \"determiner\": \"the\",                                                                \n                          \"marker\": \"property\",                                                               \n                          \"modifiers\": [                                                                      \n                            \"determiner\"                                                                      \n                          ],                                                                                  \n                          \"object\": {                                                                         \n                            \"marker\": \"unknown\",                                                              \n                            \"types\": [                                                                        \n                              \"object\",                                                                       \n                              \"unknown\"                                                                       \n                            ],                                                                                \n                            \"unknown\": true,                                                                  \n                            \"value\": \"sentientbeing1\",                                                        \n                            \"word\": \"sentientbeing1\"                                                          \n                          },                                                                                  \n                          \"pullFromContext\": true,                                                            \n                          \"types\": [                                                                          \n                            \"property\"                                                                        \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"emotion\",                                                                 \n                          \"wantsValue\": true,                                                                 \n                          \"word\": \"emotion\"                                                                   \n                        },                                                                                    \n                        \"two\": {                                                                              \n                          \"marker\": \"unknown\",                                                                \n                          \"types\": [                                                                          \n                            \"unknown\"                                                                         \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"emotion1\",                                                                \n                          \"word\": \"emotion1\"                                                                  \n                        },                                                                                    \n                        \"word\": \"is\"                                                                          \n                      },                                                                                      \n                      \"word\": \"means\",                                                                        \n                      \"topLevel\": true,                                                                       \n                      \"paraphrase\": true,                                                                     \n                      \"response\": false                                                                       \n                    }                                                                                         \n          RESULT    means                                                                                     \n",
        "Semantic            No semantic applied                                                                       \n          TO        {                                                                                         \n                      \"marker\": \"controlEnd\",                                                                 \n                      \"controlRemove\": true,                                                                  \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n"
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "feel",
                0
              ],
              [
                "is",
                0
              ],
              [
                "means",
                0
              ],
              [
                "propertyOf",
                0
              ],
              [
                "the",
                0
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "feel",
                0
              ],
              [
                "is",
                0
              ],
              [
                "means",
                0
              ],
              [
                "propertyOf",
                0
              ],
              [
                "the",
                0
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "feel",
                0
              ],
              [
                "is",
                0
              ],
              [
                "means",
                0
              ],
              [
                "propertyOf",
                0
              ],
              [
                "the",
                0
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "feel",
                0
              ],
              [
                "is",
                0
              ],
              [
                "means",
                0
              ],
              [
                "propertyOf",
                0
              ],
              [
                "the",
                0
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "feel",
                0
              ],
              [
                "is",
                0
              ],
              [
                "means",
                0
              ],
              [
                "propertyOf",
                0
              ],
              [
                "the",
                0
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "the",
              0
            ],
            "ops": [
              [
                "feel",
                0
              ],
              [
                "is",
                0
              ],
              [
                "means",
                0
              ],
              [
                "propertyOf",
                0
              ],
              [
                "the",
                0
              ]
            ]
          },
          {
            "op": [
              "propertyOf",
              0
            ],
            "ops": [
              [
                "feel",
                0
              ],
              [
                "is",
                0
              ],
              [
                "means",
                0
              ],
              [
                "propertyOf",
                0
              ]
            ]
          },
          {
            "op": [
              "propertyOf",
              1
            ],
            "ops": [
              [
                "feel",
                0
              ],
              [
                "is",
                0
              ],
              [
                "means",
                0
              ],
              [
                "propertyOf",
                1
              ]
            ]
          },
          {
            "op": [
              "feel",
              0
            ],
            "ops": [
              [
                "feel",
                0
              ],
              [
                "is",
                0
              ],
              [
                "means",
                0
              ]
            ]
          },
          {
            "op": [
              "is",
              0
            ],
            "ops": [
              [
                "feel",
                1
              ],
              [
                "is",
                0
              ],
              [
                "means",
                0
              ]
            ]
          },
          {
            "op": [
              "is",
              1
            ],
            "ops": [
              [
                "feel",
                1
              ],
              [
                "is",
                1
              ],
              [
                "means",
                0
              ]
            ]
          },
          {
            "op": [
              "feel",
              1
            ],
            "ops": [
              [
                "feel",
                1
              ],
              [
                "means",
                0
              ]
            ]
          },
          {
            "op": [
              "means",
              0
            ],
            "ops": [
              [
                "means",
                0
              ]
            ]
          }
        ]
      },
      "times": 1.6752345561981201,
      "trace": "undefined",
      "contexts": [
        {
          "default": true,
          "from": {
            "do": {
              "left": "sentientBeing",
              "right": "emotion"
            },
            "emotion": {
              "marker": "emotion",
              "types": [
                "emotion"
              ],
              "unknown": true,
              "value": "emotion1",
              "word": "emotion1"
            },
            "marker": "feel",
            "sentientBeing": {
              "marker": "sentientBeing",
              "types": [
                "sentientBeing"
              ],
              "unknown": true,
              "value": "sentientbeing1",
              "word": "sentientbeing1"
            },
            "value": "feel",
            "word": "feels"
          },
          "marker": "means",
          "to": {
            "default": true,
            "marker": "is",
            "one": {
              "concept": true,
              "determiner": "the",
              "marker": "property",
              "modifiers": [
                "determiner"
              ],
              "object": {
                "marker": "unknown",
                "types": [
                  "object",
                  "unknown"
                ],
                "unknown": true,
                "value": "sentientbeing1",
                "word": "sentientbeing1"
              },
              "pullFromContext": true,
              "types": [
                "property"
              ],
              "unknown": true,
              "value": "emotion",
              "wantsValue": true,
              "word": "emotion"
            },
            "two": {
              "marker": "unknown",
              "types": [
                "unknown"
              ],
              "unknown": true,
              "value": "emotion1",
              "word": "emotion1"
            },
            "word": "is"
          },
          "word": "means",
          "topLevel": true
        }
      ],
      "generated": [
        "means"
      ],
      "paraphrases": [
        "means"
      ],
      "responses": [
        ""
      ],
      "memory_free_percent": 56.1,
      "version": "6.13.37",
      "query": "sentientBeing1 feels emotion1 means the emotion of sentientBeing1 is emotion1"
    },
    {
      "hierarchy": [
        [
          "readonly",
          "queryable"
        ],
        [
          "theAble",
          "theAble"
        ],
        [
          "emotion",
          "unknown"
        ],
        [
          "does_after_canBeDoQuestion_doesAble",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "have",
          "canBeDoQuestion"
        ],
        [
          "have",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "queryable",
          "queryable"
        ],
        [
          "type",
          "property"
        ],
        [
          "hierarchyAble",
          "queryable"
        ],
        [
          "unknown",
          "hierarchyAble"
        ],
        [
          "is",
          "canBeQuestion"
        ],
        [
          "property",
          "queryable"
        ],
        [
          "property",
          "theAble"
        ],
        [
          "sentientBeing",
          "unknown"
        ],
        [
          "object",
          "theAble"
        ],
        [
          "canBeQuestion",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "object",
          "queryable"
        ],
        [
          "whose",
          "object"
        ],
        [
          "unknown",
          "notAble"
        ],
        [
          "what",
          "queryable"
        ],
        [
          "property",
          "unknown"
        ],
        [
          "canBeDoQuestion",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "feel",
          "canBeDoQuestion"
        ],
        [
          "it",
          "queryable"
        ],
        [
          "notAble",
          "notAble"
        ],
        [
          "doesAble",
          "does_after_canBeDoQuestion_doesAble"
        ],
        [
          "questionMark_before_canBeQuestion_have",
          "questionMark_before_canBeQuestion_have"
        ],
        [
          "have",
          "canBeQuestion"
        ],
        [
          "unknown",
          "theAble"
        ],
        [
          "unknown",
          "queryable"
        ]
      ],
      "load_cache_time": 0.0017709732055664062,
      "logs": [
        "Undefined word 'greg'",
        "Undefined word 'angry'",
        "Op choices were: [(('unknown', 0), [('feel', 0), ('unknown', 0)]), (('unknown', 0), [('feel', 0), ('unknown', 0)]), (('feel', 0), [('feel', 0)]), (('feel', 1), [('feel', 1)])]",
        "Contexts used for choosing operators (if the wrong choices were made update the priories array. Put the expected choice at the end of the list): \n  Context for choosing the operator unknown/0 was [['feel', 0], ['unknown', 0]]\n  Context for choosing the operator unknown/0 was [['feel', 0], ['unknown', 0]]\n  Context for choosing the operator feel/0 was [['feel', 0]]\n  Context for choosing the operator feel/1 was [['feel', 1]]",
        "",
        "Semantic            No semantic applied                                                                       \n          TO        {                                                                                         \n                      \"marker\": \"controlStart\",                                                               \n                      \"controlRemove\": true,                                                                  \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n",
        "Semantic            KM 'properties' ordinal: 5  notes: \"set the property of an object\"                        \n          APPLIED   Semantic(({context}) => context.marker == 'property' && context.same && context.object, ({\n                    context, objects, km, api}) => {                                                          \n                            const objectContext = context.object;                                             \n                            const propertyContext = context;                                                  \n                            const objectId = context.object.value                                             \n                            const propertyId = context.value                                                  \n                            try{                                                                              \n                              api.setProperty(pluralize.singular(objectId), pluralize.singular(propertyId), co\n                    ntext.same, true)                                                                         \n                              context.sameWasProcessed = true                                                 \n                            } catch (e) {                                                                     \n                              const config = km('properties')                                                 \n                              const fragment = config.fragment(\"the property1 of object1 is value1\")          \n                              const value = api.getProperty(objectId, propertyId)                             \n                              if (value.value == context.same.value) {                                        \n                                context.response = [                                                          \n                                  { marker: 'yesno', value: true, paraphrase: true },                         \n                                ]                                                                             \n                                context.sameWasProcessed = true                                               \n                              } else {                                                                        \n                                const mappings = [                                                            \n                                  {                                                                           \n                                    match: ({context}) => context.value == 'property1',                       \n                                    apply: ({context}) => Object.assign(context, { word: propertyContext.word,\n                     value: propertyContext.value, paraphrase: true }),                                       \n                                  },                                                                          \n                                  {                                                                           \n                                    match: ({context}) => context.value == 'object1',                         \n                                    apply: ({context}) => {                                                   \n                                      Object.assign(context, { word: objectContext.word, value: objectContext.\n                    value, paraphrase: true })                                                                \n                                    },                                                                        \n                                  },                                                                          \n                                  {                                                                           \n                                    match: ({context}) => context.value == 'value1',                          \n                                    apply: ({context}) => Object.assign(context, value),                      \n                                  },                                                                          \n                                ]                                                                             \n                                // run the query 'the property of object' then copy that here and template it \n                                context.response = {                                                          \n                                  verbatim: \"no way hose\"                                                     \n                                }                                                                             \n                                context.response = [                                                          \n                                  { marker: 'yesno', value: false, paraphrase: true },                        \n                                ]                                                                             \n                                context.response = context.response.concat(fragment.instantiate(mappings))    \n                                context.response.forEach( (r) => r.paraphrase = true )                        \n                                context.sameWasProcessed = true                                               \n                              }                                                                               \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"concept\": true,                                                                        \n                      \"determiner\": \"the\",                                                                    \n                      \"marker\": \"property\",                                                                   \n                      \"modifiers\": [                                                                          \n                        \"determiner\"                                                                          \n                      ],                                                                                      \n                      \"object\": {                                                                             \n                        \"marker\": \"sentientBeing\",                                                            \n                        \"types\": [                                                                            \n                          \"sentientBeing\"                                                                     \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"greg\",                                                                      \n                        \"word\": \"greg\"                                                                        \n                      },                                                                                      \n                      \"pullFromContext\": true,                                                                \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"emotion\",                                                                     \n                      \"wantsValue\": true,                                                                     \n                      \"word\": \"emotion\",                                                                      \n                      \"same\": {                                                                               \n                        \"marker\": \"emotion\",                                                                  \n                        \"types\": [                                                                            \n                          \"emotion\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"angry\",                                                                     \n                        \"word\": \"angry\",                                                                      \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"response\": null                                                                        \n                    }                                                                                         \n          RESULT    {                                                                                         \n                      \"concept\": true,                                                                        \n                      \"determiner\": \"the\",                                                                    \n                      \"marker\": \"property\",                                                                   \n                      \"modifiers\": [                                                                          \n                        \"determiner\"                                                                          \n                      ],                                                                                      \n                      \"object\": {                                                                             \n                        \"marker\": \"sentientBeing\",                                                            \n                        \"types\": [                                                                            \n                          \"sentientBeing\"                                                                     \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"greg\",                                                                      \n                        \"word\": \"greg\"                                                                        \n                      },                                                                                      \n                      \"pullFromContext\": true,                                                                \n                      \"types\": [                                                                              \n                        \"property\"                                                                            \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"emotion\",                                                                     \n                      \"wantsValue\": true,                                                                     \n                      \"word\": \"emotion\",                                                                      \n                      \"same\": {                                                                               \n                        \"marker\": \"emotion\",                                                                  \n                        \"types\": [                                                                            \n                          \"emotion\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"angry\",                                                                     \n                        \"word\": \"angry\",                                                                      \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"response\": null,                                                                       \n                      \"sameWasProcessed\": true                                                                \n                    }                                                                                         \n",
        "Semantic            KM 'dialogues' ordinal: 3  notes: \"x is y\"                                                \n          APPLIED   Semantic(({context}) => context.marker == 'is' && !context.query && context.one && context\n                    .two, ({context, s, log}) => {                                                            \n                            const one = context.one;                                                          \n                            const two = context.two;                                                          \n                            one.same = two;                                                                   \n                            one.response = null                                                               \n                            two.response = null                                                               \n                            const onePrime = s(one)                                                           \n                            if (!onePrime.sameWasProcessed) {                                                 \n                              warningSameNotEvaluated(log, context, one)                                      \n                            } else {                                                                          \n                              if (onePrime.response) {                                                        \n                                context.response = onePrime.response                                          \n                              }                                                                               \n                            }                                                                                 \n                            one.same = undefined                                                              \n                            let twoPrime;                                                                     \n                            if (!onePrime.sameWasProcessed) {                                                 \n                              two.same = one                                                                  \n                              twoPrime = s(two)                                                               \n                              if (!twoPrime.sameWasProcessed) {                                               \n                                warningSameNotEvaluated(log, context, two)                                    \n                              } else {                                                                        \n                                if (twoPrime.response) {                                                      \n                                  context.response = twoPrime.response                                        \n                                }                                                                             \n                              }                                                                               \n                              two.same = undefined                                                            \n                            }                                                                                 \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"default\": true,                                                                        \n                      \"marker\": \"is\",                                                                         \n                      \"one\": {                                                                                \n                        \"concept\": true,                                                                      \n                        \"determiner\": \"the\",                                                                  \n                        \"marker\": \"property\",                                                                 \n                        \"modifiers\": [                                                                        \n                          \"determiner\"                                                                        \n                        ],                                                                                    \n                        \"object\": {                                                                           \n                          \"marker\": \"sentientBeing\",                                                          \n                          \"types\": [                                                                          \n                            \"sentientBeing\"                                                                   \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"greg\",                                                                    \n                          \"word\": \"greg\"                                                                      \n                        },                                                                                    \n                        \"pullFromContext\": true,                                                              \n                        \"types\": [                                                                            \n                          \"property\"                                                                          \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"emotion\",                                                                   \n                        \"wantsValue\": true,                                                                   \n                        \"word\": \"emotion\",                                                                    \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"two\": {                                                                                \n                        \"marker\": \"emotion\",                                                                  \n                        \"types\": [                                                                            \n                          \"emotion\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"angry\",                                                                     \n                        \"word\": \"angry\",                                                                      \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"word\": \"is\"                                                                            \n                    }                                                                                         \n          RESULT    {                                                                                         \n                      \"default\": true,                                                                        \n                      \"marker\": \"is\",                                                                         \n                      \"one\": {                                                                                \n                        \"concept\": true,                                                                      \n                        \"determiner\": \"the\",                                                                  \n                        \"marker\": \"property\",                                                                 \n                        \"modifiers\": [                                                                        \n                          \"determiner\"                                                                        \n                        ],                                                                                    \n                        \"object\": {                                                                           \n                          \"marker\": \"sentientBeing\",                                                          \n                          \"types\": [                                                                          \n                            \"sentientBeing\"                                                                   \n                          ],                                                                                  \n                          \"unknown\": true,                                                                    \n                          \"value\": \"greg\",                                                                    \n                          \"word\": \"greg\"                                                                      \n                        },                                                                                    \n                        \"pullFromContext\": true,                                                              \n                        \"types\": [                                                                            \n                          \"property\"                                                                          \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"emotion\",                                                                   \n                        \"wantsValue\": true,                                                                   \n                        \"word\": \"emotion\",                                                                    \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"two\": {                                                                                \n                        \"marker\": \"emotion\",                                                                  \n                        \"types\": [                                                                            \n                          \"emotion\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"angry\",                                                                     \n                        \"word\": \"angry\",                                                                      \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"word\": \"is\"                                                                            \n                    }                                                                                         \n",
        "Semantic            KM 'emotions' ordinal: 18  notes: \"setup the read semantic\"                               \n          APPLIED   Semantic(({context}) => context.marker == defContext.from.marker && !context.query, ({cont\n                    ext, s}) => {                                                                             \n                                TO = _.cloneDeep(TO)                                                          \n                                for (let { from, to } of mappings) {                                          \n                                  hashIndexesSet(TO, to, hashIndexesGet(context, from))                       \n                                }                                                                             \n                                debugger; // set                                                              \n                                toPrime = s(TO)                                                               \n                                context.result = toPrime.result                                               \n                              })                                                                              \n          TO        {                                                                                         \n                      \"do\": {                                                                                 \n                        \"left\": \"sentientBeing\",                                                              \n                        \"right\": \"emotion\"                                                                    \n                      },                                                                                      \n                      \"emotion\": {                                                                            \n                        \"marker\": \"emotion\",                                                                  \n                        \"types\": [                                                                            \n                          \"emotion\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"angry\",                                                                     \n                        \"word\": \"angry\",                                                                      \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"marker\": \"feel\",                                                                       \n                      \"sentientBeing\": {                                                                      \n                        \"marker\": \"sentientBeing\",                                                            \n                        \"types\": [                                                                            \n                          \"sentientBeing\"                                                                     \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"greg\",                                                                      \n                        \"word\": \"greg\"                                                                        \n                      },                                                                                      \n                      \"value\": \"feel\",                                                                        \n                      \"word\": \"feels\",                                                                        \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n          RESULT    {                                                                                         \n                      \"do\": {                                                                                 \n                        \"left\": \"sentientBeing\",                                                              \n                        \"right\": \"emotion\"                                                                    \n                      },                                                                                      \n                      \"emotion\": {                                                                            \n                        \"marker\": \"emotion\",                                                                  \n                        \"types\": [                                                                            \n                          \"emotion\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"angry\",                                                                     \n                        \"word\": \"angry\",                                                                      \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"marker\": \"feel\",                                                                       \n                      \"sentientBeing\": {                                                                      \n                        \"marker\": \"sentientBeing\",                                                            \n                        \"types\": [                                                                            \n                          \"sentientBeing\"                                                                     \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"greg\",                                                                      \n                        \"word\": \"greg\"                                                                        \n                      },                                                                                      \n                      \"value\": \"feel\",                                                                        \n                      \"word\": \"feels\",                                                                        \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n",
        "Generator           KM 'dialogues' ordinal: 25  notes: \"show word\"                                            \n          APPLIED   Generator(({context}) => context.word, ({context}) => context.word)                       \n          TO        {                                                                                         \n                      \"do\": {                                                                                 \n                        \"left\": \"sentientBeing\",                                                              \n                        \"right\": \"emotion\"                                                                    \n                      },                                                                                      \n                      \"emotion\": {                                                                            \n                        \"marker\": \"emotion\",                                                                  \n                        \"types\": [                                                                            \n                          \"emotion\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"angry\",                                                                     \n                        \"word\": \"angry\",                                                                      \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"marker\": \"feel\",                                                                       \n                      \"sentientBeing\": {                                                                      \n                        \"marker\": \"sentientBeing\",                                                            \n                        \"types\": [                                                                            \n                          \"sentientBeing\"                                                                     \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"greg\",                                                                      \n                        \"word\": \"greg\"                                                                        \n                      },                                                                                      \n                      \"value\": \"feel\",                                                                        \n                      \"word\": \"feels\",                                                                        \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n          RESULT    feels                                                                                     \n",
        "Generator           KM 'dialogues' ordinal: 21                                                                \n          APPLIED   Generator(({context}) => context.paraphrase && context.word, ({context}) => `${context.wor\n                    d}`)                                                                                      \n          TO        {                                                                                         \n                      \"marker\": \"sentientBeing\",                                                              \n                      \"types\": [                                                                              \n                        \"sentientBeing\"                                                                       \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"greg\",                                                                        \n                      \"word\": \"greg\",                                                                         \n                      \"paraphrase\": true,                                                                     \n                      \"response\": false                                                                       \n                    }                                                                                         \n          RESULT    greg                                                                                      \n",
        "Generator           KM 'dialogues' ordinal: 21                                                                \n          APPLIED   Generator(({context}) => context.paraphrase && context.word, ({context}) => `${context.wor\n                    d}`)                                                                                      \n          TO        {                                                                                         \n                      \"marker\": \"emotion\",                                                                    \n                      \"types\": [                                                                              \n                        \"emotion\"                                                                             \n                      ],                                                                                      \n                      \"unknown\": true,                                                                        \n                      \"value\": \"angry\",                                                                       \n                      \"word\": \"angry\",                                                                        \n                      \"response\": false,                                                                      \n                      \"paraphrase\": true                                                                      \n                    }                                                                                         \n          RESULT    angry                                                                                     \n",
        "Generator           KM 'emotions' ordinal: 39  notes: \"ordering generator for paraphrase\"                     \n          APPLIED   Generator(({context}) => context.marker == operator && context.paraphrase && !context.quer\n                    y, ({context, g}) => {                                                                    \n                            const beforeGenerator = before.map( (arg) => g(context[arg.tag]) )                \n                            const afterGenerator = after.map( (arg) => g(context[arg.tag]) )                  \n                            return beforeGenerator.concat([`${context.word}`]).concat(afterGenerator).join(' '\n                    )                                                                                         \n                          })                                                                                  \n          TO        {                                                                                         \n                      \"do\": {                                                                                 \n                        \"left\": \"sentientBeing\",                                                              \n                        \"right\": \"emotion\"                                                                    \n                      },                                                                                      \n                      \"emotion\": {                                                                            \n                        \"marker\": \"emotion\",                                                                  \n                        \"types\": [                                                                            \n                          \"emotion\"                                                                           \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"angry\",                                                                     \n                        \"word\": \"angry\",                                                                      \n                        \"response\": null                                                                      \n                      },                                                                                      \n                      \"marker\": \"feel\",                                                                       \n                      \"sentientBeing\": {                                                                      \n                        \"marker\": \"sentientBeing\",                                                            \n                        \"types\": [                                                                            \n                          \"sentientBeing\"                                                                     \n                        ],                                                                                    \n                        \"unknown\": true,                                                                      \n                        \"value\": \"greg\",                                                                      \n                        \"word\": \"greg\"                                                                        \n                      },                                                                                      \n                      \"value\": \"feel\",                                                                        \n                      \"word\": \"feels\",                                                                        \n                      \"topLevel\": true,                                                                       \n                      \"paraphrase\": true,                                                                     \n                      \"response\": false                                                                       \n                    }                                                                                         \n          RESULT    greg feels angry                                                                          \n",
        "Semantic            No semantic applied                                                                       \n          TO        {                                                                                         \n                      \"marker\": \"controlEnd\",                                                                 \n                      \"controlRemove\": true,                                                                  \n                      \"topLevel\": true                                                                        \n                    }                                                                                         \n"
      ],
      "metadata": {
        "opChoices": [
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "feel",
                0
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "unknown",
              0
            ],
            "ops": [
              [
                "feel",
                0
              ],
              [
                "unknown",
                0
              ]
            ]
          },
          {
            "op": [
              "feel",
              0
            ],
            "ops": [
              [
                "feel",
                0
              ]
            ]
          },
          {
            "op": [
              "feel",
              1
            ],
            "ops": [
              [
                "feel",
                1
              ]
            ]
          }
        ]
      },
      "times": 0.5789768695831299,
      "trace": "\n\n>>>>>>>>>>>>> Counter 1\n\n    0. unknown/0                 - marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: greg\n                                   value: greg\n\n    1. feel/0                    - value: feel\n                                   marker: Operator(feel/0, [Selector(Bridge('{ ... next(operator) , do: { left: \"sentientBeing\", right: \"emotion\" }  , sentientBeing: before[0]  , emotion*: after[0]  }'), [Type('sentientBeing')]<==>[Type('emotion')])], evaluator(Bridge('{ ... next(operator) , do: { left: \"sentientBeing\", right: \"emotion\" }  , sentientBeing: before[0]  , emotion*: after[0]  }')), v\n                                   word: feels\n\n    2. unknown/0                 - marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: angry\n                                   value: angry\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({'marker': Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({})), 'word': 'greg', 'value': 'greg'})\n\n>>>>>>>>>>>>> Counter 2\n\n   *0. unknown/1                 - marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: greg\n                                   value: greg\n                                   unknown: True\n\n    1. feel/0                    - value: feel\n                                   marker: Operator(feel/0, [Selector(Bridge('{ ... next(operator) , do: { left: \"sentientBeing\", right: \"emotion\" }  , sentientBeing: before[0]  , emotion*: after[0]  }'), [Type('sentientBeing')]<==>[Type('emotion')])], evaluator(Bridge('{ ... next(operator) , do: { left: \"sentientBeing\", right: \"emotion\" }  , sentientBeing: before[0]  , emotion*: after[0]  }')), v\n                                   word: feels\n\n    2. unknown/0                 - marker: Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({}))\n                                   word: angry\n                                   value: angry\n<<<<<<<<<<<<<\nNext Op (index=2) is Context({'marker': Operator(unknown/0, [Selector(Bridge('{ ...next(operator), unknown: true }'), []<==>[])], evaluator(Bridge('{ ...next(operator), unknown: true }')), variables({})), 'word': 'angry', 'value': 'angry'})\n\n>>>>>>>>>>>>> Counter 3\n\n    0. unknown/1                 - marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: greg\n                                   value: greg\n                                   unknown: True\n\n    1. feel/0                    - value: feel\n                                   marker: Operator(feel/0, [Selector(Bridge('{ ... next(operator) , do: { left: \"sentientBeing\", right: \"emotion\" }  , sentientBeing: before[0]  , emotion*: after[0]  }'), [Type('sentientBeing')]<==>[Type('emotion')])], evaluator(Bridge('{ ... next(operator) , do: { left: \"sentientBeing\", right: \"emotion\" }  , sentientBeing: before[0]  , emotion*: after[0]  }')), v\n                                   word: feels\n\n   *2. unknown/1                 - marker: Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: angry\n                                   value: angry\n                                   unknown: True\n<<<<<<<<<<<<<\nNext Op (index=1) is Context({'value': 'feel', 'marker': Operator(feel/0, [Selector(Bridge('{ ... next(operator) , do: { left: \"sentientBeing\", right: \"emotion\" }  , sentientBeing: before[0]  , emotion*: after[0]  }'), [Type('sentientBeing')]<==>[Type('emotion')])], evaluator(Bridge('{ ... next(operator) , do: { left: \"sentientBeing\", right: \"emotion\" }  , sentientBeing: before[0]  , emotion*: after[0]  }')), variables({})), 'word': 'feels'})\n\n>>>>>>>>>>>>> Counter 4\n\n   *0. feel/1                    - value: feel\n                                   marker: Operator(feel/1, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({}))\n                                   word: feels\n                                   do: Context({'left': 'sentientBeing', 'right': 'emotion'})\n                                   sentientBeing: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'greg', 'value': 'greg', 'unknown': True, 'types': ['sentientBeing']})\n                                   emotion: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'angry', 'value': 'angry', 'unknown': True, 'types': ['emotion']})\n<<<<<<<<<<<<<\nNext Op (index=0) is Context({'value': 'feel', 'marker': Operator(feel/1, [Selector(Bridge('{ ...next(operator) }'), []<==>[])], evaluator(Bridge('{ ...next(operator) }')), variables({})), 'word': 'feels', 'do': Context({'left': 'sentientBeing', 'right': 'emotion'}), 'sentientBeing': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'greg', 'value': 'greg', 'unknown': True, 'types': ['sentientBeing']}), 'emotion': Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'angry', 'value': 'angry', 'unknown': True, 'types': ['emotion']})})\n\n>>>>>>>>>>>>> Counter 5\n\n   *0. feel/2                    - value: feel\n                                   marker: Operator(feel/2, [Selector(None, []<==>[])], evaluator(None), variables({}))\n                                   word: feels\n                                   do: Context({'left': 'sentientBeing', 'right': 'emotion'})\n                                   sentientBeing: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'greg', 'value': 'greg', 'unknown': True, 'types': ['sentientBeing']})\n                                   emotion: Context({'marker': Operator(unknown/1, [Selector(None, []<==>[])], evaluator(None), variables({})), 'word': 'angry', 'value': 'angry', 'unknown': True, 'types': ['emotion']})\n<<<<<<<<<<<<<\n",
      "contexts": [
        {
          "do": {
            "left": "sentientBeing",
            "right": "emotion"
          },
          "emotion": {
            "marker": "emotion",
            "types": [
              "emotion"
            ],
            "unknown": true,
            "value": "angry",
            "word": "angry",
            "response": null
          },
          "marker": "feel",
          "sentientBeing": {
            "marker": "sentientBeing",
            "types": [
              "sentientBeing"
            ],
            "unknown": true,
            "value": "greg",
            "word": "greg"
          },
          "value": "feel",
          "word": "feels",
          "topLevel": true
        }
      ],
      "generated": [
        "feels"
      ],
      "paraphrases": [
        "greg feels angry"
      ],
      "responses": [
        ""
      ],
      "memory_free_percent": 57,
      "version": "6.13.37",
      "query": "greg feels angry"
    }
  ],
  "fragments": [],
  "semantics": []
}